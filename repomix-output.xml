This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
docs/
  css-styleguide.md
public/
  _redirects
  favicon.svg
  index.html
  logo-icon.svg
  manifest.json
  robots.txt
  serviceWorker.js
src/
  components/
    alerts/
      Alerts.css
      AlertSystem.jsx
    behavior/
      Behavior.css
      BehaviorFeedback.jsx
    charts/
      BehaviorRadar.jsx
      ChartContainer.jsx
      ChartStyles.css
      ComparisonChart.jsx
      PortfolioChart.jsx
    common/
      Button.css
      Button.jsx
      Card.css
      Card.jsx
      Input.css
      Input.jsx
      Text.jsx
    layout/
      Footer.css
      Footer.jsx
      Header.css
      Header.jsx
      Sidebar.css
      Sidebar.jsx
    modals/
      Modal.css
    rebalance/
      AllocationComparisonChart.jsx
      Rebalance.css
    trading/
      MarketOverview.jsx
      PortfolioOverview.jsx
      PortfolioSummary.jsx
      TradeForm.jsx
      TradeHistory.jsx
      Trading.css
      TradingHistory.jsx
    Layout.css
    Layout.jsx
  contexts/
    AuthContext.jsx
    ThemeContext.jsx
  hooks/
    useBehaviorData.js
  pages/
    behavior/
      BehaviorAlerts.css
      BehaviorAlerts.jsx
      BehaviorCorrection.css
      BehaviorCorrection.jsx
      BehaviorProfile.css
      BehaviorProfile.jsx
      TradingSimulation.css
      TradingSimulation.jsx
    cognitive/
      ChatInterface.css
      ChatInterface.jsx
      CourseDetail.css
      CourseDetail.jsx
      LearningCenter.css
      LearningCenter.jsx
      ScenarioSimulation.css
      ScenarioSimulation.jsx
    decision/
      Portfolio.css
      Portfolio.jsx
      PortfolioRebalance.css
      PortfolioRebalance.jsx
    information/
      NewsAnalysis.css
      NewsAnalysis.jsx
      PolicyAnalysis.css
      PolicyAnalysis.jsx
    learning-center/
      CourseDetail.css
    user/
      User.css
      UserProfile.jsx
      UserSettings.jsx
    Auth.css
    css-base.css
    Dashboard.css
    Dashboard.jsx
    ForgotPassword.jsx
    Login.jsx
    NotFound.css
    NotFound.jsx
    Register.jsx
  routes/
    modules/
      behaviorRoutes.jsx
      cognitiveRoutes.jsx
      decisionRoutes.jsx
      informationRoutes.jsx
      userRoutes.jsx
    constants.jsx
    index.jsx
    RouteGuard.jsx
    utils.js
  services/
    baseService.js
    behaviorService.js
    chatService.js
    learningService.js
    mockApi.js
    mockData.js
    newsService.js
    policyService.js
    portfolioService.js
    tradingService.js
  styles/
    composable-classes.css
    dark-theme.css
    globals.css
    layout-variables.css
    responsive-variables.css
    TextStyles.css
    typography.css
    variables.css
  utils/
    formatters.js
  App.css
  App.jsx
  index.css
  main.jsx
.gitignore
capacitor.config.json
index.html
jsconfig.json
netlify.toml
package.json
README_1.md
README.md
tsconfig.json
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/alerts/AlertSystem.jsx">
import React, { useState, useEffect, useRef, createContext, useContext } from 'react';
import { createPortal } from 'react-dom';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Alerts.css';

// 创建消息通知上下文
const AlertsContext = createContext(null);

/**
 * 提供消息通知功能的Provider组件
 * 用于包裹应用，使所有组件都能使用通知功能
 */
export const AlertsProvider = ({ children }) => {
  const [alerts, setAlerts] = useState([]);
  const alertsRoot = useRef(null);

  useEffect(() => {
    // 创建弹窗容器
    const container = document.createElement('div');
    container.className = 'alerts-container';
    document.body.appendChild(container);
    alertsRoot.current = container;

    return () => {
      document.body.removeChild(container);
    };
  }, []);

  // 添加新的消息通知
  const addAlert = (alertData) => {
    const id = Date.now().toString();
    const alert = {
      id,
      ...alertData,
      type: alertData.type || 'info',
      autoHideDuration: alertData.autoHideDuration || 5000,
    };
    
    setAlerts((prev) => [...prev, alert]);

    // 自动关闭
    if (alert.autoHideDuration > 0) {
      setTimeout(() => removeAlert(id), alert.autoHideDuration);
    }

    return id;
  };

  // 移除消息通知
  const removeAlert = (id) => {
    setAlerts((prev) => {
      const alert = prev.find(a => a.id === id);
      if (!alert) return prev;

      // 标记为正在退出，以触发动画
      return prev.map(a => a.id === id ? { ...a, exiting: true } : a);
    });

    // 动画结束后移除
    setTimeout(() => {
      setAlerts((prev) => prev.filter(a => a.id !== id));
    }, 300);
  };

  // 快捷方法
  const showInfo = (message, options = {}) => 
    addAlert({ type: 'info', message, ...options });
  
  const showSuccess = (message, options = {}) => 
    addAlert({ type: 'success', message, ...options });
  
  const showWarning = (message, options = {}) => 
    addAlert({ type: 'warning', message, ...options });
  
  const showError = (message, options = {}) => 
    addAlert({ type: 'error', message, ...options });

  const contextValue = {
    addAlert,
    removeAlert,
    showInfo,
    showSuccess,
    showWarning,
    showError,
  };

  // 渲染消息通知
  const renderAlerts = () => {
    if (!alertsRoot.current) return null;

    return createPortal(
      alerts.map((alert) => (
        <Alert 
          key={alert.id}
          {...alert}
          onClose={() => removeAlert(alert.id)}
        />
      )),
      alertsRoot.current
    );
  };

  return (
    <AlertsContext.Provider value={contextValue}>
      {children}
      {renderAlerts()}
    </AlertsContext.Provider>
  );
};

AlertsProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

/**
 * 使用消息通知的Hook
 * @returns {Object} 包含显示不同类型通知的方法
 */
export const useAlerts = () => {
  const context = useContext(AlertsContext);
  
  if (!context) {
    throw new Error('useAlerts must be used within an AlertsProvider');
  }
  
  return context;
};

/**
 * 消息通知组件
 * 显示不同类型的通知消息
 */
const Alert = ({
  id,
  type = 'info',
  title,
  message,
  exiting = false,
  autoHideDuration,
  onClose,
}) => {
  const [progress, setProgress] = useState(100);
  const progressInterval = useRef(null);
  
  useEffect(() => {
    // 如果设置了自动关闭，显示进度条
    if (autoHideDuration > 0) {
      const interval = 100; // 每100ms更新一次进度
      const totalSteps = autoHideDuration / interval;
      const step = 100 / totalSteps;
      
      progressInterval.current = setInterval(() => {
        setProgress((prev) => {
          const newProgress = prev - step;
          return newProgress > 0 ? newProgress : 0;
        });
      }, interval);
    }
    
    return () => {
      if (progressInterval.current) {
        clearInterval(progressInterval.current);
      }
    };
  }, [autoHideDuration]);
  
  const alertClassNames = classNames('alert', {
    [`alert-${type}`]: true,
    'alert-exiting': exiting,
  });
  
  const getIconByType = () => {
    switch(type) {
      case 'success':
        return (
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM8 15L3 10L4.41 8.59L8 12.17L15.59 4.58L17 6L8 15Z" fill="currentColor"/>
          </svg>
        );
      case 'error':
        return (
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z" fill="currentColor"/>
          </svg>
        );
      case 'warning':
        return (
          <svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 16H10V14H12V16ZM12 12H10V8H12V12ZM11 0C4.9 0 0 4.9 0 11C0 17.1 4.9 22 11 22C17.1 22 22 17.1 22 11C22 4.9 17.1 0 11 0ZM11 20C6 20 2 16 2 11C2 6 6 2 11 2C16 2 20 6 20 11C20 16 16 20 11 20Z" fill="currentColor"/>
          </svg>
        );
      default: // info
        return (
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 15H9V9H11V15ZM11 7H9V5H11V7Z" fill="currentColor"/>
          </svg>
        );
    }
  };
  
  return (
    <div className={alertClassNames} role="alert" style={{ position: 'relative' }}>
      <div className="alert-icon">
        {getIconByType()}
      </div>
      
      <div className="alert-content">
        {title && <h4 className="alert-title">{title}</h4>}
        {message && <p className="alert-message">{message}</p>}
      </div>
      
      <button 
        className="alert-close" 
        onClick={onClose}
        aria-label="关闭通知"
      >
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12.7071 4.70711C13.0976 4.31658 13.0976 3.68342 12.7071 3.29289C12.3166 2.90237 11.6834 2.90237 11.2929 3.29289L8 6.58579L4.70711 3.29289C4.31658 2.90237 3.68342 2.90237 3.29289 3.29289C2.90237 3.68342 2.90237 4.31658 3.29289 4.70711L6.58579 8L3.29289 11.2929C2.90237 11.6834 2.90237 12.3166 3.29289 12.7071C3.68342 13.0976 4.31658 13.0976 4.70711 12.7071L8 9.41421L11.2929 12.7071C11.6834 13.0976 12.3166 13.0976 12.7071 12.7071C13.0976 12.3166 13.0976 11.6834 12.7071 11.2929L9.41421 8L12.7071 4.70711Z" fill="currentColor"/>
        </svg>
      </button>
      
      {autoHideDuration > 0 && (
        <div 
          className="alert-progress"
          style={{ 
            width: `${progress}%`,
            backgroundColor: `var(--${type}-color)`,
            opacity: 0.3
          }}
        />
      )}
    </div>
  );
};

Alert.propTypes = {
  id: PropTypes.string,
  type: PropTypes.oneOf(['info', 'success', 'warning', 'error']),
  title: PropTypes.string,
  message: PropTypes.string.isRequired,
  exiting: PropTypes.bool,
  autoHideDuration: PropTypes.number,
  onClose: PropTypes.func.isRequired,
};

/**
 * 直接使用的消息通知组件，用于显示静态的消息通知
 */
export const AlertMessage = ({
  type = 'info', 
  title, 
  message, 
  onClose, 
  className,
  ...props
}) => {
  const alertClassNames = classNames('alert', {
    [`alert-${type}`]: true,
  }, className);

  const getIconByType = () => {
    switch(type) {
      case 'success':
        return (
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM8 15L3 10L4.41 8.59L8 12.17L15.59 4.58L17 6L8 15Z" fill="currentColor"/>
          </svg>
        );
      case 'error':
        return (
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z" fill="currentColor"/>
          </svg>
        );
      case 'warning':
        return (
          <svg width="22" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 16H10V14H12V16ZM12 12H10V8H12V12ZM11 0C4.9 0 0 4.9 0 11C0 17.1 4.9 22 11 22C17.1 22 22 17.1 22 11C22 4.9 17.1 0 11 0ZM11 20C6 20 2 16 2 11C2 6 6 2 11 2C16 2 20 6 20 11C20 16 16 20 11 20Z" fill="currentColor"/>
          </svg>
        );
      default: // info
        return (
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 15H9V9H11V15ZM11 7H9V5H11V7Z" fill="currentColor"/>
          </svg>
        );
    }
  };

  return (
    <div className={alertClassNames} role="alert" {...props}>
      <div className="alert-icon">
        {getIconByType()}
      </div>
      
      <div className="alert-content">
        {title && <h4 className="alert-title">{title}</h4>}
        {message && <p className="alert-message">{message}</p>}
      </div>
      
      {onClose && (
        <button 
          className="alert-close" 
          onClick={onClose}
          aria-label="关闭通知"
        >
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12.7071 4.70711C13.0976 4.31658 13.0976 3.68342 12.7071 3.29289C12.3166 2.90237 11.6834 2.90237 11.2929 3.29289L8 6.58579L4.70711 3.29289C4.31658 2.90237 3.68342 2.90237 3.29289 3.29289C2.90237 3.68342 2.90237 4.31658 3.29289 4.70711L6.58579 8L3.29289 11.2929C2.90237 11.6834 2.90237 12.3166 3.29289 12.7071C3.68342 13.0976 4.31658 13.0976 4.70711 12.7071L8 9.41421L11.2929 12.7071C11.6834 13.0976 12.3166 13.0976 12.7071 12.7071C13.0976 12.3166 13.0976 11.6834 12.7071 11.2929L9.41421 8L12.7071 4.70711Z" fill="currentColor"/>
          </svg>
        </button>
      )}
    </div>
  );
};

AlertMessage.propTypes = {
  type: PropTypes.oneOf(['info', 'success', 'warning', 'error']),
  title: PropTypes.string,
  message: PropTypes.string.isRequired,
  onClose: PropTypes.func,
  className: PropTypes.string,
};

// 导出整个组件库
export default {
  AlertsProvider,
  useAlerts,
  AlertMessage,
};
</file>

<file path="src/components/charts/ChartContainer.jsx">
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './ChartStyles.css';

/**
 * 基础图表组件
 * 提供一致的图表容器、标题、加载状态和空状态
 * 
 * @param {Object} props 组件属性
 * @param {React.ReactNode} props.children 图表内容
 * @param {string} props.title 图表标题
 * @param {string} props.subtitle 图表副标题
 * @param {React.ReactNode} props.actions 图表操作区内容
 * @param {boolean} props.loading 是否正在加载
 * @param {boolean} props.empty 是否为空状态
 * @param {string} props.emptyMessage 空状态提示信息
 * @param {React.ReactNode} props.emptyIcon 空状态图标
 * @param {React.ReactNode} props.footer 图表底部内容
 * @param {React.ReactNode} props.legend 图表图例
 * @param {string} props.className 自定义类名
 */
const ChartContainer = ({
  children,
  title,
  subtitle,
  actions,
  loading = false,
  empty = false,
  emptyMessage = '暂无数据',
  emptyIcon,
  footer,
  legend,
  className,
  ...restProps
}) => {
  const renderEmptyState = () => (
    <div className="chart-empty">
      {emptyIcon && <div className="chart-empty-icon">{emptyIcon}</div>}
      <div className="chart-empty-text">{emptyMessage}</div>
    </div>
  );

  const renderLoadingState = () => (
    <div className="chart-loading">
      <svg width="38" height="38" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient x1="8.042%" y1="0%" x2="65.682%" y2="23.865%" id="a">
            <stop stopColor="currentColor" stopOpacity="0" offset="0%" />
            <stop stopColor="currentColor" stopOpacity=".631" offset="63.146%" />
            <stop stopColor="currentColor" offset="100%" />
          </linearGradient>
        </defs>
        <g fill="none" fillRule="evenodd">
          <g transform="translate(1 1)">
            <path d="M36 18c0-9.94-8.06-18-18-18" stroke="url(#a)" strokeWidth="2">
              <animateTransform
                attributeName="transform"
                type="rotate"
                from="0 18 18"
                to="360 18 18"
                dur="0.9s"
                repeatCount="indefinite"
              />
            </path>
            <circle fill="currentColor" cx="36" cy="18" r="1">
              <animateTransform
                attributeName="transform"
                type="rotate"
                from="0 18 18"
                to="360 18 18"
                dur="0.9s"
                repeatCount="indefinite"
              />
            </circle>
          </g>
        </g>
      </svg>
    </div>
  );

  const renderLegend = () => {
    if (!legend) return null;
    
    return (
      <div className="chart-legend">
        {legend}
      </div>
    );
  };

  return (
    <div className={classNames('chart-container', className)} {...restProps}>
      {(title || actions) && (
        <div className="chart-header">
          <div>
            {title && <h3 className="chart-title">{title}</h3>}
            {subtitle && <p className="chart-subtitle">{subtitle}</p>}
          </div>
          {actions && <div className="chart-actions">{actions}</div>}
        </div>
      )}
      
      <div className="chart-body">
        {loading && renderLoadingState()}
        {!loading && empty && renderEmptyState()}
        {!loading && !empty && children}
      </div>
      
      {(footer || legend) && (
        <div className="chart-footer">
          {renderLegend()}
          {footer && <div className="chart-footer-actions">{footer}</div>}
        </div>
      )}
    </div>
  );
};

ChartContainer.propTypes = {
  children: PropTypes.node,
  title: PropTypes.string,
  subtitle: PropTypes.string,
  actions: PropTypes.node,
  loading: PropTypes.bool,
  empty: PropTypes.bool,
  emptyMessage: PropTypes.string,
  emptyIcon: PropTypes.node,
  footer: PropTypes.node,
  legend: PropTypes.node,
  className: PropTypes.string,
};

/**
 * 图表图例项组件
 * 
 * @param {Object} props 组件属性
 * @param {string} props.color 图例颜色
 * @param {string} props.label 图例标签
 */
export const ChartLegendItem = ({ color, label }) => (
  <div className="chart-legend-item">
    <span className="chart-legend-color" style={{ backgroundColor: color }} />
    <span>{label}</span>
  </div>
);

ChartLegendItem.propTypes = {
  color: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
};

export default ChartContainer;
</file>

<file path="src/components/common/Button.css">
/* 按钮样式 */

/* 基础按钮样式 */
.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: var(--font-weight-medium);
  border: none;
  border-radius: var(--border-radius-md);
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
  white-space: nowrap;
  user-select: none;
}

.button:active {
  transform: translateY(1px);
}

/* 按钮变体 */
.button-primary {
  background-color: var(--primary-color);
  color: white;
}

.button-primary:hover:not(.button-disabled) {
  background-color: var(--primary-dark);
}

.button-primary:active:not(.button-disabled) {
  background-color: var(--primary-dark);
}

.button-secondary {
  background-color: var(--neutral-100);
  color: var(--text-primary);
}

.button-secondary:hover:not(.button-disabled) {
  background-color: var(--neutral-200);
}

.button-secondary:active:not(.button-disabled) {
  background-color: var(--neutral-300);
}

.button-outline {
  background-color: transparent;
  border: 1px solid var(--neutral-300);
  color: var(--text-primary);
}

.button-outline:hover:not(.button-disabled) {
  background-color: var(--neutral-50);
  border-color: var(--neutral-400);
}

.button-outline:active:not(.button-disabled) {
  background-color: var(--neutral-100);
}

.button-text {
  background-color: transparent;
  color: var(--primary-color);
  padding: var(--spacing-xs) var(--spacing-sm);
}

.button-text:hover:not(.button-disabled) {
  background-color: rgba(37, 99, 235, 0.05);
}

.button-text:active:not(.button-disabled) {
  background-color: rgba(37, 99, 235, 0.1);
}

/* 功能性按钮变体 */
.button-success {
  background-color: var(--success-color);
  color: white;
}

.button-success:hover:not(.button-disabled) {
  background-color: var(--success-dark);
}

.button-error {
  background-color: var(--error-color);
  color: white;
}

.button-error:hover:not(.button-disabled) {
  background-color: var(--error-dark);
}

.button-warning {
  background-color: var(--warning-color);
  color: white;
}

.button-warning:hover:not(.button-disabled) {
  background-color: var(--warning-dark);
}

.button-info {
  background-color: var(--info-color);
  color: white;
}

.button-info:hover:not(.button-disabled) {
  background-color: var(--info-dark);
}

/* 按钮尺寸 */
.button-xs {
  padding: calc(var(--spacing-xs) / 2) var(--spacing-xs);
  font-size: var(--font-size-xs);
}

.button-sm {
  padding: var(--spacing-xs) var(--spacing-sm);
  font-size: var(--font-size-sm);
}

.button-md {
  padding: var(--spacing-sm) var(--spacing-md);
  font-size: var(--font-size-md);
}

.button-lg {
  padding: var(--spacing-md) var(--spacing-lg);
  font-size: var(--font-size-lg);
}

.button-xl {
  padding: var(--spacing-lg) var(--spacing-xl);
  font-size: var(--font-size-xl);
}

/* 其他属性 */
.button-full-width {
  width: 100%;
}

.button-disabled {
  opacity: 0.6;
  cursor: not-allowed;
  pointer-events: none;
}

.button-rounded {
  border-radius: var(--border-radius-full);
}

.button-square {
  border-radius: var(--border-radius-sm);
}

.button-icon-only {
  aspect-ratio: 1/1;
  padding: var(--spacing-sm);
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

/* 按钮内容布局 */
.button-icon-left .button-icon {
  margin-right: var(--spacing-sm);
}

.button-icon-right .button-icon {
  margin-left: var(--spacing-sm);
}

/* 加载状态按钮 */
.button-loading {
  cursor: wait;
  opacity: 0.8;
}

.button-loading-indicator {
  margin-right: var(--spacing-sm);
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* 深色模式按钮样式 */
.dark-theme .button-primary {
  background-color: var(--primary-color);
}

.dark-theme .button-primary:hover:not(.button-disabled) {
  background-color: var(--primary-light);
}

.dark-theme .button-secondary {
  background-color: var(--neutral-700);
  color: var(--text-primary);
}

.dark-theme .button-secondary:hover:not(.button-disabled) {
  background-color: var(--neutral-600);
}

.dark-theme .button-outline {
  border-color: var(--neutral-500);
  color: var(--text-primary);
}

.dark-theme .button-outline:hover:not(.button-disabled) {
  background-color: var(--neutral-700);
  border-color: var(--neutral-400);
}

.dark-theme .button-text {
  color: var(--primary-light);
}

.dark-theme .button-text:hover:not(.button-disabled) {
  background-color: rgba(59, 130, 246, 0.15);
}
</file>

<file path="src/components/common/Input.css">
/* 输入框样式 */

/* 表单组样式 */
.form-group {
  margin-bottom: var(--spacing-md);
  position: relative;
}

.form-group-full-width {
  width: 100%;
}

/* 标签样式 */
.input-label {
  display: block;
  margin-bottom: var(--spacing-xs);
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
  font-weight: var(--font-weight-medium);
}

.input-required {
  color: var(--error-color);
  margin-left: var(--spacing-xs);
}

/* 输入框基础样式 */
.input-field {
  display: block;
  width: 100%;
  padding: var(--spacing-sm) var(--spacing-md);
  line-height: var(--line-height-normal);
  color: var(--text-primary);
  background-color: var(--input-bg);
  border: 1px solid var(--input-border);
  border-radius: var(--border-radius-md);
  transition: all 0.2s ease;
  font-size: var(--font-size-md);
}

.input-field:focus {
  border-color: var(--primary-color);
  outline: 0;
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.25);
}

.input-field::placeholder {
  color: var(--neutral-400);
  opacity: 0.7;
}

/* 不同尺寸的输入框 */
.input-sm {
  padding: var(--spacing-xs) var(--spacing-sm);
  font-size: var(--font-size-sm);
}

.input-lg {
  padding: var(--spacing-md) var(--spacing-lg);
  font-size: var(--font-size-lg);
}

/* 错误状态 */
.input-error {
  border-color: var(--error-color);
}

.input-error:focus {
  box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.25);
}

.input-error-text {
  color: var(--error-color);
}

/* 禁用状态 */
.input-disabled {
  background-color: var(--neutral-100);
  opacity: 0.7;
  cursor: not-allowed;
}

/* 辅助文本 */
.input-helper-text {
  margin-top: var(--spacing-xs);
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
}

/* 输入框带图标 */
.input-with-icon {
  position: relative;
}

.input-with-icon .input-field {
  padding-right: calc(var(--spacing-lg) + var(--spacing-md));
}

.input-icon {
  position: absolute;
  top: 50%;
  right: var(--spacing-md);
  transform: translateY(-50%);
  color: var(--neutral-500);
  pointer-events: none;
}

.input-with-prefix .input-field {
  padding-left: calc(var(--spacing-lg) + var(--spacing-md));
}

.input-prefix {
  position: absolute;
  top: 50%;
  left: var(--spacing-md);
  transform: translateY(-50%);
  color: var(--neutral-500);
  pointer-events: none;
}

/* 可操作图标 */
.input-icon-clickable {
  pointer-events: auto;
  cursor: pointer;
}

.input-icon-clickable:hover {
  color: var(--primary-color);
}

/* 搜索框 */
.input-search .input-field {
  padding-left: calc(var(--spacing-lg) + var(--spacing-md));
}

.input-search-icon {
  position: absolute;
  top: 50%;
  left: var(--spacing-md);
  transform: translateY(-50%);
  color: var(--neutral-500);
  pointer-events: none;
}

/* 不同外观变体 */
.input-filled {
  background-color: var(--neutral-100);
  border-color: transparent;
}

.input-filled:focus {
  background-color: var(--neutral-50);
}

.input-outlined {
  background-color: transparent;
  border: 1px solid var(--neutral-300);
}

.input-underlined {
  background-color: transparent;
  border: none;
  border-bottom: 1px solid var(--neutral-300);
  border-radius: 0;
  padding-left: 0;
  padding-right: 0;
}

.input-underlined:focus {
  box-shadow: none;
  border-color: var(--primary-color);
}

/* 深色模式样式 */
.dark-theme .input-field {
  background-color: var(--input-bg);
  color: var(--input-text);
  border-color: var(--input-border);
}

.dark-theme .input-field::placeholder {
  color: var(--neutral-500);
}

.dark-theme .input-filled {
  background-color: var(--neutral-700);
  border-color: transparent;
}

.dark-theme .input-filled:focus {
  background-color: var(--neutral-600);
}

.dark-theme .input-disabled {
  background-color: var(--neutral-800);
  opacity: 0.5;
}
</file>

<file path="src/routes/modules/behaviorRoutes.jsx">
import React, { lazy } from 'react';
import { Navigate } from 'react-router-dom';
import { BEHAVIOR, BEHAVIOR_PROFILE } from '../constants';

// 使用React.lazy实现组件懒加载
const BehaviorProfile = lazy(() => import('../../pages/behavior/BehaviorProfile'));
const TradingSimulation = lazy(() => import('../../pages/behavior/TradingSimulation'));
const BehaviorAlerts = lazy(() => import('../../pages/behavior/BehaviorAlerts'));
const BehaviorCorrection = lazy(() => import('../../pages/behavior/BehaviorCorrection'));

// 行为矫正模块路由配置
const behaviorRoutes = {
  path: 'behavior',
  children: [
    {
      index: true,
      element: <Navigate to={BEHAVIOR_PROFILE} replace />
    },
    {
      path: 'profile',
      element: <BehaviorProfile />,
      meta: {
        title: '行为画像',
        icon: 'profile',
        requireAuth: true
      }
    },
    {
      path: 'trading',
      element: <TradingSimulation />,
      meta: {
        title: '模拟交易',
        icon: 'trading',
        requireAuth: true
      }
    },
    {
      path: 'alerts',
      element: <BehaviorAlerts />,
      meta: {
        title: '行为提醒',
        icon: 'alert',
        requireAuth: true,
        badge: true // 表示可能显示提醒数量
      }
    },
    {
      path: 'correction',
      element: <BehaviorCorrection />,
      meta: {
        title: '行为矫正',
        icon: 'correction',
        requireAuth: true
      }
    }
  ]
};

export default behaviorRoutes;
</file>

<file path="src/routes/modules/cognitiveRoutes.jsx">
import React, { lazy } from 'react';
import { Navigate } from 'react-router-dom';
import { COGNITIVE, COGNITIVE_CHAT } from '../constants';

// 使用React.lazy实现组件懒加载
const ChatInterface = lazy(() => import('../../pages/cognitive/ChatInterface'));
const LearningCenter = lazy(() => import('../../pages/cognitive/LearningCenter'));
const CourseDetail = lazy(() => import('../../pages/cognitive/CourseDetail'));
const ScenarioSimulation = lazy(() => import('../../pages/cognitive/ScenarioSimulation'));

// 认知诊断与教学模块路由配置
const cognitiveRoutes = {
  path: 'cognitive',
  children: [
    {
      index: true,
      element: <Navigate to={COGNITIVE_CHAT} replace />
    },
    {
      path: 'chat',
      element: <ChatInterface />,
      meta: {
        title: 'AI 助手对话',
        icon: 'chat',
        requireAuth: true
      }
    },
    {
      path: 'learning',
      element: <LearningCenter />,
      meta: {
        title: '学习中心',
        icon: 'book',
        requireAuth: true
      }
    },
    {
      path: 'learning/course/:courseId',
      element: <CourseDetail />,
      meta: {
        title: '课程详情',
        hideInMenu: true,
        requireAuth: true
      }
    },
    {
      path: 'simulation',
      element: <ScenarioSimulation />,
      meta: {
        title: '场景模拟',
        icon: 'simulation',
        requireAuth: true
      }
    }
  ]
};

export default cognitiveRoutes;
</file>

<file path="src/routes/modules/decisionRoutes.jsx">
import React, { lazy } from 'react';
import { Navigate } from 'react-router-dom';
import { DECISION, DECISION_PORTFOLIO } from '../constants';

// 使用React.lazy实现组件懒加载
const Portfolio = lazy(() => import('../../pages/decision/Portfolio'));
const PortfolioRebalancePage = lazy(() => import('../../pages/decision/PortfolioRebalance'));

// 临时占位组件
const PlaceholderComponent = (name) => () => <div>正在开发中: {name} 组件</div>;
const DecisionComparison = lazy(() => Promise.resolve({
  default: PlaceholderComponent('决策对比')
}));

// 决策支持模块路由配置
const decisionRoutes = {
  path: 'decision',
  children: [
    {
      index: true,
      element: <Navigate to={DECISION_PORTFOLIO} replace />
    },
    {
      path: 'portfolio',
      element: <Portfolio />,
      meta: {
        title: '投资组合分析',
        icon: 'portfolio',
        requireAuth: true
      }
    },
    {
      path: 'rebalance',
      element: <PortfolioRebalancePage />,
      meta: {
        title: '再平衡建议',
        icon: 'rebalance',
        requireAuth: true
      }
    },
    {
      path: 'comparison',
      element: <DecisionComparison />,
      meta: {
        title: '决策对比',
        icon: 'comparison',
        requireAuth: true,
        developmentStage: 'inProgress' // 标记开发状态
      }
    }
  ]
};

export default decisionRoutes;
</file>

<file path="src/routes/modules/informationRoutes.jsx">
import React, { lazy } from 'react';
import { Navigate } from 'react-router-dom';
import { INFORMATION, INFORMATION_NEWS } from '../constants';

// 使用React.lazy实现组件懒加载
const NewsAnalysis = lazy(() => import('../../pages/information/NewsAnalysis'));
const PolicyAnalysis = lazy(() => import('../../pages/information/PolicyAnalysis'));

// 信息解读模块路由配置
const informationRoutes = {
  path: 'information',
  children: [
    {
      index: true,
      element: <Navigate to={INFORMATION_NEWS} replace />
    },
    {
      path: 'news',
      element: <NewsAnalysis />,
      meta: {
        title: '新闻解读',
        icon: 'news',
        requireAuth: true
      }
    },
    {
      path: 'policy',
      element: <PolicyAnalysis />,
      meta: {
        title: '政策解读',
        icon: 'policy',
        requireAuth: true
      }
    }
  ]
};

export default informationRoutes;
</file>

<file path="src/routes/modules/userRoutes.jsx">
import React, { lazy } from 'react';
import { Navigate } from 'react-router-dom';
import { USER, USER_PROFILE } from '../constants';

// 使用React.lazy实现组件懒加载
const UserProfile = lazy(() => import('../../pages/user/UserProfile'));
const UserSettings = lazy(() => import('../../pages/user/UserSettings'));

// 用户模块路由配置
const userRoutes = {
  path: 'user',
  children: [
    {
      index: true,
      element: <Navigate to={USER_PROFILE} replace />
    },
    {
      path: 'profile',
      element: <UserProfile />,
      meta: {
        title: '个人资料',
        icon: 'user',
        requireAuth: true
      }
    },
    {
      path: 'settings',
      element: <UserSettings />,
      meta: {
        title: '账户设置',
        icon: 'settings',
        requireAuth: true
      }
    }
  ]
};

export default userRoutes;
</file>

<file path="src/routes/constants.jsx">
/**
 * 路由路径常量
 * 集中管理所有路由路径，避免硬编码
 */

// 基础路径
export const ROOT = '/';
export const DASHBOARD = '/dashboard';
export const LOGIN = '/login';
export const REGISTER = '/register';

// 认知诊断模块
export const COGNITIVE = `${DASHBOARD}/cognitive`;
export const COGNITIVE_CHAT = `${COGNITIVE}/chat`;
export const COGNITIVE_LEARNING = `${COGNITIVE}/learning`;
export const COGNITIVE_COURSE_DETAIL = `${COGNITIVE_LEARNING}/course/:courseId`;
export const COGNITIVE_SIMULATION = `${COGNITIVE}/simulation`;

// 行为矫正模块
export const BEHAVIOR = `${DASHBOARD}/behavior`;
export const BEHAVIOR_PROFILE = `${BEHAVIOR}/profile`;
export const BEHAVIOR_TRADING = `${BEHAVIOR}/trading`;
export const BEHAVIOR_ALERTS = `${BEHAVIOR}/alerts`;
export const BEHAVIOR_CORRECTION = `${BEHAVIOR}/correction`;

// 决策支持模块
export const DECISION = `${DASHBOARD}/decision`;
export const DECISION_PORTFOLIO = `${DECISION}/portfolio`;
export const DECISION_REBALANCE = `${DECISION}/rebalance`;
export const DECISION_COMPARISON = `${DECISION}/comparison`;

// 信息解读模块
export const INFORMATION = `${DASHBOARD}/information`;
export const INFORMATION_NEWS = `${INFORMATION}/news`;
export const INFORMATION_POLICY = `${INFORMATION}/policy`;

// 用户模块
export const USER = `${DASHBOARD}/user`;
export const USER_PROFILE = `${USER}/profile`;
export const USER_SETTINGS = `${USER}/settings`;

// 错误页面
export const NOT_FOUND = '*';
</file>

<file path="src/routes/index.jsx">
import React, { lazy, Suspense } from 'react';
import { createBrowserRouter, Navigate } from 'react-router-dom';
import RouteGuard from './RouteGuard';
import Layout from '../components/Layout';
import { ROOT, DASHBOARD, LOGIN, REGISTER, NOT_FOUND } from './constants';

// 导入各模块路由
import cognitiveRoutes from './modules/cognitiveRoutes';
import behaviorRoutes from './modules/behaviorRoutes';
import decisionRoutes from './modules/decisionRoutes';
import informationRoutes from './modules/informationRoutes';
import userRoutes from './modules/userRoutes';

// 使用React.lazy实现组件懒加载
const Dashboard = lazy(() => import('../pages/Dashboard'));
const Login = lazy(() => import('../pages/Login'));
const Register = lazy(() => import('../pages/Register'));
const NotFound = lazy(() => import('../pages/NotFound'));

// 加载中组件
const LoadingFallback = () => (
  <div className="page-loading">
    <div className="loading-spinner"></div>
    <p>页面加载中...</p>
  </div>
);

// 为懒加载组件添加Suspense包装
const withSuspense = (Component) => (
  <Suspense fallback={<LoadingFallback />}>
    <Component />
  </Suspense>
);

// 为需要认证的路由添加RouteGuard包装
const withAuth = (Component, options = {}) => (
  <RouteGuard requireAuth={options.requireAuth} allowedRoles={options.allowedRoles}>
    <Suspense fallback={<LoadingFallback />}>
      <Component />
    </Suspense>
  </RouteGuard>
);

// 递归处理路由配置，添加Suspense和RouteGuard包装
const processRoutes = (routes) => {
  if (!routes.children) {
    return routes;
  }

  return {
    ...routes,
    children: routes.children.map(route => {
      // 如果是重定向路由，不需要特殊处理
      if (route.element && route.element.type === Navigate) {
        return route;
      }

      // 如果有子路由，递归处理
      if (route.children) {
        return processRoutes(route);
      }

      // 处理路由元数据和认证
      const meta = route.meta || {};
      const requireAuth = meta.requireAuth !== false; // 默认需要认证

      // 应用RouteGuard和Suspense
      return {
        ...route,
        element: withAuth(
          () => route.element,
          { requireAuth, allowedRoles: meta.allowedRoles }
        )
      };
    })
  };
};

// 创建路由配置
const router = createBrowserRouter([
  // 根路径重定向到仪表盘
  {
    path: ROOT,
    element: <Navigate to={DASHBOARD} replace />
  },
  
  // 公共页面 - 不需要认证
  {
    path: LOGIN,
    element: withSuspense(Login)
  },
  {
    path: REGISTER,
    element: withSuspense(Register)
  },
  
  // 应用主布局 - 需要认证
  {
    path: DASHBOARD,
    element: (
      <RouteGuard>
        <Layout />
      </RouteGuard>
    ),
    children: [
      // 仪表盘页面
      {
        index: true,
        element: withSuspense(Dashboard)
      },
      
      // 各模块路由
      processRoutes(cognitiveRoutes),
      processRoutes(behaviorRoutes),
      processRoutes(decisionRoutes),
      processRoutes(informationRoutes),
      processRoutes(userRoutes)
    ]
  },
  
  // 404页面
  {
    path: NOT_FOUND,
    element: withSuspense(NotFound)
  }
]);

export default router;
</file>

<file path="src/routes/RouteGuard.jsx">
import React, { useContext } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { AuthContext } from '../contexts/AuthContext';
import { LOGIN } from './constants';

/**
 * 路由守卫组件
 * 用于保护需要登录才能访问的路由
 * 
 * @param {Object} props - 组件属性
 * @param {React.ReactNode} props.children - 子组件
 * @param {boolean} [props.requireAuth=true] - 是否需要认证
 * @param {string[]} [props.allowedRoles] - 允许访问的角色列表
 */
const RouteGuard = ({ children, requireAuth = true, allowedRoles = [] }) => {
  const { user, loading } = useContext(AuthContext);
  const location = useLocation();

  // 如果认证状态正在加载中，显示加载状态
  if (loading) {
    return <div className="route-loading">认证中...</div>;
  }

  // 如果路由需要认证但用户未登录，重定向到登录页面
  if (requireAuth && !user) {
    // 将当前路径保存到location state，以便登录后重定向回来
    return <Navigate to={LOGIN} state={{ from: location.pathname }} replace />;
  }

  // 如果指定了角色限制且用户不具备所需角色，显示无权限页面
  if (requireAuth && allowedRoles.length > 0 && user) {
    const hasRequiredRole = allowedRoles.some(role => 
      user.roles && user.roles.includes(role)
    );
    
    if (!hasRequiredRole) {
      return <div className="unauthorized">您没有访问此页面的权限</div>;
    }
  }

  // 通过所有验证，渲染子组件
  return children;
};

export default RouteGuard;
</file>

<file path="src/routes/utils.js">
/**
 * 路由工具函数
 * 用于根据路由配置生成菜单和获取路由信息
 */
import { DASHBOARD } from './constants';

/**
 * 从路由配置中提取菜单项
 * @param {Array} routes - 路由配置数组
 * @param {string} parentPath - 父级路径
 * @returns {Array} 菜单项数组
 */
export const generateMenuFromRoutes = (routes, parentPath = '') => {
  if (!routes || !Array.isArray(routes)) return [];

  return routes
    .filter(route => {
      // 过滤掉没有meta的路由或明确标记为不在菜单中显示的路由
      const meta = route.meta || {};
      return meta && meta.title && !meta.hideInMenu;
    })
    .map(route => {
      const meta = route.meta || {};
      const path = parentPath ? `${parentPath}/${route.path}` : route.path;
      const fullPath = path.startsWith('/') ? path : `/${path}`;
      
      // 构建菜单项
      const menuItem = {
        key: fullPath,
        path: fullPath,
        title: meta.title,
        icon: meta.icon,
        badge: meta.badge,
        developmentStage: meta.developmentStage,
        children: []
      };
      
      // 如果有子路由，递归处理
      if (route.children && Array.isArray(route.children)) {
        menuItem.children = generateMenuFromRoutes(route.children, path);
      }
      
      // 只返回有子菜单或没有children字段的菜单项
      return menuItem.children.length > 0 || !route.children ? menuItem : null;
    })
    .filter(Boolean); // 过滤掉空值
};

/**
 * 获取路由的面包屑导航数据
 * @param {string} path - 当前路径
 * @param {Array} routes - 路由配置数组
 * @returns {Array} 面包屑导航数据
 */
export const getBreadcrumbsFromPath = (path, routes) => {
  // 移除开头和结尾的斜杠
  const normalizedPath = path.replace(/^\/|\/$/g, '');
  const pathSegments = normalizedPath.split('/');
  const breadcrumbs = [];
  
  // 仪表盘永远是第一级
  breadcrumbs.push({
    title: '仪表盘',
    path: DASHBOARD
  });
  
  // 如果当前就是仪表盘，不需要继续处理
  if (normalizedPath === DASHBOARD.replace(/^\//, '') || normalizedPath === '') {
    return breadcrumbs;
  }
  
  // 递归查找路由
  const findRouteInfo = (routes, currentPath, depth = 0) => {
    if (!routes || !Array.isArray(routes)) return null;
    
    for (const route of routes) {
      // 构建完整路径
      const routePath = `${currentPath}/${route.path}`.replace(/\/+/g, '/');
      const routePathSegment = routePath.replace(/^\//, '').split('/')[depth];
      const pathSegment = pathSegments[depth];
      
      // 如果路径段匹配当前路由
      if (routePathSegment === pathSegment || 
          (route.path.includes(':') && pathSegment)) {
        
        // 获取路由元数据
        const meta = route.meta || {};
        const title = meta.title || routePathSegment;
        
        // 添加到面包屑
        breadcrumbs.push({
          title,
          path: routePath
        });
        
        // 如果有子路由且还有更深的路径段，继续递归
        if (route.children && depth + 1 < pathSegments.length) {
          findRouteInfo(route.children, routePath, depth + 1);
          break;
        }
      }
    }
  };
  
  // 开始递归查找
  findRouteInfo(routes, '', 0);
  
  return breadcrumbs;
};

/**
 * 查找指定路径的路由配置
 * @param {string} path - 要查找的路径
 * @param {Array} routes - 路由配置数组
 * @returns {Object|null} 匹配的路由配置或null
 */
export const findRouteByPath = (path, routes) => {
  if (!routes || !Array.isArray(routes)) return null;
  
  for (const route of routes) {
    // 构建完整路径
    const routePath = route.path;
    
    // 如果路径完全匹配
    if (routePath === path) {
      return route;
    }
    
    // 如果有子路由，递归查找
    if (route.children) {
      const childRoute = findRouteByPath(path, route.children);
      if (childRoute) return childRoute;
    }
  }
  
  return null;
};
</file>

<file path="docs/css-styleguide.md">
# CSS 样式指南

## 目录

1. [CSS架构原则](#css架构原则)
2. [变量使用规范](#变量使用规范)
3. [命名约定](#命名约定)
4. [选择器使用指南](#选择器使用指南)
5. [样式冲突解决方案](#样式冲突解决方案)
6. [响应式设计规范](#响应式设计规范)
7. [性能优化建议](#性能优化建议)

## CSS架构原则

### 分层结构

我们的CSS架构采用以下分层结构：

1. **变量层**：定义在`variables.css`、`responsive-variables.css`和`layout-variables.css`中
2. **基础层**：全局重置和基础样式，定义在`globals.css`中
3. **工具层**：可复用的工具类，定义在`composable-classes.css`中
4. **页面层**：特定页面的样式，定义在`pages/`目录下
5. **组件层**：特定组件的样式，定义在`components/`目录下

### 模块化原则

- 每个CSS文件应专注于一个功能或组件
- 使用命名空间防止样式冲突
- 组件内部样式不应依赖外部上下文

## 变量使用规范

### 变量命名规则

- 使用`--`前缀表示CSS变量
- 使用`-`分隔单词
- 按功能分组（颜色、间距、字体等）

### 变量使用优先级

1. 优先使用语义化变量（如`--text-primary`而非直接颜色值）
2. 对于变体，使用主变量的扩展（如`--primary-light`、`--primary-dark`）

## 命名约定

### BEM命名法（推荐）

```css
/* 块 */
.block {}

/* 元素 */
.block__element {}

/* 修饰符 */
.block--modifier {}
.block__element--modifier {}
```

### 命名空间前缀

- `.l-`：布局组件（layout）
- `.c-`：内容组件（content）
- `.u-`：工具类（utility）
- `.js-`：JavaScript钩子（不应用于样式）
- `.is-`、`.has-`：状态类

## 选择器使用指南

### 选择器优先级

选择器优先级按以下顺序从低到高：

1. 元素选择器：`h1`, `p`
2. 类选择器：`.header`, `.content`
3. ID选择器：`#main`, `#sidebar`
4. 内联样式：`style="color: red;"`
5. !important：`color: red !important;`

### 避免的模式

- 避免过深的选择器嵌套（不超过3层）
- 避免使用ID选择器和!important
- 避免在全局范围内修改元素选择器

### 推荐的模式

- 优先使用类选择器
- 使用直接子选择器（>）减少副作用
- 组件内的样式使用命名空间前缀

## 样式冲突解决方案

### 避免使用composes

不要使用：
```css
.card {
  composes: base-card;
}
```

而要使用：
```css
.card {
  /* 直接应用样式或使用多个类 */
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  /* ... */
}
```

### 使用组合类

HTML中使用多个类：
```html
<div class="layout-container layout-padding card-base card-padding">
  <!-- 内容 -->
</div>
```

### 特定性冲突

当出现特定性冲突时：

1. 检查是否可以重构为更具语义的组件
2. 使用更具体的父元素限定选择器
3. 考虑调整HTML结构以减少样式依赖

## 响应式设计规范

### 移动优先

- 首先为移动设备编写基础样式
- 使用媒体查询添加更大屏幕的样式

### 断点使用

使用变量中定义的标准断点：
```css
@media (max-width: var(--breakpoint-md)) {
  /* 平板样式 */
}
```

### 响应式工具类

为常见的响应式模式使用工具类：
```css
.grid-cols-1-mobile {
  grid-template-columns: 1fr;
}
```

## 性能优化建议

- 避免过度使用通配选择器（*）
- 最小化重绘和回流（避免频繁改变布局属性）
- 使用CSS而非JavaScript进行动画
- 考虑使用transform和opacity进行动画，利用GPU加速

## 检查与维护

- 定期运行 `npm run check-css` 检查样式冲突
- 在代码审查中关注CSS质量和一致性
- 及时清理未使用的CSS代码
</file>

<file path="public/_redirects">
/* /index.html 200
</file>

<file path="public/favicon.svg">
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect width="100" height="100" rx="20" fill="#2563EB"/>
  <path d="M30 30H70M30 50H70M30 70H50" stroke="white" stroke-width="8" stroke-linecap="round"/>
  <circle cx="65" cy="70" r="10" fill="#10B981"/>
</svg>
</file>

<file path="public/index.html">
<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="./favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="theme-color" content="#2563eb" />
    <meta name="description" content="FundGene - 基于AI的基金投资助手，帮助您做出更理性的投资决策" />
    <!-- 添加PWA支持的Apple meta标签 -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="FundGene">
    <link rel="apple-touch-icon" href="./logo192.png">
    <!-- 添加manifest文件引用 -->
    <link rel="manifest" href="./manifest.json" />
    <title>FundGene - 基于AI的基金投资助手</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    <!-- 添加Service Worker注册 -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('./serviceWorker.js')
            .then(reg => console.log('Service worker registered'))
            .catch(err => console.log('Service worker not registered', err));
        });
      }
    </script>
  </body>
</html>
</file>

<file path="public/logo-icon.svg">
<!-- filepath: /Users/xueyicheng/Documents/SRTP/ui/public/logo-icon.svg -->
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <defs>
    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#ff9a9e" />
      <stop offset="100%" stop-color="#fad0c4" />
    </linearGradient>
  </defs>
  <path d="M12 2 L21 7 L21 17 L12 22 L3 17 L3 7 L12 2Z" stroke="url(#gradient)" fill="url(#gradient)" opacity="0.8"/>
  <path d="M12 22 L12 12" stroke="white" stroke-width="1.5"/>
  <path d="M3 7 L12 12 L21 7" stroke="white" stroke-width="1.5"/>
  <circle cx="12" cy="12" r="2" fill="white"/>
</svg>
</file>

<file path="public/manifest.json">
{
  "short_name": "FundGene",
  "name": "FundGene - AI基金助手",
  "icons": [
    {
      "src": "favicon.svg",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/svg+xml"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#2563eb",
  "background_color": "#ffffff",
  "orientation": "portrait",
  "description": "基于AI的基金投资助手，帮助您做出更理性的投资决策",
  "categories": ["finance", "productivity", "education"]
}
</file>

<file path="public/robots.txt">
User-agent: *
Allow: /
</file>

<file path="public/serviceWorker.js">
// 缓存名称及缓存文件列表
const CACHE_NAME = 'fundgene-cache-v1';
const urlsToCache = [
  './',
  './index.html',
  './favicon.svg',
  './logo192.png',
  './logo512.png',
  './assets/index.css',
  './assets/index.js'
];

// 安装Service Worker并缓存初始资源
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('已打开缓存');
        return cache.addAll(urlsToCache);
      })
  );
});

// 网络请求拦截，优先使用缓存，网络请求失败时回退到缓存
self.addEventListener('fetch', event => {
  event.respondWith(
    fetch(event.request)
      .then(response => {
        // 仅缓存成功的请求
        if (!response || response.status !== 200 || response.type !== 'basic') {
          return response;
        }
        
        // 克隆响应，因为响应是流，只能使用一次
        const responseToCache = response.clone();
        
        caches.open(CACHE_NAME)
          .then(cache => {
            // 不缓存API请求
            if (!event.request.url.includes('/api/')) {
              cache.put(event.request, responseToCache);
            }
          });
          
        return response;
      })
      .catch(() => {
        // 网络请求失败时，尝试从缓存获取
        return caches.match(event.request);
      })
  );
});

// 清理旧版本缓存
self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
</file>

<file path="src/components/alerts/Alerts.css">
/* 警报组件样式 */
.alert {
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-md);
  position: relative;
  display: flex;
}

.alert-icon {
  margin-right: var(--spacing-md);
  font-size: var(--font-size-xl);
  flex-shrink: 0;
}

.alert-content {
  flex: 1;
}

.alert-title {
  font-weight: var(--font-weight-bold);
  margin-top: 0;
  margin-bottom: var(--spacing-xs);
  font-size: var(--font-size-md);
}

.alert-message {
  margin: 0;
  line-height: var(--line-height-normal);
}

.alert-actions {
  margin-top: var(--spacing-sm);
  display: flex;
  gap: var(--spacing-sm);
}

.alert-action {
  font-size: var(--font-size-sm);
  text-decoration: underline;
  cursor: pointer;
  background: none;
  border: none;
  padding: 0;
}

.alert-close {
  position: absolute;
  top: var(--spacing-sm);
  right: var(--spacing-sm);
  background: none;
  border: none;
  cursor: pointer;
  color: inherit;
  opacity: 0.6;
  font-size: var(--font-size-md);
}

.alert-close:hover {
  opacity: 1;
}

/* 警报类型 */
.alert-info {
  background-color: rgba(59, 130, 246, 0.1);
  color: var(--info-color);
  border-left: 4px solid var(--info-color);
}




.alert-success {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--success-color);
  border-left: 4px solid var(--success-color);
}

.alert-warning {
  background-color: rgba(16, 185, 129, 0.1);
  color: var(--warning-color);
  border-left: 4px solid var(--warning-color);
}

.alert-error {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--error-color);
  border-left: 4px solid var(--error-color);
}

/* 警报变种 */
.alert-filled .alert-info {
  background-color: var(--info-color);
  color: white;
  border: none;
}

.alert-filled .alert-success {
  background-color: var(--success-color);
  color: white;
  border: none;
}

.alert-filled .alert-warning {
  background-color: var(--warning-color);
  color: white;
  border: none;
}

.alert-filled .alert-error {
  background-color: var(--error-color);
  color: white;
  border: none;
}

.alert-outlined {
  background-color: transparent;
}

.alert-outlined .alert-info {
  border: 1px solid var(--info-color);
  border-left-width: 4px;
}

.alert-outlined .alert-success {
  border: 1px solid var(--success-color);
  border-left-width: 4px;
}

.alert-outlined .alert-warning {
  border: 1px solid var(--warning-color);
  border-left-width: 4px;
}

.alert-outlined .alert-error {
  border: 1px solid var(--error-color);
  border-left-width: 4px;
}

/* 警报大小 */
.alert-sm {
  padding: var(--spacing-sm);
  font-size: var(--font-size-sm);
}

.alert-sm .alert-title {
  font-size: var(--font-size-sm);
}

.alert-sm .alert-icon {
  font-size: var(--font-size-lg);
}

.alert-lg {
  padding: var(--spacing-lg);
}

.alert-lg .alert-title {
  font-size: var(--font-size-lg);
}

.alert-lg .alert-icon {
  font-size: var(--font-size-2xl);
}

/* 警报动画 */
@keyframes alertSlideIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.alert-animated {
  animation: alertSlideIn 0.3s ease forwards;
}

/* 警报组 */
.alerts-group {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

/* Toast样式警报 */
.toast-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
  max-width: 400px;
}

.toast {
  box-shadow: var(--shadow-md);
  animation: alertSlideIn 0.3s ease forwards;
}

/* 深色模式调整 */
.dark-theme .alert-info {
  background-color: rgba(59, 130, 246, 0.2);
}

.dark-theme .alert-success {
  background-color: rgba(16, 185, 129, 0.2);
}

.dark-theme .alert-warning {
  background-color: rgba(245, 158, 11, 0.2);
}

.dark-theme .alert-error {
  background-color: rgba(239, 68, 68, 0.2);
}

.dark-theme .alert-message {
  color: var(--text-primary);
}

.dark-theme .alert-outlined {
  background-color: transparent;
}

/* 消息弹窗样式 */

.alerts-container {
  position: fixed;
  top: var(--spacing-lg);
  right: var(--spacing-lg);
  z-index: 1000;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
  max-width: 400px;
  width: calc(100% - var(--spacing-lg) * 2);
}

.alert {
  display: flex;
  align-items: flex-start;
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
  animation: alertSlideIn 0.3s ease forwards;
  overflow: hidden;
  background-color: var(--neutral-50);
  border-left: 4px solid var(--neutral-400);
}

.alert-exiting {
  animation: alertSlideOut 0.3s ease forwards;
}

.alert-icon {
  flex-shrink: 0;
  margin-right: var(--spacing-sm);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.25rem;
}

.alert-content {
  flex-grow: 1;
  margin-right: var(--spacing-sm);
}

.alert-title {
  font-weight: var(--font-weight-medium);
  margin: 0 0 var(--spacing-xs) 0;
  color: var(--text-primary);
}

.alert-message {
  color: var(--text-secondary);
  margin: 0;
  font-size: var(--font-size-sm);
}

.alert-close {
  flex-shrink: 0;
  margin-left: auto;
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-tertiary);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-xs);
  transition: color 0.2s;
  border-radius: var(--border-radius-sm);
}

.alert-close:hover {
  color: var(--text-primary);
  background-color: var(--neutral-100);
}

.alert-progress {
  position: absolute;
  bottom: 0;
  left: 0;
  height: 4px;
  background-color: rgba(0, 0, 0, 0.1);
}

/* 信息类型 */
.alert-info {
  background-color: var(--info-light);
  border-left-color: var(--info-color);
}

.alert-info .alert-icon {
  color: var(--info-color);
}

/* 成功类型 */
.alert-success {
  background-color: var(--success-light);
  border-left-color: var(--success-color);
}

.alert-success .alert-icon {
  color: var(--success-color);
}

/* 警告类型 */
.alert-warning {
  background-color: var(--warning-light);
  border-left-color: var(--warning-color);
}

.alert-warning .alert-icon {
  color: var(--warning-color);
}

/* 错误类型 */
.alert-error {
  background-color: var(--error-light);
  border-left-color: var(--error-color);
}

.alert-error .alert-icon {
  color: var(--error-color);
}

/* 动画 */
@keyframes alertSlideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes alertSlideOut {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

/* 响应式适配 */
@media (max-width: 768px) {
  .alerts-container {
    right: var(--spacing-md);
    top: var(--spacing-md);
    width: calc(100% - var(--spacing-md) * 2);
  }
  
  .alert {
    padding: var(--spacing-sm);
  }
  
  .alert-title {
    font-size: var(--font-size-sm);
  }
  
  .alert-message {
    font-size: var(--font-size-xs);
  }
}

/* 深色模式 */
.dark-theme .alert {
  background-color: var(--neutral-800);
}

.dark-theme .alert-info {
  background-color: rgba(59, 130, 246, 0.1);
}

.dark-theme .alert-success {
  background-color: rgba(34, 197, 94, 0.1);
}

.dark-theme .alert-warning {
  background-color: rgba(234, 179, 8, 0.1);
}

.dark-theme .alert-error {
  background-color: rgba(239, 68, 68, 0.1);
}

.dark-theme .alert-close:hover {
  background-color: var(--neutral-700);
}
</file>

<file path="src/components/behavior/BehaviorFeedback.jsx">
import React from 'react';
import './Behavior.css';

/**
 * 行为反馈组件
 * 提供基于用户交易行为的反馈和建议
 * @param {Object} props - 组件属性
 * @param {Object} props.feedback - 行为反馈数据
 */
const BehaviorFeedback = ({ feedback }) => {
  // 如果没有数据，显示提示信息
  if (!feedback) {
    return <div className="empty-state">暂无行为反馈数据</div>;
  }

  return (
    <div className="behavior-feedback">
      {/* 行为评分 */}
      <div className="behavior-score-section">
        <div className="score-container">
          <div className="score-circle">
            <svg viewBox="0 0 36 36">
              <path
                className="score-bg"
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
              />
              <path
                className="score-fill"
                strokeDasharray={`${feedback.overallScore}, 100`}
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
              />
              <text x="18" y="20.35" className="score-text">{feedback.overallScore}</text>
            </svg>
          </div>
          <div className="score-label">行为评分</div>
        </div>
        <div className="score-description">
          {feedback.scoreDescription}
        </div>
      </div>

      {/* 检测到的行为 */}
      <div className="detected-behaviors">
        <h3 className="subsection-title">检测到的行为</h3>
        <ul className="behavior-list">
          {feedback.detectedBehaviors.map((behavior, index) => (
            <li key={index} className={`behavior-item ${behavior.severity}`}>
              <div className="behavior-header">
                <span className="behavior-name">{behavior.name}</span>
                <span className={`behavior-severity ${behavior.severity}`}>
                  {behavior.severity === 'high' ? '严重' :
                   behavior.severity === 'medium' ? '中等' :
                   behavior.severity === 'low' ? '轻微' : behavior.severity}
                </span>
              </div>
              <p className="behavior-description">{behavior.description}</p>
            </li>
          ))}
        </ul>
      </div>

      {/* 改进建议 */}
      <div className="improvement-suggestions">
        <h3 className="subsection-title">改进建议</h3>
        <ul className="suggestion-list">
          {feedback.suggestions.map((suggestion, index) => (
            <li key={index} className="suggestion-item">
              <div className="suggestion-title">{suggestion.title}</div>
              <p className="suggestion-content">{suggestion.content}</p>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default BehaviorFeedback;
</file>

<file path="src/components/charts/BehaviorRadar.jsx">
import React from 'react';
import { 
  RadarChart, 
  PolarGrid, 
  PolarAngleAxis, 
  PolarRadiusAxis, 
  Radar, 
  ResponsiveContainer 
} from 'recharts';

/**
 * 行为雷达图组件
 * 用于可视化展示用户在不同行为维度上的表现
 * @param {Object} props - 组件属性
 * @param {Array} props.data - 雷达图数据
 */
const BehaviorRadar = ({ data }) => {
  // 处理图表域值，确保从0开始
  const chartDomain = [0, 100];

  // 检查是否安装了recharts
  if (typeof RadarChart === 'undefined') {
    return (
      <div 
        style={{ 
          height: '100%', 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center',
          backgroundColor: 'var(--neutral-50)',
          borderRadius: 'var(--border-radius-md)',
          padding: 'var(--spacing-md)',
          flexDirection: 'column'
        }}
      >
        <h3>行为特征雷达图</h3>
        <p>请安装recharts库以显示图表: npm install recharts</p>
      </div>
    );
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <RadarChart cx="50%" cy="50%" outerRadius="80%" data={data}>
        <PolarGrid />
        <PolarAngleAxis dataKey="subject" />
        <PolarRadiusAxis domain={chartDomain} />
        <Radar
          name="行为特征"
          dataKey="score"
          stroke="var(--primary-color)"
          fill="var(--primary-color)"
          fillOpacity={0.2}
        />
      </RadarChart>
    </ResponsiveContainer>
  );
};

export default BehaviorRadar;
</file>

<file path="src/components/charts/ChartStyles.css">
/* 图表样式 */

/* 图表容器 */
.chart-container {
  width: 100%;
  height: 100%;
  min-height: 300px;
  display: flex;
  flex-direction: column;
  background-color: var(--card-bg);
  border-radius: var(--border-radius-md);
  overflow: hidden;
  box-shadow: var(--card-shadow);
}

/* 图表头部 */
.chart-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--spacing-md) var(--spacing-lg);
  border-bottom: 1px solid var(--neutral-200);
}

.chart-title {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-medium);
  color: var(--text-heading);
  margin: 0;
}

.chart-subtitle {
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  margin: var(--spacing-xs) 0 0 0;
}

.chart-actions {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

/* 图表主体 */
.chart-body {
  flex: 1;
  padding: var(--spacing-md);
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* 图表底部 */
.chart-footer {
  padding: var(--spacing-sm) var(--spacing-lg);
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-top: 1px solid var(--neutral-200);
}

.chart-legend {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  flex-wrap: wrap;
}

.chart-legend-item {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
}

.chart-legend-color {
  width: 12px;
  height: 12px;
  border-radius: 2px;
}

/* 图表加载和空状态 */
.chart-loading {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.7);
  z-index: 1;
}

.chart-empty {
  padding: var(--spacing-xl);
  text-align: center;
  color: var(--text-tertiary);
}

.chart-empty-icon {
  font-size: 2.5rem;
  margin-bottom: var(--spacing-md);
  opacity: 0.5;
}

.chart-empty-text {
  font-size: var(--font-size-md);
}

/* 图表工具提示 */
.chart-tooltip {
  background-color: var(--tooltip-bg);
  color: var(--tooltip-text);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--border-radius-sm);
  box-shadow: var(--tooltip-shadow);
  pointer-events: none;
  z-index: 10;
  max-width: 300px;
}

.chart-tooltip-title {
  font-weight: var(--font-weight-medium);
  margin-bottom: var(--spacing-xs);
  border-bottom: 1px solid var(--neutral-200);
  padding-bottom: var(--spacing-xs);
}

.chart-tooltip-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-xs);
}

.chart-tooltip-label {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
}

.chart-tooltip-color {
  width: 8px;
  height: 8px;
  border-radius: 2px;
}

.chart-tooltip-value {
  font-weight: var(--font-weight-medium);
}

/* 响应式图表 */
@media (max-width: 768px) {
  .chart-container {
    min-height: 250px;
  }
  
  .chart-header {
    padding: var(--spacing-sm) var(--spacing-md);
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-xs);
  }
  
  .chart-actions {
    width: 100%;
    justify-content: flex-end;
    margin-top: var(--spacing-xs);
  }
  
  .chart-body {
    padding: var(--spacing-sm);
  }
  
  .chart-footer {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-sm);
  }
}

/* 深色模式适配 */
.dark-theme .chart-container {
  background-color: var(--card-bg);
}

.dark-theme .chart-header,
.dark-theme .chart-footer {
  border-color: var(--neutral-700);
}

.dark-theme .chart-loading {
  background-color: rgba(18, 18, 18, 0.7);
}

.dark-theme .chart-tooltip {
  background-color: var(--tooltip-bg);
  color: var(--tooltip-text);
}

.dark-theme .chart-tooltip-title {
  border-color: var(--neutral-700);
}

/* Recharts 组件重写样式 */
.recharts-default-tooltip {
  background-color: rgba(255, 255, 255, 0.9) !important;
  border: 1px solid var(--neutral-200) !important;
  border-radius: var(--border-radius-md) !important;
  padding: var(--spacing-sm) var(--spacing-md) !important;
  box-shadow: var(--shadow-sm) !important;
}

.recharts-tooltip-label {
  font-size: var(--font-size-sm) !important;
  font-weight: var(--font-weight-medium) !important;
  color: var(--text-primary) !important;
  margin-bottom: var(--spacing-xs) !important;
}

.recharts-tooltip-item {
  font-size: var(--font-size-xs) !important;
  color: var(--text-secondary) !important;
}

.recharts-tooltip-item-name {
  font-weight: var(--font-weight-normal) !important;
}

.recharts-tooltip-item-value {
  font-weight: var(--font-weight-bold) !important;
}

.recharts-cartesian-axis-tick-value {
  font-size: var(--font-size-xs) !important;
  fill: var(--text-tertiary) !important;
}

.recharts-label {
  font-size: var(--font-size-sm) !important;
  fill: var(--text-secondary) !important;
}

.recharts-text {
  font-size: var(--font-size-xs) !important;
  fill: var(--text-tertiary) !important;
}

.recharts-legend-item-text {
  font-size: var(--font-size-sm) !important;
  color: var(--text-secondary) !important;
}

/* 饼图样式 */
.pie-chart-container {
  position: relative;
}

.pie-label {
  font-size: var(--font-size-xs);
  fill: var(--text-primary);
}

.pie-value {
  font-size: var(--font-size-xs);
  fill: var(--text-secondary);
}

.pie-center-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.center-value {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
}

.center-label {
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
}

/* 线图样式 */
.line-chart-container {
  margin-bottom: var(--spacing-md);
}

/* 柱状图样式 */
.bar-chart-container {
  margin-bottom: var(--spacing-md);
}

/* 雷达图样式 */
.radar-chart-container {
  margin-bottom: var(--spacing-md);
}

.radar-tick-text {
  font-size: var(--font-size-xs);
  fill: var(--text-tertiary);
}

/* 加载和错误状态 */
.chart-loading,
.chart-error {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 300px;
  color: var(--text-tertiary);
  font-size: var(--font-size-md);
}

.chart-error {
  color: var(--error-color);
}

/* 没有数据状态 */
.no-data {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 300px;
  color: var(--text-tertiary);
}

.no-data-icon {
  font-size: var(--font-size-2xl);
  margin-bottom: var(--spacing-sm);
}

.no-data-text {
  font-size: var(--font-size-md);
  text-align: center;
  max-width: 80%;
}

/* 自定义工具提示 */
.custom-tooltip {
  background-color: rgba(255, 255, 255, 0.95);
  border: 1px solid var(--neutral-200);
  border-radius: var(--border-radius-md);
  padding: var(--spacing-sm) var(--spacing-md);
  box-shadow: var(--shadow-sm);
}

.tooltip-title {
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: var(--spacing-xs);
  border-bottom: 1px solid var(--neutral-200);
  padding-bottom: var(--spacing-xs);
}

.tooltip-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: var(--spacing-xs);
  font-size: var(--font-size-xs);
}

.tooltip-label {
  margin-right: var(--spacing-md);
  color: var(--text-secondary);
}

.tooltip-value {
  font-weight: var(--font-weight-medium);
  color: var(--text-primary);
}

.tooltip-value.positive {
  color: var(--success-color);
}

.tooltip-value.negative {
  color: var(--error-color);
}

/* 深色模式调整 */
.dark-theme .recharts-default-tooltip {
  background-color: rgba(31, 41, 55, 0.9) !important;
  border-color: var(--neutral-400) !important;
}

.dark-theme .recharts-tooltip-label {
  color: var(--text-heading) !important;
}

.dark-theme .recharts-tooltip-item {
  color: var(--text-primary) !important;
}

.dark-theme .recharts-cartesian-axis-tick-value {
  fill: var(--text-meta) !important;
}

.dark-theme .recharts-label {
  fill: var(--text-secondary) !important;
}

.dark-theme .recharts-text {
  fill: var(--text-meta) !important;
}

.dark-theme .recharts-legend-item-text {
  color: var(--text-secondary) !important;
}

.dark-theme .pie-label {
  fill: var(--text-primary);
}

.dark-theme .pie-value {
  fill: var(--text-meta);
}

.dark-theme .custom-tooltip {
  background-color: rgba(31, 41, 55, 0.95);
  border-color: var(--neutral-400);
}

.dark-theme .tooltip-title {
  color: var(--text-heading);
  border-bottom-color: var(--neutral-400);
}

.dark-theme .tooltip-label {
  color: var(--text-meta);
}

.dark-theme .tooltip-value {
  color: var(--text-primary);
}

.dark-theme .chart-loading,
.dark-theme .no-data {
  color: var(--text-meta);
}
</file>

<file path="src/components/charts/ComparisonChart.jsx">
import React from 'react';

// 这是一个图表占位符组件，在实际应用中应使用Recharts库实现
const ComparisonChart = ({ data, title, userLineLabel, aiLineLabel, benchmarkLabel }) => {
  return (
    <div className="chart-placeholder" style={{ height: '300px', backgroundColor: 'var(--neutral-50)', borderRadius: 'var(--border-radius-md)', padding: '1rem', display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>
      <h3>{title}</h3>
      <p>图表将显示以下数据对比:</p>
      <ul>
        <li>{userLineLabel}</li>
        <li>{aiLineLabel}</li>
        <li>{benchmarkLabel}</li>
      </ul>
      <p>请安装recharts库以显示完整图表: npm install recharts</p>
    </div>
  );
};

export default ComparisonChart;
</file>

<file path="src/components/charts/PortfolioChart.jsx">
import React, { useEffect, useRef } from 'react';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';

// 颜色常量
const COLORS = ['#2563eb', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444', '#06b6d4'];

// 自定义图例
const renderLegend = (props) => {
  const { payload } = props;
  
  return (
    <ul className="portfolio-chart-legend">
      {payload.map((entry, index) => (
        <li key={`item-${index}`} className="legend-item">
          <span className="legend-color" style={{ backgroundColor: entry.color }}></span>
          <span className="legend-label">{entry.value}</span>
          <span className="legend-value">{entry.payload.percent.toFixed(1)}%</span>
        </li>
      ))}
    </ul>
  );
};

// 自定义提示框
const CustomTooltip = ({ active, payload }) => {
  if (active && payload && payload.length) {
    const data = payload[0].payload;
    return (
      <div className="portfolio-chart-tooltip">
        <p className="tooltip-name">{data.name}</p>
        <p className="tooltip-value">{`¥${data.value.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}`}</p>
        <p className="tooltip-percent">{`${data.percent.toFixed(1)}%`}</p>
      </div>
    );
  }
  return null;
};

const PortfolioChart = ({ data }) => {
  const containerRef = useRef(null);

  useEffect(() => {
    // 添加并移除样式
    const style = document.createElement('style');
    style.textContent = `
      .portfolio-chart-legend {
        list-style: none;
        padding: 0;
        margin: 0;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 8px;
      }
      
      .legend-item {
        display: flex;
        align-items: center;
        font-size: 12px;
      }
      
      .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
      }
      
      .legend-label {
        color: var(--text-secondary);
        margin-right: 8px;
      }
      
      .legend-value {
        font-weight: 600;
        color: var(--text-primary);
      }
      
      .portfolio-chart-tooltip {
        background-color: white;
        border: 1px solid var(--neutral-200);
        border-radius: var(--border-radius-md);
        padding: 8px 12px;
        box-shadow: var(--shadow-md);
      }
      
      .tooltip-name {
        font-weight: 600;
        margin: 0 0 4px;
      }
      
      .tooltip-value, .tooltip-percent {
        margin: 0;
        font-size: 12px;
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  // 如果没有安装recharts，显示占位符
  if (typeof PieChart === 'undefined') {
    return (
      <div className="chart-placeholder" style={{ height: '100%', backgroundColor: 'var(--neutral-50)', borderRadius: 'var(--border-radius-md)', padding: '1rem', display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>
        <h3>资产配置图表</h3>
        <p>请安装recharts库以显示完整图表: npm install recharts</p>
      </div>
    );
  }

  return (
    <div ref={containerRef} style={{ width: '100%', height: '100%' }}>
      <ResponsiveContainer width="100%" height="100%">
        <PieChart>
          <Pie
            data={data}
            cx="50%"
            cy="50%"
            labelLine={false}
            outerRadius={80}
            fill="#8884d8"
            dataKey="value"
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip content={<CustomTooltip />} />
          <Legend content={renderLegend} />
        </PieChart>
      </ResponsiveContainer>
    </div>
  );
};

export default PortfolioChart;
</file>

<file path="src/components/common/Card.jsx">
import React from 'react';
import classNames from 'classnames';
import './Card.css';

/**
 * 通用卡片组件
 * 用于包装内容的容器，支持不同的大小、阴影和边框样式
 * 
 * @param {Object} props - 组件属性
 * @param {React.ReactNode} props.children - 卡片内容
 * @param {string} props.className - 自定义类名
 * @param {string} props.title - 卡片标题
 * @param {string} props.subtitle - 卡片副标题
 * @param {React.ReactNode} props.extra - 卡片右上角额外内容
 * @param {React.ReactNode} props.footer - 卡片底部内容
 * @param {boolean} props.bordered - 是否显示边框
 * @param {'none'|'sm'|'md'|'lg'} props.shadow - 阴影大小
 * @param {'none'|'sm'|'md'|'lg'|'xl'} props.padding - 内边距大小
 * @param {boolean} props.hoverable - 是否在悬停时显示阴影效果
 * @param {'success'|'error'|'warning'|'info'} props.status - 卡片状态，添加对应颜色指示器
 * @param {boolean} props.highlighted - 是否高亮显示（左侧边框）
 * @param {boolean} props.noContent - 是否不添加内容容器
 */
const Card = ({ 
  children,
  className,
  title,
  subtitle,
  extra,
  footer,
  bordered = false,
  shadow = 'sm',
  padding = 'md',
  hoverable = false,
  status,
  highlighted = false,
  noContent = false,
  ...props 
}) => {
  const cardClasses = classNames(
    'card',
    {
      'card-bordered': bordered,
      'card-hoverable': hoverable,
      [`card-shadow-${shadow}`]: shadow && shadow !== 'sm',
      [`card-padding-${padding}`]: padding && padding !== 'md',
      'card-highlighted': highlighted,
      [`card-${status}`]: status,
    },
    className
  );

  return (
    <div className={cardClasses} {...props}>
      {(title || extra) && (
        <div className="card-header">
          <div>
            {title && <div className="card-title">{title}</div>}
            {subtitle && <div className="card-subtitle">{subtitle}</div>}
          </div>
          {extra && <div className="card-extra">{extra}</div>}
        </div>
      )}
      
      {!noContent && (
        <div className="card-content">
          {children}
        </div>
      )}
      
      {noContent && children}
      
      {footer && (
        <div className="card-footer">
          {footer}
        </div>
      )}
    </div>
  );
};

/**
 * 卡片列表项组件
 */
export const CardListItem = ({ className, children, ...props }) => (
  <div className={classNames('card-list-item', className)} {...props}>
    {children}
  </div>
);

/**
 * 卡片分隔线组件
 */
export const CardDivider = ({ className, ...props }) => (
  <div className={classNames('card-divider', className)} {...props} />
);

/**
 * 卡片网格容器组件
 */
export const CardGrid = ({ 
  className, 
  children, 
  columns = 1,
  ...props 
}) => (
  <div 
    className={classNames(
      'card-grid', 
      columns > 1 && `card-grid-cols-${Math.min(columns, 3)}`,
      className
    )} 
    {...props}
  >
    {children}
  </div>
);

/**
 * 卡片统计数字组件
 */
export const CardStat = ({ 
  className,
  value,
  label,
  ...props 
}) => (
  <div className={classNames('card-stat', className)} {...props}>
    <div className="card-stat-value">{value}</div>
    {label && <div className="card-stat-label">{label}</div>}
  </div>
);

export default Card;
</file>

<file path="src/components/common/Text.jsx">
import React from 'react';
import classNames from 'classnames';

/**
 * 通用文本组件
 * 提供一致的文本样式处理，支持各种文本变体和修饰
 * 
 * @param {Object} props - 组件属性
 * @param {React.ReactNode} props.children - 文本内容
 * @param {string} props.className - 自定义类名
 * @param {'primary'|'secondary'|'tertiary'|'description'|'meta'|'hint'|'link'|'heading'|'tag'|'success'|'error'|'warning'|'info'} props.variant - 文本变体
 * @param {'xs'|'sm'|'md'|'lg'|'xl'|'2xl'|'3xl'|'4xl'} props.size - 文本大小
 * @param {'normal'|'medium'|'bold'|'extrabold'} props.weight - 文本粗细
 * @param {'left'|'center'|'right'|'justify'} props.align - 文本对齐
 * @param {'tight'|'normal'|'relaxed'} props.leading - 行高
 * @param {'tight'|'normal'|'wide'} props.tracking - 字间距
 * @param {boolean} props.italic - 是否斜体
 * @param {boolean} props.underline - 是否下划线
 * @param {boolean} props.lineThrough - 是否删除线
 * @param {boolean} props.uppercase - 是否大写
 * @param {boolean} props.lowercase - 是否小写
 * @param {boolean} props.capitalize - 是否首字母大写
 * @param {boolean} props.truncate - 是否截断文本
 * @param {number} props.clamp - 限制行数(2或3)，超出显示省略号
 * @param {string} props.as - 要渲染的HTML元素，默认为span
 */
const Text = ({
  children,
  className,
  variant,
  size,
  weight,
  align,
  leading,
  tracking,
  italic = false,
  underline = false,
  lineThrough = false,
  uppercase = false,
  lowercase = false,
  capitalize = false,
  truncate = false,
  clamp,
  as: Component = 'span',
  ...props
}) => {
  const textClasses = classNames(
    // 基础类
    'text-base',
    
    // 变体
    variant && `text-${variant}`,
    
    // 大小
    size && `text-${size}`,
    
    // 粗细
    weight && `text-${weight}`,
    
    // 对齐
    align && `text-${align}`,
    
    // 行高
    leading && `text-leading-${leading}`,
    
    // 字间距
    tracking && `text-tracking-${tracking}`,
    
    // 修饰
    italic && 'text-italic',
    underline && 'text-underline',
    lineThrough && 'text-line-through',
    uppercase && 'text-uppercase',
    lowercase && 'text-lowercase',
    capitalize && 'text-capitalize',
    
    // 截断
    truncate && 'text-truncate',
    clamp && `text-clamp-${clamp}`,
    
    // 自定义类
    className
  );

  return (
    <Component className={textClasses} {...props}>
      {children}
    </Component>
  );
};

/**
 * 标题组件 - 统一页面各级标题样式
 * 
 * @param {Object} props - 组件属性
 * @param {React.ReactNode} props.children - 标题内容
 * @param {1|2|3|4|5|6} props.level - 标题级别，对应h1-h6
 * @param {'hero'|'page'|'section'|'card'|'group'} props.type - 标题类型
 */
export const Heading = ({
  children,
  level = 2,
  type,
  className,
  ...props
}) => {
  const Component = `h${level}`;
  
  const titleClass = type ? `title-${type}` : null;
  
  const headingClasses = classNames(
    titleClass,
    className
  );
  
  return (
    <Component 
      className={headingClasses}
      {...props}
    >
      {children}
    </Component>
  );
};

/**
 * 段落组件 - 统一段落文本样式
 * 
 * @param {Object} props - 组件属性
 * @param {React.ReactNode} props.children - 段落内容
 * @param {'default'|'secondary'|'small'} props.type - 段落类型
 */
export const Paragraph = ({
  children,
  type = 'default',
  className,
  ...props
}) => {
  const paragraphClass = type === 'default' 
    ? 'paragraph' 
    : type === 'secondary' 
      ? 'paragraph-secondary' 
      : type === 'small' 
        ? 'paragraph-small' 
        : null;
  
  const paragraphClasses = classNames(
    paragraphClass,
    className
  );
  
  return (
    <p 
      className={paragraphClasses}
      {...props}
    >
      {children}
    </p>
  );
};

/**
 * 描述文本组件 - 用于页面和区域描述
 */
export const Description = ({ children, className, ...props }) => (
  <p className={classNames('description', className)} {...props}>
    {children}
  </p>
);

/**
 * 标签文本组件 - 用于显示标签、徽章等小型文本
 */
export const Tag = ({ children, className, ...props }) => (
  <span className={classNames('text-tag', className)} {...props}>
    {children}
  </span>
);

/**
 * 标注文本组件 - 用于显示说明、注释等辅助文本
 */
export const Caption = ({ children, className, ...props }) => (
  <span className={classNames('text-caption', className)} {...props}>
    {children}
  </span>
);

/**
 * 强调文本组件 - 用于突出显示重要文本
 */
export const Emphasis = ({ children, className, ...props }) => (
  <em className={classNames('text-emphasis', className)} {...props}>
    {children}
  </em>
);

/**
 * 状态文本组件 - 用于显示状态相关的文本
 */
export const StatusText = ({ 
  children, 
  status = 'info', 
  className, 
  ...props 
}) => (
  <span 
    className={classNames(`text-state-${status}`, className)} 
    {...props}
  >
    {children}
  </span>
);

export default Text;
</file>

<file path="src/components/layout/Footer.jsx">
import React from 'react';
import './Footer.css';

const Footer = () => {
  return (
    <footer className="footer">
      <div className="footer-container">
        <p>&copy; {new Date().getFullYear()} FundGene. 保留所有权利</p>
      </div>
    </footer>
  );
};

export default Footer;
</file>

<file path="src/components/modals/Modal.css">
/* 模态框样式 */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  backdrop-filter: blur(2px);
}

.modal-container {
  background-color: white;
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-lg);
  max-width: 90%;
  width: 500px;
  max-height: 90vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  animation: modalFadeIn 0.3s;
}

@keyframes modalFadeIn {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.modal-header {
  padding: var(--spacing-md) var(--spacing-lg);
  border-bottom: 1px solid var(--neutral-200);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-title {
  margin: 0;
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
}

.modal-close {
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-tertiary);
  font-size: var(--font-size-xl);
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  transition: background-color 0.2s;
}

.modal-close:hover {
  background-color: var(--neutral-100);
  color: var(--text-primary);
}

.modal-body {
  padding: var(--spacing-lg);
  overflow-y: auto;
  color: var(--text-secondary);
  line-height: var(--line-height-relaxed);
}

.modal-footer {
  padding: var(--spacing-md) var(--spacing-lg);
  border-top: 1px solid var(--neutral-200);
  display: flex;
  justify-content: flex-end;
  gap: var(--spacing-md);
}

/* 模态框尺寸 */
.modal-sm {
  width: 400px;
}

.modal-md {
  width: 600px;
}

.modal-lg {
  width: 800px;
}

.modal-xl {
  width: 1000px;
}

.modal-fullscreen {
  width: 90%;
  height: 90vh;
}

/* 确认对话框样式 */
.confirm-modal .modal-body {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  font-size: var(--font-size-md);
}

.confirm-icon {
  font-size: var(--font-size-2xl);
  flex-shrink: 0;
}

.confirm-icon.info {
  color: var(--info-color);
}

.confirm-icon.warning {
  color: var(--warning-color);
}

.confirm-icon.error {
  color: var(--error-color);
}

.confirm-content {
  flex: 1;
}

.confirm-message {
  margin: 0;
  color: var(--text-primary);
  font-weight: var(--font-weight-medium);
  margin-bottom: var(--spacing-xs);
}

.confirm-description {
  margin: 0;
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
}

/* 按钮样式 */
.modal-button {
  padding: var(--spacing-sm) var(--spacing-lg);
  border-radius: var(--border-radius-md);
  border: none;
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: background-color 0.2s, color 0.2s;
}

.modal-button-primary {
  background-color: var(--primary-color);
  color: white;
}

.modal-button-primary:hover {
  background-color: var(--primary-dark);
}

.modal-button-secondary {
  background-color: var(--neutral-100);
  color: var(--text-primary);
}

.modal-button-secondary:hover {
  background-color: var(--neutral-200);
}

.modal-button-danger {
  background-color: var(--error-color);
  color: white;
}

.modal-button-danger:hover {
  background-color: #dc2626; /* 稍深的红色 */
}

/* 加载状态 */
.modal-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-xl);
  color: var(--text-secondary);
  font-size: var(--font-size-md);
}

/* 深色模式调整 */
.dark-theme .modal-container {
  background-color: var(--neutral-800);
  border: 1px solid var(--neutral-600);
}

.dark-theme .modal-header,
.dark-theme .modal-footer {
  border-color: var(--neutral-600);
}

.dark-theme .modal-title {
  color: var(--text-heading);
}

.dark-theme .modal-close {
  color: var(--text-meta);
}

.dark-theme .modal-close:hover {
  background-color: var(--neutral-700);
  color: var(--text-primary);
}

.dark-theme .modal-button-secondary {
  background-color: var(--neutral-700);
  color: var(--text-primary);
}

.dark-theme .modal-button-secondary:hover {
  background-color: var(--neutral-600);
}

.dark-theme .confirm-message {
  color: var(--text-heading);
}

.dark-theme .confirm-description {
  color: var(--text-description);
}

/* 响应式调整 */
@media (max-width: 576px) {
  .modal-container {
    width: 95% !important;
    max-height: 95vh;
  }
  
  .modal-header {
    padding: var(--spacing-sm) var(--spacing-md);
  }
  
  .modal-body {
    padding: var(--spacing-md);
  }
  
  .modal-footer {
    padding: var(--spacing-sm) var(--spacing-md);
    flex-wrap: wrap;
  }
  
  .modal-button {
    flex: 1;
    white-space: nowrap;
    padding: var(--spacing-xs) var(--spacing-sm);
  }
}
</file>

<file path="src/components/rebalance/AllocationComparisonChart.jsx">
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import PropTypes from 'prop-types';

/**
 * 资产配置对比图表组件
 * 使用条形图对比当前资产配置与目标配置
 * @param {Object} props - 组件属性
 * @param {Array} props.data - 资产配置数据
 */
const AllocationComparisonChart = ({ data }) => {
  if (!data || data.length === 0) {
    return <div className="empty-chart">暂无配置数据</div>;
  }

  // 自定义工具提示
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <div className="custom-tooltip">
          <p className="tooltip-label">{`${label}`}</p>
          <p className="tooltip-current">{`当前配置: ${payload[0].value.toFixed(1)}%`}</p>
          <p className="tooltip-target">{`目标配置: ${payload[1].value.toFixed(1)}%`}</p>
          <p className="tooltip-diff">{`差异: ${(payload[0].value - payload[1].value).toFixed(1)}%`}</p>
        </div>
      );
    }
  
    return null;
  };

  return (
    <ResponsiveContainer width="100%" height={300}>
      <BarChart
        data={data}
        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
      >
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="category" />
        <YAxis label={{ value: '配置比例 (%)', angle: -90, position: 'insideLeft' }} />
        <Tooltip content={<CustomTooltip />} />
        <Legend />
        <Bar dataKey="current" name="当前配置" fill="#3b82f6" />
        <Bar dataKey="target" name="目标配置" fill="#10b981" />
      </BarChart>
    </ResponsiveContainer>
  );
};

// 添加PropTypes验证
AllocationComparisonChart.propTypes = {
  data: PropTypes.arrayOf(
    PropTypes.shape({
      category: PropTypes.string.isRequired,
      current: PropTypes.number.isRequired,
      target: PropTypes.number.isRequired
    })
  )
};

export default AllocationComparisonChart;
</file>

<file path="src/components/rebalance/Rebalance.css">
/* 投资组合再平衡样式 */
.portfolio-rebalance {
  margin-bottom: var(--spacing-xl);
}

.subsection-title {
  font-size: var(--font-size-md);
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

.rebalance-rationale {
  margin-bottom: var(--spacing-xl);
}

.rationale-text {
  line-height: var(--line-height-relaxed);
  color: var(--text-secondary);
  background-color: var(--neutral-50);
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  border-left: 4px solid var(--primary-color);
}

/* 资产配置对比部分 */
.allocation-comparison-section {
  margin-bottom: var(--spacing-xl);
}

.chart-container {
  margin-bottom: var(--spacing-lg);
  background-color: white;
  border-radius: var(--border-radius-md);
  padding: var(--spacing-md);
  box-shadow: var(--shadow-sm);
}

.allocation-table-container {
  overflow-x: auto;
}

.allocation-table {
  width: 100%;
  border-collapse: collapse;
}

.allocation-table th,
.allocation-table td {
  padding: var(--spacing-sm);
  text-align: left;
  border-bottom: 1px solid var(--neutral-200);
}

.allocation-table th {
  font-weight: var(--font-weight-bold);
  color: var(--text-secondary);
  background-color: var(--neutral-50);
}

.significant-diff {
  font-weight: var(--font-weight-bold);
  color: var(--error-color);
}

.action-direction {
  display: inline-block;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  color: white;
}

.action-direction.increase {
  background-color: var(--success-color);
}

.action-direction.reduce {
  background-color: var(--error-color);
}

.action-direction.maintain {
  background-color: var(--neutral-500);
}

/* 具体调整建议部分 */
.specific-recommendations-section {
  margin-bottom: var(--spacing-xl);
}

.recommendations-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: var(--spacing-lg);
}

.recommendation-card {
  background-color: white;
  border-radius: var(--border-radius-md);
  padding: var(--spacing-md);
  box-shadow: var(--shadow-sm);
  border-top: 4px solid var(--neutral-300);
}

.recommendation-card.increase {
  border-top-color: var(--success-color);
}

.recommendation-card.reduce {
  border-top-color: var(--error-color);
}

.recommendation-card.maintain {
  border-top-color: var(--neutral-500);
}

.recommendation-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.fund-name {
  font-weight: var(--font-weight-bold);
  display: block;
  margin-bottom: var(--spacing-xs);
}

.fund-code {
  /* 改用TextStyles类 */
  /* 推荐在使用时添加 text-xs text-tertiary 类 */
}

.action-badge {
  display: inline-block;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  color: white;
}

.action-badge.increase {
  background-color: var(--success-color);
}

.action-badge.reduce {
  background-color: var(--error-color);
}

.action-badge.maintain {
  background-color: var(--neutral-500);
}

.recommendation-values {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-md);
  background-color: var(--neutral-50);
  padding: var(--spacing-sm);
  border-radius: var(--border-radius-md);
}

.value-item {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.value-label {
  /* 改用TextStyles类 */
  /* 推荐在使用时添加 text-xs text-tertiary 类 */
  margin-bottom: var(--spacing-xs);
}

.value-number {
  font-weight: var(--font-weight-bold);
}

.value-arrow {
  color: var(--text-tertiary);
  font-size: var(--font-size-lg);
}

.recommendation-amount {
  background-color: var(--neutral-100);
  padding: var(--spacing-sm);
  border-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-md);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.amount-label {
  /* 改用TextStyles类 */
  /* 推荐在使用时添加 text-sm text-secondary 类 */
}

.amount-value {
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
}

.recommendation-reason {
  /* 改用TextStyles类 */
  /* 推荐在使用时添加 text-sm text-secondary 类 */
  line-height: var(--line-height-normal);
}

.reason-label {
  font-weight: var(--font-weight-medium);
  color: var(--text-primary);
}

/* 预期影响部分 */
.expected-impact-section {
  margin-bottom: var(--spacing-xl);
}

.impact-cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: var(--spacing-md);
}

.impact-card {
  display: flex;
  background-color: white;
  border-radius: var(--border-radius-md);
  padding: var(--spacing-md);
  box-shadow: var(--shadow-sm);
}

.impact-icon {
  font-size: var(--font-size-2xl);
  margin-right: var(--spacing-md);
}

.impact-title {
  font-size: var(--font-size-md);
  margin-top: 0;
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
}

.impact-text {
  margin: 0;
  color: var(--text-secondary);
  /* 改用TextStyles类 */
  /* 推荐在使用时添加 text-sm 类 */
  line-height: var(--line-height-normal);
}

/* 操作按钮部分 */
.rebalance-actions {
  display: flex;
  gap: var(--spacing-md);
}

.action-button {
  padding: var(--spacing-sm) var(--spacing-lg);
  border: none;
  border-radius: var(--border-radius-md);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: var(--transition-default);
}

.action-button.primary {
  background-color: var(--primary-color);
  color: white;
}

.action-button.primary:hover {
  background-color: var(--primary-dark);
}

.action-button.secondary {
  background-color: var(--neutral-100);
  color: var(--text-primary);
}

.action-button.secondary:hover {
  background-color: var(--neutral-200);
}

/* 自定义工具提示样式 */
.custom-tooltip {
  background-color: rgba(255, 255, 255, 0.9);
  border: 1px solid var(--neutral-200);
  border-radius: var(--border-radius-md);
  padding: var(--spacing-sm);
  box-shadow: var(--shadow-sm);
}

.tooltip-label {
  margin: 0 0 var(--spacing-xs) 0;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
}

.tooltip-current,
.tooltip-target,
.tooltip-diff {
  margin: var(--spacing-xs) 0;
  /* 改用TextStyles类 */
  /* 推荐在使用时添加 text-sm 类 */
}

/* 空状态 */
.empty-state,
.empty-chart {
  text-align: center;
  padding: var(--spacing-xl);
  color: var(--text-tertiary);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .recommendations-list {
    grid-template-columns: 1fr;
  }
  
  .impact-cards {
    grid-template-columns: 1fr;
  }
  
  .rebalance-actions {
    flex-direction: column;
  }
}
</file>

<file path="src/components/trading/PortfolioOverview.jsx">
import React from 'react';
import './Trading.css';
import { formatNumber } from '../../utils/formatters';

const PortfolioOverview = ({ portfolio }) => {
  if (!portfolio) {
    return <div className="empty-state">无投资组合数据</div>;
  }
  
  return (
    <div className="portfolio-overview">
      <h3 className="subsection-title">投资组合概览</h3>
      
      <div className="portfolio-stats">
        <div className="stat-item">
          <span className="stat-label text-sm text-tertiary">总资产</span>
          <div className="stat-value">
            ¥{formatNumber(portfolio.totalAssets, 2)}
          </div>
        </div>
        
        <div className="stat-item">
          <span className="stat-label text-sm text-tertiary">基金资产</span>
          <div className="stat-value">
            ¥{formatNumber(portfolio.fundAssets, 2)}
            <span className="stat-secondary text-sm">
              ({(portfolio.fundAssets / portfolio.totalAssets * 100).toFixed(2)}%)
            </span>
          </div>
        </div>
        
        <div className="stat-item">
          <span className="stat-label text-sm text-tertiary">现金资产</span>
          <div className="stat-value">
            ¥{formatNumber(portfolio.availableCash, 2)}
            <span className="stat-secondary text-sm">
              ({(portfolio.availableCash / portfolio.totalAssets * 100).toFixed(2)}%)
            </span>
          </div>
        </div>
        
        <div className="stat-item">
          <span className="stat-label text-sm text-tertiary">总盈亏</span>
          <div className={`stat-value ${portfolio.totalProfit >= 0 ? 'positive' : 'negative'}`}>
            {portfolio.totalProfit >= 0 ? '+' : ''}
            ¥{formatNumber(portfolio.totalProfit, 2)}
            <span className="stat-secondary text-sm">
              ({portfolio.totalProfitPercent >= 0 ? '+' : ''}
              {(portfolio.totalProfitPercent * 100).toFixed(2)}%)
            </span>
          </div>
        </div>
      </div>
      
      <h3 className="subsection-title">持仓明细</h3>
      
      {portfolio.holdings.length === 0 ? (
        <div className="empty-state">暂无持仓</div>
      ) : (
        <div className="holdings-table-container">
          <table className="holdings-table">
            <thead>
              <tr>
                <th>基金</th>
                <th>份额</th>
                <th>最新净值</th>
                <th>持仓市值</th>
                <th>成本</th>
                <th>盈亏</th>
                <th>占比</th>
              </tr>
            </thead>
            <tbody>
              {portfolio.holdings.map(holding => (
                <tr key={holding.code}>
                  <td>
                    <div className="fund-name">{holding.name}</div>
                    <div className="fund-code text-xs text-tertiary">{holding.code}</div>
                  </td>
                  <td>{formatNumber(holding.shares, 2)}</td>
                  <td>{formatNumber(holding.nav, 4)}</td>
                  <td>¥{formatNumber(holding.marketValue, 2)}</td>
                  <td>¥{formatNumber(holding.cost, 2)}</td>
                  <td className={holding.profit >= 0 ? 'positive' : 'negative'}>
                    {holding.profit >= 0 ? '+' : ''}¥{formatNumber(holding.profit, 2)}
                    <span className="profit-value text-xs">
                      ({holding.profitPercent >= 0 ? '+' : ''}
                      {(holding.profitPercent * 100).toFixed(2)}%)
                    </span>
                  </td>
                  <td>{(holding.marketValue / portfolio.totalAssets * 100).toFixed(2)}%</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default PortfolioOverview;
</file>

<file path="src/components/trading/PortfolioSummary.jsx">
import React from 'react';
import PropTypes from 'prop-types';
import './Trading.css';

/**
 * 投资组合概览组件
 * 显示用户当前持仓和资产价值
 * @param {Object} props - 组件属性
 * @param {Object} props.portfolio - 投资组合数据
 */
const PortfolioSummary = ({ portfolio }) => {
  // 如果没有数据，显示提示信息
  if (!portfolio) {
    return <div className="empty-state">暂无投资组合数据</div>;
  }

  return (
    <div className="portfolio-summary">
      {/* 资产概览 */}
      <div className="portfolio-stats">
        <div className="stat-item">
          <span className="stat-label">总资产</span>
          <span className="stat-value">
            ¥{portfolio.totalValue.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}
          </span>
        </div>
        <div className="stat-item">
          <span className="stat-label">今日收益</span>
          <span className={`stat-value ${portfolio.todayProfit >= 0 ? 'positive' : 'negative'}`}>
            {portfolio.todayProfit >= 0 ? '+' : ''}
            ¥{portfolio.todayProfit.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}
            <span className="stat-secondary">
              ({portfolio.todayProfitPercent >= 0 ? '+' : ''}
              {portfolio.todayProfitPercent.toFixed(2)}%)
            </span>
          </span>
        </div>
        <div className="stat-item">
          <span className="stat-label">持仓数量</span>
          <span className="stat-value">{portfolio.holdingsCount}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">可用资金</span>
          <span className="stat-value">
            ¥{portfolio.availableCash.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}
          </span>
        </div>
      </div>

      {/* 持仓列表 */}
      <h3 className="subsection-title">当前持仓</h3>
      <table className="holdings-table">
        <thead>
          <tr>
            <th>基金名称</th>
            <th>持有份额</th>
            <th>最新净值</th>
            <th>持仓市值</th>
            <th>持仓收益</th>
          </tr>
        </thead>
        <tbody>
          {portfolio.holdings.map((holding) => (
            <tr key={holding.code}>
              <td>
                <div className="fund-name">{holding.name}</div>
                <div className="fund-code">{holding.code}</div>
              </td>
              <td>{holding.shares.toFixed(2)}</td>
              <td>{holding.nav.toFixed(4)}</td>
              <td>¥{holding.marketValue.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</td>
              <td className={holding.profitPercent >= 0 ? 'positive' : 'negative'}>
                {holding.profitPercent >= 0 ? '+' : ''}{holding.profitPercent.toFixed(2)}%
                <span className="profit-value">
                  ({holding.profit >= 0 ? '+' : ''}
                  ¥{holding.profit.toLocaleString('zh-CN', { minimumFractionDigits: 2 })})
                </span>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

// 添加详细的PropTypes
PortfolioSummary.propTypes = {
  portfolio: PropTypes.shape({
    totalValue: PropTypes.number.isRequired,
    availableCash: PropTypes.number.isRequired,
    todayProfit: PropTypes.number.isRequired,
    todayProfitPercent: PropTypes.number.isRequired,
    holdingsCount: PropTypes.number.isRequired,
    holdings: PropTypes.arrayOf(
      PropTypes.shape({
        code: PropTypes.string.isRequired,
        name: PropTypes.string.isRequired,
        shares: PropTypes.number.isRequired,
        nav: PropTypes.number.isRequired,
        marketValue: PropTypes.number.isRequired,
        profit: PropTypes.number.isRequired,
        profitPercent: PropTypes.number.isRequired,
        category: PropTypes.string
      })
    ).isRequired
  })
};

PortfolioSummary.defaultProps = {
  portfolio: null
};

export default PortfolioSummary;
</file>

<file path="src/components/trading/TradeHistory.jsx">
import React from 'react';
import './Trading.css';
import { formatDate, formatFundCode } from '../../utils/formatters';

const TradeHistory = ({ trades }) => {
  if (!trades || trades.length === 0) {
    return <div className="empty-state">无交易记录</div>;
  }
  
  return (
    <div className="trade-history">
      <h3 className="subsection-title">交易历史</h3>
      
      <div className="trades-table-container">
        <table className="trades-table">
          <thead>
            <tr>
              <th>时间</th>
              <th>基金</th>
              <th>交易</th>
              <th>金额/份额</th>
              <th>状态</th>
            </tr>
          </thead>
          <tbody>
            {trades.map(trade => (
              <tr key={trade.id}>
                <td className="text-sm">{formatDate(trade.time, 'medium')}</td>
                <td>
                  <div className="fund-name">{trade.fundName}</div>
                  <div className="fund-code text-xs text-tertiary">{formatFundCode(trade.fundCode)}</div>
                </td>
                <td>
                  <span className={`trade-action ${trade.action}`}>
                    {trade.action === 'buy' ? '买入' : '卖出'}
                  </span>
                </td>
                <td>
                  <div>¥{trade.amount.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</div>
                  <div className="trade-shares text-xs text-tertiary">
                    {trade.shares.toFixed(2)}份
                  </div>
                </td>
                <td>
                  <span className={`trade-status ${trade.status}`}>
                    {trade.status === 'completed' ? '已完成' : 
                     trade.status === 'pending' ? '处理中' : '失败'}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default TradeHistory;
</file>

<file path="src/components/trading/TradingHistory.jsx">
import React from 'react';
import './Trading.css';

/**
 * 交易历史组件
 * 显示用户的历史交易记录
 * @param {Object} props - 组件属性
 * @param {Array} props.trades - 交易历史数据
 */
const TradingHistory = ({ trades }) => {
  // 如果没有数据，显示提示信息
  if (!trades || trades.length === 0) {
    return <div className="empty-state">暂无交易记录</div>;
  }

  // 格式化日期
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('zh-CN', { 
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  return (
    <div className="trading-history">
      <table className="trades-table">
        <thead>
          <tr>
            <th>时间</th>
            <th>操作</th>
            <th>基金名称</th>
            <th>金额/份额</th>
            <th>状态</th>
          </tr>
        </thead>
        <tbody>
          {trades.map((trade) => (
            <tr key={trade.id} className={`trade-record ${trade.action}`}>
              <td>{formatDate(trade.timestamp)}</td>
              <td className={`trade-action ${trade.action}`}>
                {trade.action === 'buy' ? '买入' : '卖出'}
              </td>
              <td>
                <div className="fund-name">{trade.fundName}</div>
                <div className="fund-code">{trade.fundCode}</div>
              </td>
              <td>
                {trade.action === 'buy' ? (
                  <>
                    <div>¥{trade.amount.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</div>
                    <div className="trade-shares">{trade.shares.toFixed(2)}份</div>
                  </>
                ) : (
                  <>
                    <div>{trade.shares.toFixed(2)}份</div>
                    <div className="trade-amount">¥{trade.amount.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</div>
                  </>
                )}
              </td>
              <td>
                <span className={`trade-status ${trade.status}`}>
                  {trade.status === 'completed' ? '已完成' :
                   trade.status === 'pending' ? '处理中' :
                   trade.status === 'failed' ? '失败' : trade.status}
                </span>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default TradingHistory;
</file>

<file path="src/hooks/useBehaviorData.js">
import { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../contexts/AuthContext';
import { fetchBehaviorData, fetchBehaviorBiases, fetchUserBehaviorStats } from '../services/mockApi';

/**
 * 用户行为数据钩子
 * @returns {Object} - 用户行为相关数据和状态
 */
const useBehaviorData = () => {
  const { user } = useContext(AuthContext);
  const [behaviorRadarData, setBehaviorRadarData] = useState([]);
  const [behaviorBiases, setBehaviorBiases] = useState([]);
  const [behaviorStats, setBehaviorStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // 获取行为数据
  useEffect(() => {
    const loadBehaviorData = async () => {
      if (!user) return;
      
      try {
        setLoading(true);
        setError(null);
        
        // 并行获取三种行为数据
        const [radarResponse, biasesResponse, statsResponse] = await Promise.all([
          fetchBehaviorData(),
          fetchBehaviorBiases(),
          fetchUserBehaviorStats(user.id)
        ]);
        
        if (radarResponse.success) {
          setBehaviorRadarData(radarResponse.data);
        } else {
          throw new Error('获取行为雷达图数据失败');
        }
        
        if (biasesResponse.success) {
          setBehaviorBiases(biasesResponse.data);
        } else {
          throw new Error('获取行为偏差数据失败');
        }
        
        if (statsResponse.success) {
          setBehaviorStats(statsResponse.data);
        } else {
          throw new Error('获取用户行为统计数据失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadBehaviorData();
  }, [user]);

  // 获取主要行为偏差
  const getPrimaryBiases = () => {
    if (!behaviorBiases || behaviorBiases.length === 0) return [];
    
    // 按分数排序并返回前两名
    return [...behaviorBiases].sort((a, b) => b.score - a.score).slice(0, 2);
  };

  // 获取行为风险分数
  const getBehaviorRiskScore = () => {
    if (!behaviorStats) return 0;
    return behaviorStats.riskToleranceScore;
  };

  // 获取知识水平分数
  const getKnowledgeScore = () => {
    if (!behaviorStats) return 0;
    return behaviorStats.knowledgeScore;
  };

  return {
    behaviorRadarData,
    behaviorBiases,
    behaviorStats,
    getPrimaryBiases,
    getBehaviorRiskScore,
    getKnowledgeScore,
    loading,
    error
  };
};

export default useBehaviorData;
</file>

<file path="src/pages/behavior/BehaviorAlerts.css">
.behavior-alerts-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing-md) 0;
  padding-top: var(--page-top-spacing); /* 使用统一的顶部间距变量 */
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
}

.alerts-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-lg);
}

.filter-section {
  display: flex;
  align-items: center;
}

.filter-label {
  margin-right: var(--spacing-sm);
  color: var(--text-secondary);
}

.filter-buttons {
  display: flex;
  gap: var(--spacing-xs);
}

.filter-button {
  background-color: var(--neutral-100);
  border: 1px solid var(--neutral-200);
  border-radius: var(--border-radius-md);
  padding: var(--spacing-xs) var(--spacing-sm);
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  cursor: pointer;
  transition: var(--transition-default);
  position: relative;
}

.filter-button.active {
  background-color: var(--primary-color);
  border-color: var(--primary-color);
  color: white;
}

.filter-button:hover:not(.active) {
  background-color: var(--neutral-200);
}

.unread-badge {
  position: absolute;
  top: -8px;
  right: -8px;
  background-color: var(--error-color);
  color: white;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  padding: 2px 6px;
  font-weight: 600;
}

.read-all-button {
  background-color: transparent;
  border: none;
  color: var(--primary-color);
  font-size: var(--font-size-sm);
  cursor: pointer;
}

.read-all-button:hover {
  text-decoration: underline;
}

.alerts-container {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
}

.alert-card {
  transition: transform 0.2s;
}

.alert-card:hover {
  transform: translateY(-2px);
}

.alert-card.unread {
  box-shadow: 0 0 0 2px var(--primary-color);
}

.alert-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.alert-meta {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
}

.alert-priority {
  display: inline-block;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  color: white;
}

.alert-priority.high {
  background-color: var(--error-color);
}

.alert-priority.medium {
  background-color: var(--warning-color);
}

.alert-priority.low {
  background-color: var(--success-color);
}

.alert-time {
  color: var(--text-tertiary);
  font-size: var(--font-size-xs);
}

.mark-read-button {
  background-color: transparent;
  border: none;
  color: var(--primary-color);
  font-size: var(--font-size-xs);
  cursor: pointer;
}

.mark-read-button:hover {
  text-decoration: underline;
}

.alert-title {
  font-size: var(--font-size-lg);
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

.alert-content {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-lg);
}

.detected-behavior,
.market-context,
.alert-suggestion {
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
  padding: var(--spacing-md);
}

.behavior-title,
.context-title,
.suggestion-title {
  font-size: var(--font-size-md);
  margin-top: 0;
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.behavior-description,
.context-description,
.suggestion-description {
  margin: 0;
  color: var(--text-secondary);
  line-height: 1.6;
}

.alert-actions {
  display: flex;
  gap: var(--spacing-md);
}

.action-button {
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  border-radius: var(--border-radius-md);
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-default);
}

.action-button.primary {
  background-color: var(--primary-color);
  color: white;
}

.action-button.primary:hover {
  background-color: var(--primary-dark);
}

.action-button.secondary {
  background-color: var(--neutral-100);
  color: var(--text-primary);
}

.action-button.secondary:hover {
  background-color: var(--neutral-200);
}

/* 空状态 */
.empty-state {
  text-align: center;
  padding: var(--spacing-xl);
  color: var(--text-tertiary);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .alerts-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-md);
  }
  
  .filter-section {
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
  }
  
  .filter-buttons {
    flex-wrap: wrap;
    margin-top: var(--spacing-xs);
  }
  
  .alert-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-sm);
  }
  
  .alert-actions {
    flex-direction: column;
  }
}
</file>

<file path="src/pages/behavior/BehaviorAlerts.jsx">
import React, { useState, useEffect } from 'react';
import { getUserBehaviorAlerts } from '../../services/behaviorService';
import Card from '../../components/common/Card';
import './BehaviorAlerts.css';

/**
 * 行为反馈/提醒页面
 * 展示近期检测到的非理性行为和相应的提醒
 */
const BehaviorAlerts = () => {
  const [alerts, setAlerts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('all'); // all, unread, high, medium, low

  useEffect(() => {
    const loadBehaviorAlerts = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await getUserBehaviorAlerts('current-user');
        
        if (response.success) {
          setAlerts(response.data);
        } else {
          throw new Error('获取行为提醒数据失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadBehaviorAlerts();
  }, []);

  // 处理标记为已读
  const handleMarkAsRead = (alertId) => {
    setAlerts(prevAlerts => 
      prevAlerts.map(alert => 
        alert.id === alertId ? { ...alert, read: true } : alert
      )
    );
  };

  // 处理全部标记为已读
  const handleMarkAllAsRead = () => {
    setAlerts(prevAlerts => 
      prevAlerts.map(alert => ({ ...alert, read: true }))
    );
  };

  // 筛选提醒
  const filteredAlerts = alerts.filter(alert => {
    if (filter === 'all') return true;
    if (filter === 'unread') return !alert.read;
    return alert.priority === filter;
  });
  
  if (loading) {
    return <div className="loading">加载行为提醒数据中...</div>;
  }
  
  if (error) {
    return <div className="error">{error}</div>;
  }
  
  return (
    <div className="behavior-alerts-page">
      <div className="page-header">
        <h1 className="page-title">行为反馈与提醒</h1>
        <p className="page-description">
          我们会实时监测您的投资行为，当检测到可能的非理性决策时，会在这里提供反馈和建议，帮助您避免投资陷阱。
        </p>
      </div>
      
      <div className="alerts-header">
        <div className="filter-section">
          <span className="filter-label">筛选: </span>
          <div className="filter-buttons">
            <button 
              className={`filter-button ${filter === 'all' ? 'active dark-bg-primary-light' : ''} dark-text-primary dark-hover`}
              onClick={() => setFilter('all')}
            >
              全部
            </button>
            <button 
              className={`filter-button ${filter === 'unread' ? 'active' : ''}`}
              onClick={() => setFilter('unread')}
            >
              未读 
              {alerts.filter(a => !a.read).length > 0 && 
                <span className="unread-badge">{alerts.filter(a => !a.read).length}</span>
              }
            </button>
            <button 
              className={`filter-button ${filter === 'high' ? 'active' : ''}`}
              onClick={() => setFilter('high')}
            >
              高优先级
            </button>
            <button 
              className={`filter-button ${filter === 'medium' ? 'active' : ''}`}
              onClick={() => setFilter('medium')}
            >
              中优先级
            </button>
            <button 
              className={`filter-button ${filter === 'low' ? 'active' : ''}`}
              onClick={() => setFilter('low')}
            >
              低优先级
            </button>
          </div>
        </div>
        
        {alerts.some(alert => !alert.read) && (
          <button 
            className="read-all-button"
            onClick={handleMarkAllAsRead}
          >
            全部标为已读
          </button>
        )}
      </div>
      
      <div className="alerts-container">
        {filteredAlerts.length === 0 ? (
          <div className="empty-state">
            {filter === 'all' 
              ? '暂无行为提醒'
              : filter === 'unread'
                ? '没有未读的提醒'
                : `没有${filter === 'high' ? '高' : filter === 'medium' ? '中' : '低'}优先级的提醒`
            }
          </div>
        ) : (
          filteredAlerts.map(alert => (
            <Card 
              key={alert.id} 
              className={`alert-card ${alert.priority} ${!alert.read ? 'unread' : ''}`}
            >
              <div className="alert-header">
                <div className="alert-meta">
                  <span className={`alert-priority ${alert.priority}`}>
                    {alert.priority === 'high' ? '高优先级' : 
                     alert.priority === 'medium' ? '中优先级' : '低优先级'}
                  </span>
                  <span className="alert-time">{alert.time}</span>
                </div>
                {!alert.read && (
                  <button 
                    className="mark-read-button"
                    onClick={() => handleMarkAsRead(alert.id)}
                  >
                    标为已读
                  </button>
                )}
              </div>
              
              <h3 className="alert-title">{alert.title}</h3>
              
              <div className="alert-content">
                <div className="detected-behavior">
                  <h4 className="behavior-title">检测到的行为</h4>
                  <p className="behavior-description">{alert.behavior}</p>
                </div>
                
                <div className="market-context">
                  <h4 className="context-title">市场背景</h4>
                  <p className="context-description">{alert.marketContext}</p>
                </div>
                
                <div className="alert-suggestion">
                  <h4 className="suggestion-title">建议</h4>
                  <p className="suggestion-description">{alert.suggestion}</p>
                </div>
              </div>
              
              <div className="alert-actions">
                <button className="action-button primary">查看详细分析</button>
                <button className="action-button secondary">查看相关知识</button>
              </div>
            </Card>
          ))
        )}
      </div>
    </div>
  );
};

export default BehaviorAlerts;
</file>

<file path="src/pages/behavior/BehaviorCorrection.jsx">
import React, { useState } from 'react';
import { Link, useLocation, useNavigate, Outlet } from 'react-router-dom';
import Card from '../../components/common/Card';
import './BehaviorCorrection.css';

/**
 * 行为矫正主页面
 * 提供行为矫正的不同功能入口，并可以在不同子功能间切换
 */
const BehaviorCorrection = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [activePage, setActivePage] = useState(() => {
    const path = location.pathname;
    if (path.includes('/profile') || path === '/behavior') return 'profile';
    if (path.includes('/trading')) return 'trading';
    if (path.includes('/alerts')) return 'alerts';
    return 'profile'; // 默认页面
  });

  // 仅在通过Tab按钮切换时更新Active状态
  const handleTabChange = (tab) => {
    setActivePage(tab);
    switch (tab) {
      case 'profile':
        navigate('/behavior/profile');
        break;
      case 'trading':
        navigate('/behavior/trading');
        break;
      case 'alerts':
        navigate('/behavior/alerts');
        break;
      default:
        navigate('/behavior/profile');
    }
  };

  return (
    <div className="behavior-correction-page">
      <div className="page-header">
        <h1 className="page-title dark-text-heading">行为矫正</h1>
        <p className="page-description dark-text-description">
          帮助您识别投资行为中的认知偏差，通过模拟交易实践和实时反馈，培养更理性的投资习惯。
        </p>
      </div>

      <div className="behavior-tabs dark-border-light">
        <button 
          className={`tab-button ${activePage === 'profile' ? 'active dark-bg-primary-light' : ''} dark-text-primary dark-hover`}
          onClick={() => handleTabChange('profile')}
        >
          行为画像
        </button>
        <button 
          className={`tab-button ${activePage === 'trading' ? 'active dark-bg-primary-light' : ''} dark-text-primary dark-hover`}
          onClick={() => handleTabChange('trading')}
        >
          模拟交易
        </button>
        <button 
          className={`tab-button ${activePage === 'alerts' ? 'active dark-bg-primary-light' : ''} dark-text-primary dark-hover`}
          onClick={() => handleTabChange('alerts')}
        >
          行为提醒
          <span className="alerts-badge">3</span>
        </button>
      </div>

      <div className="feature-content">
        <Outlet />
      </div>

      <div className="behavior-modules-cards">
        <h2 className="section-title dark-text-heading">行为矫正模块</h2>
        <div className="module-cards">
          <Card className="module-card dark-bg-card dark-shadow-sm dark-border-accent">
            <div className="module-icon profile-icon">👤</div>
            <h3 className="module-title dark-text-heading">行为画像</h3>
            <p className="module-description dark-text-description">
              深入分析您的投资行为特征和认知偏差，提供个性化的改进建议。
            </p>
            {/* 修改这里，移除onClick事件，使用纯链接导航，不再触发侧边栏状态更新 */}
            <Link 
              to="/behavior/profile" 
              className="module-link"
            >
              查看我的行为画像
            </Link>
          </Card>

          <Card className="module-card dark-bg-card dark-shadow-sm dark-border-accent">
            <div className="module-icon trading-icon">📊</div>
            <h3 className="module-title dark-text-heading">模拟交易</h3>
            <p className="module-description dark-text-description">
              在模拟市场环境中练习投资技能，获取实时反馈，发现并纠正非理性行为。
            </p>
            {/* 修改这里，移除onClick事件 */}
            <Link 
              to="/behavior/trading" 
              className="module-link"
            >
              开始模拟交易
            </Link>
          </Card>

          <Card className="module-card dark-bg-card dark-shadow-sm dark-border-accent">
            <div className="module-icon alerts-icon">🔔</div>
            <h3 className="module-title dark-text-heading">行为提醒</h3>
            <p className="module-description dark-text-description">
              实时监测您的投资行为，当检测到可能的非理性决策时提供警示和建议。
            </p>
            {/* 修改这里，移除onClick事件 */}
            <Link 
              to="/behavior/alerts" 
              className="module-link"
            >
              查看行为提醒
            </Link>
          </Card>
        </div>
      </div>

      <Card className="learning-resources-card">
        <h2 className="card-title">推荐学习资源</h2>
        <div className="resources-list">
          <div className="resource-item">
            <div className="resource-icon article-icon">📝</div>
            <div className="resource-content">
              <h3 className="resource-title">认识行为金融学：投资中的心理陷阱</h3>
              <p className="resource-description">
                了解常见的投资心理偏差及其对决策的影响，学习如何克服这些偏差。
              </p>
              <Link to="/cognitive/learning/behavioral-finance" className="resource-link">
                阅读文章
              </Link>
            </div>
          </div>

          <div className="resource-item">
            <div className="resource-icon video-icon">🎬</div>
            <div className="resource-content">
              <h3 className="resource-title">损失厌恶与恐慌性抛售：案例分析</h3>
              <p className="resource-description">
                通过历史案例分析损失厌恶如何导致投资者在市场低点恐慌性抛售。
              </p>
              <Link to="/cognitive/learning/loss-aversion" className="resource-link">
                观看视频
              </Link>
            </div>
          </div>

          <div className="resource-item">
            <div className="resource-icon quiz-icon">❓</div>
            <div className="resource-content">
              <h3 className="resource-title">测试：你的投资决策有多理性？</h3>
              <p className="resource-description">
                通过这个简短的测试，评估您在投资决策中的理性程度和潜在偏差。
              </p>
              <Link to="/cognitive/quiz/rational-decision" className="resource-link">
                开始测试
              </Link>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default BehaviorCorrection;
</file>

<file path="src/pages/behavior/BehaviorProfile.jsx">
import React, { useState, useEffect } from 'react';
import { getUserBehaviorProfile } from '../../services/behaviorService';
import BehaviorRadar from '../../components/charts/BehaviorRadar';
import Card from '../../components/common/Card';
import './BehaviorProfile.css';

/**
 * 行为画像页面
 * 展示用户的投资行为特征、偏差分析和改进建议
 */
const BehaviorProfile = () => {
  const [profileData, setProfileData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadBehaviorProfile = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await getUserBehaviorProfile('current-user');
        
        if (response.success) {
          setProfileData(response.data);
        } else {
          throw new Error('获取行为画像数据失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadBehaviorProfile();
  }, []);
  
  if (loading) {
    return <div className="loading">加载行为画像数据中...</div>;
  }
  
  if (error) {
    return <div className="error">{error}</div>;
  }
  
  if (!profileData) {
    return <div className="empty-state">暂无行为画像数据</div>;
  }
  
  return (
    <div className="behavior-profile-page">
      <div className="page-header">
        <h1 className="page-title dark-text-heading">行为画像分析</h1>
        <p className="page-description dark-text-description">
          基于您的投资历史，我们分析了您的行为特征和可能存在的认知偏差，帮助您更好地了解自己的投资风格和提升决策质量。
        </p>
      </div>
      
      <div className="behavior-profile-overview">
        <Card className="risk-score-card dark-bg-card dark-shadow-sm">
          <h2 className="card-title">风险承受能力</h2>
          <div className="score-circle large">
            <svg viewBox="0 0 36 36">
              <path
                className="score-bg"
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
              />
              <path
                className="score-fill"
                strokeDasharray={`${profileData.riskScore}, 100`}
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
              />
              <text x="18" y="20.35" className="score-text">{profileData.riskScore}</text>
            </svg>
          </div>
          <div className="score-description">
            <p>{profileData.riskDescription}</p>
            <span className="score-label">{profileData.riskLevel}</span>
          </div>
        </Card>
        
        <Card className="trade-style-card dark-bg-card dark-shadow-sm">
          <h2 className="card-title">交易风格分析</h2>
          <div className="trade-stats">
            <div className="stat-item">
              <span className="stat-label">交易频率</span>
              <span className="stat-value">{profileData.tradeFrequency}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">持有周期</span>
              <span className="stat-value">{profileData.holdingPeriod}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">波动承受度</span>
              <span className="stat-value">{profileData.volatilityTolerance}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">分散化程度</span>
              <span className="stat-value">{profileData.diversificationLevel}</span>
            </div>
          </div>
          <p className="style-analysis">{profileData.tradeStyleAnalysis}</p>
        </Card>
      </div>
      
      <Card className="radar-chart-card">
        <h2 className="card-title">行为特征雷达图</h2>
        <div className="chart-container">
          <BehaviorRadar data={profileData.behaviorRadarData} />
        </div>
        <p className="chart-description">
          雷达图展示了您在各个行为维度上的表现，数值越接近中心表示该行为特征越弱，越接近边缘表示该特征越强。
        </p>
      </Card>
      
      <div className="bias-section">
        <h2 className="section-title">检测到的认知偏差</h2>
        <div className="bias-cards">
          {profileData.detectedBiases.map((bias, index) => (
            <Card key={index} className={`bias-card ${bias.severity}`}>
              <div className="bias-header">
                <h3 className="bias-name">{bias.name}</h3>
                <span className={`bias-severity ${bias.severity}`}>
                  {bias.severity === 'high' ? '严重' : 
                   bias.severity === 'medium' ? '中等' : '轻微'}
                </span>
              </div>
              <div className="bias-score">
                <div className="score-bar">
                  <div 
                    className="score-bar-fill" 
                    style={{ width: `${bias.score}%` }}
                  ></div>
                </div>
                <span className="score-value">{bias.score}</span>
              </div>
              <p className="bias-description">{bias.description}</p>
              <div className="bias-suggestions">
                <h4 className="suggestions-title">改进建议</h4>
                <ul className="suggestions-list">
                  {bias.suggestions.map((suggestion, idx) => (
                    <li key={idx}>{suggestion}</li>
                  ))}
                </ul>
              </div>
            </Card>
          ))}
        </div>
      </div>
      
      <Card className="knowledge-evaluation-card">
        <h2 className="card-title">投资知识评估</h2>
        <div className="knowledge-score">
          <div className="score-circle">
            <svg viewBox="0 0 36 36">
              <path
                className="score-bg"
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
              />
              <path
                className="score-fill knowledge"
                strokeDasharray={`${profileData.knowledgeScore}, 100`}
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
              />
              <text x="18" y="20.35" className="score-text">{profileData.knowledgeScore}</text>
            </svg>
          </div>
          <div className="knowledge-description">
            <p>{profileData.knowledgeDescription}</p>
            <div className="knowledge-areas">
              <h4>知识强项</h4>
              <div className="knowledge-tags">
                {profileData.strengths.map((item, index) => (
                  <span key={index} className="knowledge-tag strength">{item}</span>
                ))}
              </div>
              <h4>需要提升的领域</h4>
              <div className="knowledge-tags">
                {profileData.weaknesses.map((item, index) => (
                  <span key={index} className="knowledge-tag weakness">{item}</span>
                ))}
              </div>
            </div>
          </div>
        </div>
      </Card>
      
      <Card className="action-plan-card">
        <h2 className="card-title">行为改进计划</h2>
        <div className="action-items">
          {profileData.actionPlan.map((action, index) => (
            <div key={index} className="action-item">
              <div className="action-header">
                <h3 className="action-title">{action.title}</h3>
                <span className="action-priority">{action.priority}</span>
              </div>
              <p className="action-description">{action.description}</p>
              <div className="action-steps">
                <h4 className="steps-title">具体步骤</h4>
                <ol className="steps-list">
                  {action.steps.map((step, idx) => (
                    <li key={idx}>{step}</li>
                  ))}
                </ol>
              </div>
            </div>
          ))}
        </div>
      </Card>
    </div>
  );
};

export default BehaviorProfile;
</file>

<file path="src/pages/behavior/TradingSimulation.jsx">
import React, { useState, useEffect } from 'react';
import { 
  getMarketOverview, 
  getPortfolioSummary, 
  executeTradeOrder,
  getTradeHistory,
  getBehaviorFeedback
} from '../../services/tradingService';
import MarketOverview from '../../components/trading/MarketOverview';
import PortfolioSummary from '../../components/trading/PortfolioSummary';
import TradeForm from '../../components/trading/TradeForm';
import TradingHistory from '../../components/trading/TradingHistory';
import BehaviorFeedback from '../../components/behavior/BehaviorFeedback';
import Card from '../../components/common/Card';
import './TradingSimulation.css';

/**
 * 模拟交易页面组件
 * 提供模拟市场环境，使用户能够实践投资行为
 * 并获得实时行为反馈
 */
const TradingSimulation = () => {
  const [marketData, setMarketData] = useState([]);
  const [portfolio, setPortfolio] = useState(null);
  const [tradeHistory, setTradeHistory] = useState([]);
  const [behaviorFeedback, setBehaviorFeedback] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);

        const [marketResponse, portfolioResponse, historyResponse, feedbackResponse] = await Promise.all([
          getMarketOverview(),
          getPortfolioSummary('current-user'),
          getTradeHistory({ userId: 'current-user', page: 1, pageSize: 10 }),
          getBehaviorFeedback()
        ]);

        if (marketResponse.success) setMarketData(marketResponse.data);
        if (portfolioResponse.success) setPortfolio(portfolioResponse.data);
        if (historyResponse.success) setTradeHistory(historyResponse.data);
        if (feedbackResponse.success) setBehaviorFeedback(feedbackResponse.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  const handleTradeSubmit = async (order) => {
    try {
      const result = await executeTradeOrder(order);
      if (result.success) {
        setPortfolio(result.data.updatedPortfolio);
        setBehaviorFeedback(result.data.behaviorFeedback);
        setTradeHistory((prev) => [result.data.newTrade, ...prev]);
      }
      return result;
    } catch (err) {
      return { success: false, message: err.message };
    }
  };

  if (loading) {
    return <div className="loading">加载数据中...</div>;
  }

  if (error) {
    return <div className="error">{error}</div>;
  }

  return (
    <div className="trading-simulation-page">
      <div className="page-header">
        <h1 className="page-title dark-text-heading">模拟交易</h1>
        <p className="page-description dark-text-description">
          通过模拟交易实践投资行为，分析市场数据，优化投资决策，并获得行为反馈。
        </p>
      </div>

      <div className="trading-simulation-layout">
        <div className="portfolio-trade-grid">
          <Card className="market-overview-card dark-bg-card dark-shadow-sm">
            <h2 className="section-title dark-text-heading">市场概览</h2>
            <MarketOverview data={marketData} />
          </Card>

          <Card className="portfolio-card dark-bg-card dark-shadow-sm">
            <h2 className="section-title dark-text-heading">投资组合</h2>
            <PortfolioSummary portfolio={portfolio} />
          </Card>
        </div>

        <Card className="trade-card dark-bg-card dark-shadow-sm">
          <h2 className="section-title dark-text-heading">交易操作</h2>
          <TradeForm 
            marketData={marketData} 
            portfolio={portfolio} 
            onSubmit={handleTradeSubmit} 
          />
          <input type="text" className="dark-input dark-focus" />
          <button className="submit-button">提交</button>
        </Card>

        <Card className="trade-history-card dark-bg-card dark-shadow-sm">
          <h2 className="section-title dark-text-heading">交易历史</h2>
          <TradingHistory trades={tradeHistory} />
        </Card>

        <Card className="behavior-feedback-card dark-bg-card dark-shadow-sm">
          <h2 className="section-title dark-text-heading">行为反馈</h2>
          <BehaviorFeedback feedback={behaviorFeedback} />
        </Card>
      </div>
    </div>
  );
};

export default TradingSimulation;
</file>

<file path="src/pages/cognitive/ChatInterface.jsx">
import React, { useState, useEffect, useRef } from 'react';
import { getChatHistory, sendMessage, getPersonalizedPrompts } from '../../services/chatService';
import { Link } from 'react-router-dom';
import './ChatInterface.css';

const ChatInterface = () => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [error, setError] = useState(null);
  const [personalizedPrompts, setPersonalizedPrompts] = useState([]);
  const [selectedModel, setSelectedModel] = useState('fund-advisor-base');
  const [useContext, setUseContext] = useState(true);

  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    const loadChatHistory = async () => {
      try {
        setLoading(true);
        setError(null);

        const response = await getChatHistory({
          userId: 'current-user',
          limit: 50,
        });

        if (response.success) {
          setMessages(response.data);
        } else {
          throw new Error('获取聊天历史失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadChatHistory();

    const loadPersonalizedPrompts = async () => {
      try {
        const response = await getPersonalizedPrompts('current-user');
        if (response.success) {
          setPersonalizedPrompts(response.data);
        }
      } catch (err) {
        console.error('加载个性化提示失败', err);
      }
    };

    loadPersonalizedPrompts();
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || sending) return;

    try {
      setSending(true);

      const userMessage = {
        id: Date.now().toString(),
        role: 'user',
        content: inputValue,
      };

      setMessages((prev) => [...prev, userMessage]);
      setInputValue('');

      const response = await sendMessage(userMessage, {
        userId: 'current-user',
        modelVersion: selectedModel,
        useContext: useContext,
        context: messages.slice(-10),
      });

      if (response.success) {
        setMessages((prev) => [...prev, response.data]);
      } else {
        throw new Error('发送消息失败');
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setSending(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleQuickQuestion = (question) => {
    setInputValue(question);
  };

  const handleModelChange = (modelId) => {
    setSelectedModel(modelId);
  };

  const handleContextToggle = () => {
    setUseContext(!useContext);
  };

  // 如果没有个性化提示，使用默认提示 - 从用户角度出发的问题
  const defaultQuestions = [
    "什么是基金？我该如何入门？",
    "基金有哪些类型？哪类更适合我？",
    "我应该如何选择适合自己的基金？",
    "定投的优势是什么？我适合定投吗？",
    "当前市场形势如何？有投资机会吗？",
    "如何构建一个分散风险的投资组合？"
  ];

  if (loading) {
    return <div className="page-loading">加载聊天记录中...</div>;
  }

  // 使用个性化提示或默认提示
  const quickQuestions = personalizedPrompts.length > 0 
    ? personalizedPrompts.map(p => ({
        id: p.id,
        // 将AI角度的问题转换为用户角度
        text: p.text.replace(/您的/g, "我的")
               .replace(/您是否/g, "我该如何")
               .replace(/您想/g, "我想")
               .replace(/您/, "我")
               .replace(/\?/, "？")
      }))
    : defaultQuestions.map(text => ({ id: `default-${Date.now()}-${Math.random()}`, text }));

  return (
    <div className="chat-interface-page">
      <div className="page-header">
        <h1 className="page-title dark-text-heading">AI投资顾问</h1>
        <p className="page-description dark-text-description">
          与AI对话，获取个性化投资建议和知识讲解。AI会根据您的投资历史和风险偏好提供针对性的指导。
        </p>
      </div>

      <div className="chat-container">
        <div className="chat-main">
          <div className="card dark-bg-card dark-shadow-sm">
            <div className="chat-header">
              <h2 className="section-title dark-text-heading">智能对话</h2>
            </div>

            <div className="chat-messages dark-border dark-bg-primary" ref={chatContainerRef}>
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`message ${message.role === 'user' ? 'message-user' : 'message-assistant'}`}
                >
                  <div className="message-avatar">{message.role === 'user' ? '👤' : '🤖'}</div>
                  <div className={`message-content ${message.role === 'user' ? 'dark-bg-primary-light' : 'dark-bg-secondary'} dark-text-primary`}>
                    {message.content.split('\n').map((paragraph, index) => (
                      <p key={index}>{paragraph}</p>
                    ))}
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />

              {sending && (
                <div className="message message-assistant">
                  <div className="message-avatar">🤖</div>
                  <div className="message-content typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              )}
            </div>

            {error && <div className="chat-error">{error}</div>}

            <div className="chat-input-container">
              <textarea
                className="chat-input dark-input dark-focus"
                value={inputValue}
                onChange={handleInputChange}
                onKeyDown={handleKeyDown}
                placeholder="输入您的投资问题，按Enter发送..."
                rows={3}
                disabled={sending}
              />
              <button
                className="btn primary"
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || sending}
              >
                {sending ? '发送中...' : '发送'}
              </button>
            </div>
          </div>
        </div>

        <div className="chat-sidebar">
          <div className="card card-sm dark-bg-card dark-shadow-sm">
            <h3 className="title-group dark-text-heading">推荐问题</h3>
            <div className="quick-questions-list">
              {quickQuestions.map((question, index) => (
                <button 
                  key={question.id || index}
                  className="quick-question-button"
                  onClick={() => handleQuickQuestion(question.text)}
                >
                  {question.text}
                </button>
              ))}
            </div>
          </div>

          <div className="card card-sm">
            <h3 className="title-group">您的投资行为分析</h3>
            <div className="behavior-summary">
              <div className="behavior-item">
                <span className="text-sm">损失厌恶</span>
                <div className="behavior-bar">
                  <div className="behavior-fill" style={{ width: '75%' }}></div>
                </div>
                <span className="text-sm text-bold">较高</span>
              </div>

              <div className="behavior-item">
                <span className="text-sm">过度自信</span>
                <div className="behavior-bar">
                  <div className="behavior-fill" style={{ width: '60%' }}></div>
                </div>
                <span className="text-sm">中等</span>
              </div>

              <div className="behavior-item">
                <span className="text-sm">从众心理</span>
                <div className="behavior-bar">
                  <div className="behavior-fill" style={{ width: '30%' }}></div>
                </div>
                <span className="text-sm">较低</span>
              </div>
            </div>
            <p className="text-sm text-tertiary mt-md">
              您的投资行为显示出较高的损失厌恶特征，建议在决策时更加理性，制定明确的投资计划并坚持执行。
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;
</file>

<file path="src/pages/cognitive/CourseDetail.jsx">
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getCourseDetail, updateCourseProgress } from '../../services/learningService';
import Card from '../../components/common/Card';
import './CourseDetail.css';

/**
 * 课程详情页面
 * 显示课程的详细内容、大纲和学习材料
 */
const CourseDetail = () => {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const [course, setCourse] = useState(null);
  const [activeLesson, setActiveLesson] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // 获取课程详情
  useEffect(() => {
    const loadCourseDetail = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await getCourseDetail(courseId);
        
        if (response.success) {
          setCourse(response.data);
          // 如果有课程大纲，默认选中第一课
          if (response.data.syllabus && response.data.syllabus.length > 0) {
            setActiveLesson(response.data.syllabus[0]);
          }
        } else {
          throw new Error(response.message || '获取课程详情失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadCourseDetail();
  }, [courseId]);
  
  // 处理返回学习中心
  const handleBackToLearning = () => {
    navigate('/cognitive/learning');
  };
  
  // 选择课程章节
  const handleSelectLesson = (lesson) => {
    setActiveLesson(lesson);
    
    // 模拟更新进度
    updateCourseProgress(courseId, {
      lastLesson: lesson.id,
      timestamp: new Date().toISOString()
    });
  };
  
  if (loading) {
    return <div className="loading">加载课程内容中...</div>;
  }
  
  if (error) {
    return <div className="error">{error}</div>;
  }
  
  if (!course) {
    return <div className="empty-state">未找到课程信息</div>;
  }
  
  return (
    <div className="course-detail-page">
      <button className="back-button dark-text-link" onClick={handleBackToLearning}>
        返回学习中心
      </button>
      
      <div className="course-header">
        <div className="course-info">
          <h1 className="course-title dark-text-heading">{course.title}</h1>
          <div className="course-meta">
            <span className="course-category dark-text-meta">{course.category}</span>
            <span className="course-level dark-text-meta">{course.level}</span>
            <span className="course-duration dark-text-meta">{course.duration}</span>
          </div>
          <p className="course-description dark-text-description">{course.description}</p>
        </div>
        <div className="course-image-container">
          <img src={course.imageUrl} alt={course.title} className="course-image" />
        </div>
      </div>
      
      <div className="course-content">
        <div className="course-sidebar">
          <Card className="syllabus-card dark-bg-card dark-shadow-sm">
            <h2 className="card-title dark-text-heading">课程大纲</h2>
            <div className="syllabus-list">
              {course.syllabus.map((lesson) => (
                <div 
                  key={lesson.id}
                  className={`syllabus-item ${activeLesson && activeLesson.id === lesson.id ? 'active dark-active' : ''} dark-hover`}
                  onClick={() => handleSelectLesson(lesson)}
                >
                  <div className="lesson-info">
                    <span className="lesson-number dark-text-meta">{lesson.id}.</span>
                    <span className="lesson-title dark-text-primary">{lesson.title}</span>
                  </div>
                  <div className="lesson-meta">
                    <span className="lesson-duration dark-text-meta">{lesson.duration}</span>
                    <span className={`lesson-type ${lesson.type} dark-text-meta`}>
                      {lesson.type === 'video' ? '视频' : '测验'}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </Card>
          
          <Card className="instructor-card dark-bg-card dark-shadow-sm">
            <h2 className="card-title dark-text-heading">讲师介绍</h2>
            {course.instructors.map((instructor) => (
              <div key={instructor.id} className="instructor-info">
                <div className="instructor-avatar-container">
                  <img src={instructor.avatar} alt={instructor.name} className="instructor-avatar" />
                </div>
                <div className="instructor-details">
                  <h3 className="instructor-name dark-text-heading">{instructor.name}</h3>
                  <p className="instructor-title dark-text-meta">{instructor.title}</p>
                  <p className="instructor-bio dark-text-description">{instructor.bio}</p>
                </div>
              </div>
            ))}
          </Card>
        </div>
        
        <div className="lesson-content">
          {activeLesson ? (
            <Card className="lesson-card dark-bg-card dark-shadow-sm">
              <div className="lesson-header">
                <h2 className="lesson-title dark-text-heading">
                  {activeLesson.id}. {activeLesson.title}
                </h2>
                <span className="lesson-duration dark-text-meta">{activeLesson.duration}</span>
              </div>
              
              {activeLesson.type === 'video' ? (
                <div className="video-container">
                  <div className="video-placeholder">
                    <div className="placeholder-text">
                      <span className="play-icon">▶</span>
                      视频内容加载中...
                    </div>
                  </div>
                  <div className="video-controls">
                    <button className="control-button">播放</button>
                    <div className="video-progress">
                      <div className="progress-bar">
                        <div className="progress-fill" style={{ width: '0%' }}></div>
                      </div>
                    </div>
                    <button className="control-button">全屏</button>
                  </div>
                </div>
              ) : (
                <div className="quiz-container">
                  <h3 className="quiz-title">知识测验</h3>
                  <p className="quiz-description">
                    完成此测验来测试您对课程内容的理解。
                  </p>
                  <button className="start-quiz-button">开始测验</button>
                </div>
              )}
              
              <div className="lesson-notes">
                <h3 className="notes-title">课程笔记</h3>
                <textarea 
                  className="notes-input"
                  placeholder="在这里记录您的学习笔记..."
                ></textarea>
                <button className="save-notes-button">保存笔记</button>
              </div>
            </Card>
          ) : (
            <div className="empty-lesson">
              <p>请从左侧选择一个课程章节开始学习</p>
            </div>
          )}
          
          <Card className="course-resources">
            <h2 className="card-title">学习资源</h2>
            <div className="resources-list">
              <div className="resource-item">
                <span className="resource-icon document">📄</span>
                <span className="resource-name">课程讲义.pdf</span>
                <button className="download-button">下载</button>
              </div>
              <div className="resource-item">
                <span className="resource-icon spreadsheet">📊</span>
                <span className="resource-name">案例数据.xlsx</span>
                <button className="download-button">下载</button>
              </div>
              <div className="resource-item">
                <span className="resource-icon link">🔗</span>
                <span className="resource-name">扩展阅读链接</span>
                <button className="view-button">查看</button>
              </div>
            </div>
          </Card>
          
          <Card className="related-courses">
            <h2 className="card-title">相关课程推荐</h2>
            <div className="related-courses-list">
              {course.relatedCourses && course.relatedCourses.map((relatedId, index) => {
                const relatedCourse = {
                  id: relatedId,
                  title: `相关课程 ${index + 1}`,
                  description: "加载中...",
                  imageUrl: "https://via.placeholder.com/100"
                };
                
                return (
                  <div 
                    key={relatedId} 
                    className="related-course-item"
                    onClick={() => navigate(`/cognitive/learning/course/${relatedId}`)}
                  >
                    <div className="related-course-image">
                      <img src={relatedCourse.imageUrl} alt={relatedCourse.title} />
                    </div>
                    <div className="related-course-info">
                      <h3 className="related-course-title">{relatedCourse.title}</h3>
                      <p className="related-course-description">{relatedCourse.description}</p>
                    </div>
                  </div>
                );
              })}
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default CourseDetail;
</file>

<file path="src/pages/cognitive/LearningCenter.jsx">
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { SearchOutlined } from '@ant-design/icons';
import Card from '../../components/common/Card';
import { getCourses, getCoursesProgress } from '../../services/learningService';
import './LearningCenter.css';

/**
 * 学习中心页面
 * 提供投资知识学习、课程管理和进度跟踪
 */
const LearningCenter = () => {
  const navigate = useNavigate();
  const [courses, setCourses] = useState([]);
  const [progress, setProgress] = useState({});
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // 筛选和搜索状态
  const [activeCategory, setActiveCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  
  // 获取课程数据和进度
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // 并行请求数据
        const [coursesResponse, progressResponse] = await Promise.all([
          getCourses(),
          getCoursesProgress()
        ]);
        
        if (coursesResponse.success && progressResponse.success) {
          setCourses(coursesResponse.data);
          setProgress(progressResponse.data);
          
          // 提取所有类别
          const uniqueCategories = [...new Set(coursesResponse.data.map(course => course.category))];
          setCategories(uniqueCategories);
        } else {
          throw new Error('获取数据失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadData();
  }, []);
  
  // 搜索和筛选课程
  const filteredCourses = courses.filter(course => {
    const matchesCategory = activeCategory === 'all' || course.category === activeCategory;
    const matchesSearch = !searchQuery || 
      course.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      course.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    return matchesCategory && matchesSearch;
  });
  
  // 获取推荐课程
  const recommendedCourses = courses
    .filter(course => course.recommended)
    .slice(0, 3);
  
  // 获取进行中的课程
  const inProgressCourses = courses
    .filter(course => progress[course.id] && progress[course.id].status === 'in-progress')
    .sort((a, b) => new Date(b.lastAccessed) - new Date(a.lastAccessed))
    .slice(0, 3);
  
  // 处理课程点击
  const handleCourseClick = (courseId) => {
    navigate(`/cognitive/learning/course/${courseId}`);
  };
  
  // 处理搜索输入
  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };
  
  // 处理类别切换
  const handleCategoryChange = (category) => {
    setActiveCategory(category);
  };
  
  if (loading) {
    return <div className="loading">加载学习资源中...</div>;
  }
  
  if (error) {
    return <div className="error">{error}</div>;
  }
  
  return (
    <div className="learning-center-page">
      <div className="page-header">
        <h1 className="page-title dark-text-heading">学习中心</h1>
        <p className="page-description dark-text-description">
          提升您的投资知识和认知能力，通过系统化的学习内容和互动课程，培养理性投资思维。
        </p>
      </div>
      
      {/* 搜索栏 */}
      <div className="search-bar">
        <div className="search-input-container">
          <SearchOutlined className="search-icon dark-text-meta" />
          <input
            type="text"
            className="search-input dark-input dark-focus"
            placeholder="搜索课程、文章或知识点..."
            value={searchQuery}
            onChange={handleSearchChange}
          />
        </div>
      </div>
      
      {/* 进行中的课程 */}
      {inProgressCourses.length > 0 && (
        <div className="in-progress-section">
          <h2 className="section-title dark-text-heading">继续学习</h2>
          <div className="course-cards in-progress">
            {inProgressCourses.map(course => (
              <Card 
                key={course.id} 
                className="course-card in-progress dark-bg-card dark-shadow-sm dark-border-accent"
                onClick={() => handleCourseClick(course.id)}
              >
                <div className="course-progress-bar">
                  <div 
                    className="progress-fill"
                    style={{ width: `${progress[course.id].percentage}%` }}
                  ></div>
                </div>
                <h3 className="course-title dark-text-heading">{course.title}</h3>
                <div className="course-meta">
                  <span className="course-category dark-text-meta">{course.category}</span>
                  <span className="course-progress dark-text-meta">
                    已完成 {progress[course.id].percentage}%
                  </span>
                </div>
                <p className="course-last-accessed dark-text-meta">
                  上次学习: {new Date(course.lastAccessed).toLocaleDateString()}
                </p>
                <button className="continue-button">继续学习</button>
              </Card>
            ))}
          </div>
        </div>
      )}
      
      {/* 推荐课程 */}
      <div className="recommended-section">
        <h2 className="section-title">推荐课程</h2>
        <div className="course-cards recommended">
          {recommendedCourses.map(course => (
            <Card 
              key={course.id} 
              className="course-card recommended"
              onClick={() => handleCourseClick(course.id)}
            >
              <div className="course-tag">推荐</div>
              <div className="course-image-container">
                <img src={course.imageUrl} alt={course.title} className="course-image" />
              </div>
              <h3 className="course-title">{course.title}</h3>
              <p className="course-description">{course.description}</p>
              <div className="course-meta">
                <span className="course-category">{course.category}</span>
                <span className="course-duration">{course.duration}</span>
              </div>
              <div className="course-stats">
                <span className="course-level">{course.level}</span>
                <span className="course-students">{course.students}人学习</span>
              </div>
            </Card>
          ))}
        </div>
      </div>
      
      {/* 所有课程 */}
      <div className="all-courses-section">
        <div className="section-header">
          <h2 className="section-title">全部课程</h2>
          <div className="category-filter">
            <button 
              className={`category-button ${activeCategory === 'all' ? 'active' : ''} ${activeCategory !== 'all' ? 'dark-text-secondary dark-bg-tertiary' : ''}`}
              onClick={() => handleCategoryChange('all')}
            >
              全部
            </button>
            {categories.map(category => (
              <button 
                key={category}
                className={`category-button ${activeCategory === category ? 'active' : ''} ${activeCategory !== category ? 'dark-text-secondary dark-bg-tertiary' : ''}`}
                onClick={() => handleCategoryChange(category)}
              >
                {category}
              </button>
            ))}
          </div>
        </div>
        
        {filteredCourses.length === 0 ? (
          <div className="empty-state">
            没有找到符合条件的课程，请尝试其他搜索条件。
          </div>
        ) : (
          <div className="course-cards all">
            {filteredCourses.map(course => (
              <Card 
                key={course.id} 
                className="course-card"
                onClick={() => handleCourseClick(course.id)}
              >
                <div className="course-image-container">
                  <img src={course.imageUrl} alt={course.title} className="course-image" />
                </div>
                <h3 className="course-title">{course.title}</h3>
                <p className="course-description">{course.description}</p>
                <div className="course-meta">
                  <span className="course-category">{course.category}</span>
                  <span className="course-duration">{course.duration}</span>
                </div>
                <div className="course-stats">
                  <span className="course-level">{course.level}</span>
                  <span className="course-students">{course.students}人学习</span>
                </div>
                {progress[course.id] && (
                  <div className="course-progress-bar small">
                    <div 
                      className="progress-fill"
                      style={{ width: `${progress[course.id].percentage}%` }}
                    ></div>
                  </div>
                )}
              </Card>
            ))}
          </div>
        )}
      </div>
      
      {/* 学习路径 */}
      <div className="learning-paths-section">
        <h2 className="section-title">学习路径</h2>
        <p className="section-description">
          选择适合您的学习路径，系统性地掌握投资知识和技能。
        </p>
        
        <div className="learning-paths">
          <Card className="learning-path-card dark-bg-card dark-shadow-sm">
            <h3 className="path-title dark-text-heading">投资新手入门</h3>
            <p className="path-description dark-text-description">
              适合刚开始投资的用户，涵盖基础投资概念、基金类型和简单的分析方法。
            </p>
            <div className="path-stats">
              <span className="path-courses dark-text-meta">5门课程</span>
              <span className="path-duration dark-text-meta">总时长: 5小时</span>
            </div>
            <button className="path-button">查看路径</button>
          </Card>
          
          <Card className="learning-path-card dark-bg-card dark-shadow-sm">
            <h3 className="path-title dark-text-heading">基金投资进阶</h3>
            <p className="path-description dark-text-description">
              进一步深入基金投资领域，学习更复杂的分析方法和投资策略。
            </p>
            <div className="path-stats">
              <span className="path-courses dark-text-meta">7门课程</span>
              <span className="path-duration dark-text-meta">总时长: 8小时</span>
            </div>
            <button className="path-button">查看路径</button>
          </Card>
          
          <Card className="learning-path-card dark-bg-card dark-shadow-sm">
            <h3 className="path-title dark-text-heading">行为金融学专题</h3>
            <p className="path-description dark-text-description">
              深入了解投资心理和认知偏差，掌握如何避免常见的投资行为陷阱。
            </p>
            <div className="path-stats">
              <span className="path-courses dark-text-meta">4门课程</span>
              <span className="path-duration dark-text-meta">总时长: 6小时</span>
            </div>
            <button className="path-button">查看路径</button>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default LearningCenter;
</file>

<file path="src/pages/cognitive/ScenarioSimulation.jsx">
import React, { useState } from 'react';
import Card from '../../components/common/Card';
import './ScenarioSimulation.css';

/**
 * 场景模拟页面
 * 模拟历史场景，让用户在历史环境中做投资决策，从中学习
 */
const ScenarioSimulation = () => {
  const [scenarios, setScenarios] = useState([
    {
      id: 'scenario-2015-crash',
      title: '2015年股灾模拟',
      description: '体验2015年中国股市大跌的环境，学习如何在市场恐慌时做出理性决策。',
      difficulty: '中等',
      duration: '约30分钟',
      completed: false,
      tags: ['危机处理', '情绪控制', '损失厌恶']
    },
    {
      id: 'scenario-2008-financial-crisis',
      title: '2008年金融危机',
      description: '回到2008年全球金融危机，在市场动荡中寻找投资机会和风险控制方法。',
      difficulty: '高级',
      duration: '约45分钟',
      completed: false,
      tags: ['危机投资', '资产配置', '长期视角']
    },
    {
      id: 'scenario-2020-covid',
      title: '2020年疫情冲击',
      description: '经历2020年疫情对市场的冲击，学习如何应对突发事件带来的市场波动。',
      difficulty: '中等',
      duration: '约40分钟',
      completed: false,
      tags: ['黑天鹅事件', '风险管理', '逆向投资']
    },
    {
      id: 'scenario-bull-market',
      title: '牛市追涨杀跌',
      description: '在上涨趋势中练习控制追涨心理，避免在高位买入和恐慌性抛售。',
      difficulty: '初级',
      duration: '约25分钟',
      completed: true,
      tags: ['追涨心理', '获利回吐', '趋势识别']
    }
  ]);
  
  const [selectedScenario, setSelectedScenario] = useState(null);
  const [loading, setLoading] = useState(false);
  
  const handleSelectScenario = (scenarioId) => {
    const scenario = scenarios.find(s => s.id === scenarioId);
    setSelectedScenario(scenario);
  };
  
  const handleStartScenario = () => {
    setLoading(true);
    // 模拟加载场景
    setTimeout(() => {
      setLoading(false);
      // 这里应该跳转到具体的场景模拟页面
      alert(`开始模拟场景: ${selectedScenario.title}`);
    }, 1500);
  };
  
  const handleCloseScenario = () => {
    setSelectedScenario(null);
  };
  
  return (
    <div className="scenario-simulation-page">
      <div className="page-header">
        <h1 className="page-title dark-text-heading">场景模拟</h1>
        <p className="page-description dark-text-description">
          通过历史市场场景模拟，让您身临其境地体验各种市场环境，在实践中学习如何应对不同的市场状况和克服投资心理偏差。
        </p>
      </div>
      
      {selectedScenario ? (
        <Card className="scenario-detail-card dark-bg-card dark-shadow-sm">
          <button 
            className="back-button dark-text-link"
            onClick={handleCloseScenario}
          >
            返回场景列表
          </button>
          
          <div className="scenario-detail-header">
            <h2 className="scenario-title dark-text-heading">{selectedScenario.title}</h2>
            <div className="scenario-meta">
              <span className="scenario-difficulty dark-text-meta">{selectedScenario.difficulty}</span>
              <span className="scenario-duration dark-text-meta">{selectedScenario.duration}</span>
            </div>
          </div>
          
          <p className="scenario-description dark-text-description">{selectedScenario.description}</p>
          
          <div className="scenario-tags">
            {selectedScenario.tags.map(tag => (
              <span key={tag} className="scenario-tag dark-bg-tertiary dark-text-secondary">{tag}</span>
            ))}
          </div>
          
          <div className="scenario-details">
            <h3 className="section-title dark-text-heading">场景背景</h3>
            <p className="scenario-background dark-text-description">
              {selectedScenario.id === 'scenario-2015-crash' ? 
                '2015年中国股市经历了罕见的大幅波动。6月股指达到高点后，仅用不到一个月时间，上证指数从5178点最低跌至3373点，跌幅超过30%。本场景将让您体验当时的市场环境，在信息不完全的情况下做出投资决策。' : 
              selectedScenario.id === 'scenario-2008-financial-crisis' ?
                '2008年全球金融危机是自大萧条以来最严重的金融危机。危机源于美国次贷市场，迅速蔓延至全球。本场景将模拟这段时期的市场环境，让您在极度恐慌的氛围中权衡风险与机会。' :
              selectedScenario.id === 'scenario-2020-covid' ?
                '2020年初，新冠疫情爆发对全球市场造成剧烈冲击。3月中旬，主要股指在短期内暴跌30%以上，随后在政策刺激下出现反弹。本场景将让您经历这一突发事件的全过程，练习在危机中的决策能力。' :
                '在持续上涨的市场中，投资者容易陷入追涨杀跌的情绪陷阱。本场景将模拟一个典型的牛市周期，帮助您识别自己的追涨心理，并学习如何控制这种冲动。'
              }
            </p>
            
            <h3 className="section-title">学习目标</h3>
            <ul className="learning-objectives">
              <li>体验极端市场环境下的心理压力</li>
              <li>识别并控制恐慌情绪和从众心理</li>
              <li>学习在市场波动中保持理性决策的方法</li>
              <li>掌握危机中的资产配置和风险管理策略</li>
            </ul>
            
            <h3 className="section-title">场景流程</h3>
            <ol className="scenario-steps">
              <li>介绍场景背景和初始市场状况</li>
              <li>提供初始资金和投资组合</li>
              <li>按时间顺序展示市场变化和新闻事件</li>
              <li>在关键时点做出投资决策</li>
              <li>场景结束后分析决策结果和行为特征</li>
              <li>提供针对性的改进建议</li>
            </ol>
          </div>
          
          <div className="scenario-actions">
            <button 
              className="start-button"
              onClick={handleStartScenario}
              disabled={loading}
            >
              {loading ? '准备中...' : '开始模拟'}
            </button>
          </div>
        </Card>
      ) : (
        <div className="scenarios-grid">
          {scenarios.map(scenario => (
            <Card 
              key={scenario.id}
              className={`scenario-card ${scenario.completed ? 'completed' : ''} dark-bg-card dark-shadow-sm`}
              onClick={() => handleSelectScenario(scenario.id)}
            >
              {scenario.completed && (
                <div className="completion-badge">已完成</div>
              )}
              <h2 className="scenario-title dark-text-heading">{scenario.title}</h2>
              <p className="scenario-description dark-text-description">{scenario.description}</p>
              <div className="scenario-footer">
                <div className="scenario-meta">
                  <span className="scenario-difficulty dark-text-meta">{scenario.difficulty}</span>
                  <span className="scenario-duration dark-text-meta">{scenario.duration}</span>
                </div>
                <div className="scenario-tags">
                  {scenario.tags.slice(0, 2).map(tag => (
                    <span key={tag} className="scenario-tag dark-bg-tertiary dark-text-secondary">{tag}</span>
                  ))}
                  {scenario.tags.length > 2 && (
                    <span className="scenario-tag more">+{scenario.tags.length - 2}</span>
                  )}
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default ScenarioSimulation;
</file>

<file path="src/pages/decision/Portfolio.jsx">
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { fetchPortfolioData } from '../../services/mockApi';
import PortfolioChart from '../../components/charts/PortfolioChart';
import Card from '../../components/common/Card';
import './Portfolio.css';

const Portfolio = () => {
  const [portfolioData, setPortfolioData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalValue, setTotalValue] = useState(0);

  useEffect(() => {
    const loadPortfolioData = async () => {
      try {
        setLoading(true);
        const response = await fetchPortfolioData();
        
        if (response.success) {
          setPortfolioData(response.data);
          // 计算总金额
          const total = response.data.reduce((sum, item) => sum + item.value, 0);
          setTotalValue(total);
        } else {
          throw new Error('获取投资组合数据失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadPortfolioData();
  }, []);

  if (loading) {
    return <div className="loading dark-text-tertiary">加载投资组合数据中...</div>;
  }

  if (error) {
    return <div className="error dark-bg-error dark-text-error">{error}</div>;
  }

  return (
    <div className="portfolio-page">
      <div className="page-header">
        <h1 className="page-title dark-text-heading">投资组合分析</h1>
        <p className="page-description dark-text-description">
          全面分析您的资产配置，评估风险收益特征，并提供针对性的优化建议。
        </p>
      </div>

      <div className="portfolio-overview">
        <Card className="portfolio-summary-card dark-bg-card dark-shadow-sm">
          <h2 className="card-title dark-text-heading">资产概览</h2>
          <div className="portfolio-stats">
            <div className="stat-item">
              <span className="stat-label dark-text-meta">总资产</span>
              <span className="stat-value dark-text-bold">¥{totalValue.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label dark-text-meta">基金数量</span>
              <span className="stat-value dark-text-bold">12</span>
            </div>
            <div className="stat-item">
              <span className="stat-label dark-text-meta">年化收益</span>
              <span className="stat-value positive dark-success">+8.2%</span>
            </div>
            <div className="stat-item">
              <span className="stat-label dark-text-meta">波动率</span>
              <span className="stat-value dark-text-bold">12.5%</span>
            </div>
          </div>
        </Card>

        <Card className="portfolio-chart-card dark-bg-card dark-shadow-sm">
          <h2 className="card-title dark-text-heading">资产配置</h2>
          <div className="chart-container">
            <PortfolioChart data={portfolioData} />
          </div>
        </Card>
      </div>

      <Card className="portfolio-details-card dark-bg-card dark-shadow-sm">
        <h2 className="card-title dark-text-heading">资产明细</h2>
        <table className="portfolio-table dark-border">
          <thead>
            <tr className="dark-table-header">
              <th>基金类型</th>
              <th>金额 (元)</th>
              <th>占比 (%)</th>
              <th>风险等级</th>
              <th>年化收益率</th>
            </tr>
          </thead>
          <tbody>
            {portfolioData.map((item, index) => (
              <tr key={index} className="dark-table-row-hover">
                <td className="dark-text-primary">{item.name}</td>
                <td className="dark-text-primary">¥{item.value.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</td>
                <td className="dark-text-primary">{item.percent.toFixed(1)}%</td>
                <td>
                  <span className={`risk-level risk-${getRiskLevel(item.name)}`}>
                    {getRiskLevelText(item.name)}
                  </span>
                </td>
                <td className={`${getReturnClass(item.name)} dark-success`}>
                  {getReturnRate(item.name)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </Card>

      <div className="portfolio-analysis">
        <Card className="portfolio-analysis-card dark-bg-card dark-shadow-sm">
          <h2 className="card-title dark-text-heading">投资组合分析</h2>
          <div className="analysis-content dark-text-description">
            <p>您的投资组合整体表现良好，但存在以下几个优化空间：</p>
            <ul className="analysis-points">
              <li>
                <span className="analysis-highlight dark-text-bold">资产集中度较高</span> - 股票型基金占比接近50%，在市场下行时可能面临较大波动。
              </li>
              <li>
                <span className="analysis-highlight dark-text-bold">债券配置不足</span> - 债券类资产可以在市场波动时提供稳定性，建议适当增加。
              </li>
              <li>
                <span className="analysis-highlight dark-text-bold">缺乏国际市场配置</span> - 考虑增加部分海外资产以提升地域多元化。
              </li>
            </ul>
          </div>
          <div className="action-buttons">
            <Link to="/decision/rebalance" className="btn primary">
              查看再平衡建议
            </Link>
            <Link to="/cognitive/chat" className="btn secondary dark-bg-tertiary dark-text-primary dark-hover">
              咨询AI顾问
            </Link>
          </div>
        </Card>
      </div>
    </div>
  );
};

// 辅助函数 - 根据基金类型获取风险等级
function getRiskLevel(fundType) {
  switch (fundType) {
    case '股票型基金':
      return 'high';
    case '混合型基金':
      return 'medium';
    case '债券型基金':
      return 'low';
    case '货币市场基金':
      return 'verylow';
    default:
      return 'medium';
  }
}

// 辅助函数 - 获取风险等级文本
function getRiskLevelText(fundType) {
  switch (fundType) {
    case '股票型基金':
      return '高';
    case '混合型基金':
      return '中';
    case '债券型基金':
      return '低';
    case '货币市场基金':
      return '极低';
    default:
      return '中';
  }
}

// 辅助函数 - 获取收益率
function getReturnRate(fundType) {
  switch (fundType) {
    case '股票型基金':
      return '+12.4%';
    case '混合型基金':
      return '+8.5%';
    case '债券型基金':
      return '+4.2%';
    case '货币市场基金':
      return '+1.8%';
    default:
      return '+0.0%';
  }
}

// 辅助函数 - 获取收益率CSS类
function getReturnClass(fundType) {
  switch (fundType) {
    case '股票型基金':
    case '混合型基金':
    case '债券型基金':
    case '货币市场基金':
      return 'positive';
    default:
      return '';
  }
}

export default Portfolio;
</file>

<file path="src/pages/decision/PortfolioRebalance.jsx">
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import PropTypes from 'prop-types';
import Card from '../../components/common/Card';
import AllocationComparisonChart from '../../components/rebalance/AllocationComparisonChart';
import { fetchRebalanceRecommendations } from '../../services/mockApi';
import './PortfolioRebalance.css';
import '../../components/rebalance/Rebalance.css';

/**
 * 投资组合再平衡组件
 * 显示投资组合的当前配置与目标配置的对比，以及调整建议
 * @param {Object} props - 组件属性
 * @param {Object} props.rebalanceData - 再平衡数据
 */
const PortfolioRebalance = ({ rebalanceData }) => {
  // 如果没有数据，显示提示信息
  if (!rebalanceData) {
    return <div className="empty-state">暂无再平衡数据</div>;
  }

  return (
    <div className="portfolio-rebalance">
      {/* 再平衡理由 */}
      <div className="rebalance-rationale">
        <h3 className="subsection-title">再平衡原因</h3>
        <p className="rationale-text">{rebalanceData.rationale}</p>
      </div>

      {/* 资产配置对比 */}
      <div className="allocation-comparison-section">
        <h3 className="subsection-title">当前配置 vs 目标配置</h3>
        <div className="chart-container">
          <AllocationComparisonChart data={rebalanceData.currentAllocation} />
        </div>
        
        <div className="allocation-table-container">
          <table className="allocation-table">
            <thead>
              <tr>
                <th>资产类别</th>
                <th>当前配置 (%)</th>
                <th>目标配置 (%)</th>
                <th>差异 (%)</th>
                <th>调整方向</th>
              </tr>
            </thead>
            <tbody>
              {rebalanceData.currentAllocation.map((item) => (
                <tr key={item.category}>
                  <td>{item.category}</td>
                  <td>{item.current.toFixed(1)}</td>
                  <td>{item.target.toFixed(1)}</td>
                  <td className={Math.abs(item.current - item.target) > 5 ? 'significant-diff' : ''}>
                    {(item.current - item.target).toFixed(1)}
                  </td>
                  <td>
                    <span className={`action-direction ${item.action}`}>
                      {item.action === 'increase' ? '增加' : 
                       item.action === 'reduce' ? '减少' : '维持'}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* 具体调整建议 */}
      <div className="specific-recommendations-section">
        <h3 className="subsection-title">具体调整建议</h3>
        <div className="recommendations-list">
          {rebalanceData.specificRecommendations.map((recommendation, index) => (
            <div key={index} className={`recommendation-card ${recommendation.action}`}>
              <div className="recommendation-header">
                <div>
                  <span className="fund-name">{recommendation.fund}</span>
                  <span className="fund-code">{recommendation.code}</span>
                </div>
                <div className={`action-badge ${recommendation.action}`}>
                  {recommendation.action === 'increase' ? '买入' : 
                   recommendation.action === 'reduce' ? '卖出' : '持有'}
                </div>
              </div>
              
              <div className="recommendation-values">
                <div className="value-item">
                  <span className="value-label">当前市值</span>
                  <span className="value-number">
                    ¥{recommendation.currentValue.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}
                  </span>
                </div>
                <div className="value-arrow">→</div>
                <div className="value-item">
                  <span className="value-label">目标市值</span>
                  <span className="value-number">
                    ¥{recommendation.targetValue.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}
                  </span>
                </div>
              </div>
              
              <div className="recommendation-amount">
                <span className="amount-label">
                  {recommendation.action === 'increase' ? '买入金额' : 
                   recommendation.action === 'reduce' ? '卖出金额' : ''}
                </span>
                <span className="amount-value">
                  {recommendation.action !== 'maintain' && 
                   `¥${recommendation.amount.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}`}
                </span>
              </div>
              
              <div className="recommendation-reason">
                <span className="reason-label">原因：</span>
                <span className="reason-text">{recommendation.reason}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* 预期影响 */}
      <div className="expected-impact-section">
        <h3 className="subsection-title">调整后预期效果</h3>
        <div className="impact-cards">
          <div className="impact-card">
            <div className="impact-icon risk-icon">🛡️</div>
            <div className="impact-content">
              <h4 className="impact-title">风险影响</h4>
              <p className="impact-text">{rebalanceData.expectedImpact.risk}</p>
            </div>
          </div>
          <div className="impact-card">
            <div className="impact-icon return-icon">📈</div>
            <div className="impact-content">
              <h4 className="impact-title">收益影响</h4>
              <p className="impact-text">{rebalanceData.expectedImpact.return}</p>
            </div>
          </div>
          <div className="impact-card">
            <div className="impact-icon balance-icon">⚖️</div>
            <div className="impact-content">
              <h4 className="impact-title">风险调整后收益</h4>
              <p className="impact-text">{rebalanceData.expectedImpact.sharpeRatio}</p>
            </div>
          </div>
        </div>
      </div>

      {/* 操作按钮 */}
      <div className="rebalance-actions">
        <button className="action-button primary">应用再平衡建议</button>
        <button className="action-button secondary">导出再平衡方案</button>
      </div>
    </div>
  );
};

// 添加PropTypes验证
PortfolioRebalance.propTypes = {
  rebalanceData: PropTypes.shape({
    rationale: PropTypes.string.isRequired,
    currentAllocation: PropTypes.arrayOf(
      PropTypes.shape({
        category: PropTypes.string.isRequired,
        current: PropTypes.number.isRequired,
        target: PropTypes.number.isRequired,
        action: PropTypes.string.isRequired,
        amount: PropTypes.number.isRequired
      })
    ).isRequired,
    specificRecommendations: PropTypes.arrayOf(
      PropTypes.shape({
        fund: PropTypes.string.isRequired,
        code: PropTypes.string.isRequired,
        currentValue: PropTypes.number.isRequired,
        targetValue: PropTypes.number.isRequired,
        action: PropTypes.string.isRequired,
        amount: PropTypes.number.isRequired,
        reason: PropTypes.string.isRequired
      })
    ).isRequired,
    expectedImpact: PropTypes.shape({
      risk: PropTypes.string.isRequired,
      return: PropTypes.string.isRequired,
      sharpeRatio: PropTypes.string.isRequired
    }).isRequired
  })
};

/**
 * 投资组合再平衡页面
 * 展示当前投资组合与目标配置的对比，并提供调整建议
 */
const PortfolioRebalancePage = () => {
  const [rebalanceData, setRebalanceData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // 获取再平衡建议数据
  useEffect(() => {
    const loadRebalanceData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetchRebalanceRecommendations();
        
        if (response.success) {
          setRebalanceData(response.data);
        } else {
          throw new Error('获取再平衡建议失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadRebalanceData();
  }, []);
  
  return (
    <div className="portfolio-rebalance-page">
      <div className="page-header">
        <h1 className="page-title">投资组合再平衡</h1>
        <p className="page-description">
          智能分析您的投资组合与目标配置的差异，提供详细的再平衡建议，帮助您优化资产配置以获得更好的风险调整后收益。
        </p>
        <div className="page-actions">
          <Link to="/decision/portfolio" className="back-link">
            返回投资组合分析
          </Link>
        </div>
      </div>
      
      <Card className="rebalance-card">
        {loading ? (
          <div className="loading">加载再平衡建议中...</div>
        ) : error ? (
          <div className="error">{error}</div>
        ) : (
          <PortfolioRebalance rebalanceData={rebalanceData} />
        )}
      </Card>
      
      <Card className="rebalance-help-card">
        <h2 className="card-title">什么是投资组合再平衡？</h2>
        <p className="help-text">
          投资组合再平衡是一种定期调整投资组合中不同资产类别比例的策略，旨在使投资组合回归到原定的目标资产配置。
          随着市场波动，部分资产可能表现较好而占比增加，而其他资产占比减少，导致整体风险和收益特性发生变化。
          定期再平衡可以帮助控制风险，保持投资纪律，并可能提高长期风险调整后收益。
        </p>
        <h3 className="help-subtitle">再平衡的好处</h3>
        <ul className="help-list">
          <li>控制投资组合风险水平</li>
          <li>强制执行"低买高卖"策略</li>
          <li>保持投资纪律，避免情绪化决策</li>
          <li>使投资组合始终符合您的风险承受能力和投资目标</li>
        </ul>
        <div className="learn-more-link">
          <Link to="/cognitive/learning/rebalancing">了解更多关于再平衡的知识</Link>
        </div>
      </Card>
    </div>
  );
};

export default PortfolioRebalancePage;
</file>

<file path="src/pages/information/NewsAnalysis.jsx">
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { fetchNewsAnalysis } from '../../services/mockApi';
import './NewsAnalysis.css';

const NewsAnalysis = () => {
  const [news, setNews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const { id } = useParams();
  
  // 加载新闻分析数据
  useEffect(() => {
    const loadNews = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // 调用API获取新闻数据
        const response = await fetchNewsAnalysis();
        
        if (response.success) {
          setNews(response.data);
        } else {
          throw new Error('获取新闻分析数据失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadNews();
  }, []);
  
  // 如果正在加载，显示加载状态
  if (loading) {
    return <div className="loading">加载新闻分析数据中...</div>;
  }
  
  // 如果加载出错，显示错误信息
  if (error) {
    return <div className="error">{error}</div>;
  }
  
  // 列表页面
  return (
    <div className="news-list-page">
      <div className="page-header">
        <h1 className="page-title">新闻解读</h1>
        <p className="page-description">
          智能分析市场热点新闻，深入解读其对投资市场的影响，帮助您把握投资方向。
        </p>
      </div>
      
      <div className="news-container">
        {news.map(item => (
          <div key={item.id} className="news-card">
            <div className="news-header">
              <h2 className="news-title">{item.title}</h2>
              <div className="news-meta">
                <span className="news-source">{item.source}</span>
                <span className="news-date">{item.date}</span>
              </div>
            </div>
            
            <p className="news-summary">{item.summary}</p>
            
            <div className="news-impact">
              <h3 className="impact-title">投资影响</h3>
              <p className="impact-content">{item.impact}</p>
            </div>
            
            {item.relevantFunds && (
              <div className="relevant-funds">
                <h3 className="funds-title">相关基金</h3>
                <div className="funds-list">
                  {item.relevantFunds.map((fund, idx) => (
                    <span key={idx} className="fund-tag">{fund}</span>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
      
      {/* 未来分页组件位置 */}
      <div className="pagination-placeholder">
        <p>未来将实现分页功能</p>
      </div>
    </div>
  );
};

export default NewsAnalysis;
</file>

<file path="src/pages/information/PolicyAnalysis.jsx">
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { fetchPolicyInterpretations } from '../../services/mockApi';
import './PolicyAnalysis.css';

const PolicyAnalysis = () => {
  const [policies, setPolicies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const { id } = useParams();
  
  // 加载政策解读数据
  useEffect(() => {
    const loadPolicies = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // 调用API获取政策数据
        const response = await fetchPolicyInterpretations();
        
        if (response.success) {
          setPolicies(response.data);
        } else {
          throw new Error('获取政策解读数据失败');
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadPolicies();
  }, []);
  
  // 如果正在加载，显示加载状态
  if (loading) {
    return <div className="loading">加载政策解读数据中...</div>;
  }
  
  // 如果加载出错，显示错误信息
  if (error) {
    return <div className="error">{error}</div>;
  }
  
  // 如果存在ID参数，则显示详情页，否则显示列表页
  if (id) {
    const policy = policies.find(item => item.id.toString() === id);
    
    if (!policy) {
      return <div className="error">未找到相关政策解读</div>;
    }
    
    return (
      <div className="policy-detail-page">
        <div className="page-header">
          <button 
            className="back-button" 
            onClick={() => navigate('/information/policy')}
          >
            返回列表
          </button>
          <h1 className="page-title">{policy.title}</h1>
          <div className="policy-meta">
            <span className="policy-issuer">{policy.issuer}</span>
            <span className="policy-date">{policy.date}</span>
          </div>
        </div>
        
        <div className="policy-content">
          <div className="policy-card">
            <h2 className="section-title">政策摘要</h2>
            <p className="policy-summary">{policy.summary}</p>
          </div>
          
          <div className="policy-card">
            <h2 className="section-title">影响分析</h2>
            <div className="policy-analysis">{policy.analysis}</div>
            
            <h3 className="subsection-title">行业影响</h3>
            <div className="sector-impacts">
              {policy.impact.map((item, index) => (
                <div 
                  key={index} 
                  className={`impact-item impact-${item.effect}`}
                >
                  <div className="impact-header">
                    <h4 className="sector-name">{item.sector}</h4>
                    <span className="impact-effect">{
                      item.effect === 'positive' ? '利好' :
                      item.effect === 'negative' ? '利空' : '中性'
                    }</span>
                  </div>
                  <p className="impact-description">{item.description}</p>
                </div>
              ))}
            </div>
          </div>
          
          <div className="policy-card">
            <h2 className="section-title">相关基金推荐</h2>
            <div className="related-funds">
              {policy.relevantFunds.map((fund, index) => (
                <div key={index} className="fund-item">
                  <span className="fund-name">{fund}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  // 列表页
  return (
    <div className="policy-list-page">
      <div className="page-header">
        <h1 className="page-title">政策解读</h1>
        <p className="page-description">
          智能分析最新政策动向，解读其对不同行业和基金的影响，助您把握投资机会。
        </p>
      </div>
      
      <div className="policies-container">
        {policies.map(policy => (
          <div 
            key={policy.id}
            className="policy-card preview"
            onClick={() => navigate(`/information/policy/${policy.id}`)}
          >
            <div className="policy-header">
              <h2 className="policy-title">{policy.title}</h2>
              <div className="policy-meta">
                <span className="policy-issuer">{policy.issuer}</span>
                <span className="policy-date">{policy.date}</span>
              </div>
            </div>
            
            <p className="policy-summary">{policy.summary}</p>
            
            <div className="policy-impact-preview">
              <h3 className="impact-preview-title">主要影响</h3>
              <div className="impact-tags">
                {policy.impact.map((impact, idx) => (
                  <span 
                    key={idx} 
                    className={`impact-tag ${impact.effect}`}
                  >
                    {impact.sector}
                  </span>
                )).slice(0, 3)}
                {policy.impact.length > 3 && (
                  <span className="impact-tag more">+{policy.impact.length - 3}</span>
                )}
              </div>
            </div>
            
            <div className="policy-card-footer">
              <button className="view-detail-button">查看详情</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PolicyAnalysis;
</file>

<file path="src/pages/learning-center/CourseDetail.css">
/* 导入基础页面样式和可组合类 */
@import '../css-base.css';
@import '../../styles/composable-classes.css';

/* 基础页面布局 */
.course-detail-page {
  /* 使用布局类 */
  max-width: var(--page-container-width);
  margin: 0 auto;
  padding: var(--page-container-padding-y) var(--page-container-padding-x);
  padding-top: var(--page-top-spacing);
  width: 100%;
}

/* 页面头部区域 */
.course-header {
  margin-bottom: var(--header-block-margin-bottom);
}

.course-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.course-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--spacing-md);
  max-width: var(--content-narrow-width);
}

/* 返回按钮 */
.back-button {
  display: inline-flex;
  align-items: center;
  color: var(--primary-color);
  margin-bottom: var(--spacing-md);
  padding: 0;
  background: none;
  border: none;
  cursor: pointer;
  font-size: var(--font-size-sm);
}

.back-button:hover {
  text-decoration: underline;
}

.back-button svg {
  margin-right: var(--spacing-xs);
}

/* 课程信息和图片区域 */
.course-content-layout {
  display: grid;
  grid-template-columns: 1fr 300px;
  gap: var(--spacing-lg);
}

.course-main-content {
  /* 主要内容区域 */
}

.course-image-container {
  max-width: 300px;
  margin-bottom: var(--spacing-md);
}

.course-image {
  width: 100%;
  height: auto;
  border-radius: var(--border-radius-md);
}

/* 课程元数据 */
.course-meta {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-sm);
  margin-bottom: var(--spacing-md);
}

.course-category,
.course-level,
.course-duration {
  display: inline-block;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  background-color: var(--neutral-100);
  color: var(--text-secondary);
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-lg)) {
  .course-content-layout {
    grid-template-columns: 1fr;
  }
  
  .course-sidebar {
    order: -1; /* 在移动视图中将侧边栏移到顶部 */
  }
  
  .course-image-container {
    max-width: 100%;
  }
}
</file>

<file path="src/pages/css-base.css">
/* 页面基础样式 - 供所有页面扩展和使用 */

/* 利用CSS变量和全局定义，不再需要命名空间 */
/* 基础页面容器 */
.base-page {
  max-width: var(--page-container-width);
  margin: 0 auto;
  padding: var(--page-container-padding-y) var(--page-container-padding-x);
  padding-top: var(--page-top-spacing);
  width: 100%;
}

/* 基础页面头部 */
.base-page-header {
  margin-bottom: var(--header-block-margin-bottom);
}

.base-page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--header-title-margin-bottom);
  color: var(--text-primary);
}

.base-page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: var(--content-narrow-width);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--header-description-margin-bottom);
}

/* 基础区块 */
.base-section {
  margin-bottom: var(--section-margin-bottom);
}

.base-section-title {
  font-size: var(--font-size-xl);
  margin-bottom: var(--section-title-margin-bottom);
  color: var(--text-primary);
}

.base-subsection {
  margin-bottom: var(--subsection-margin-bottom);
}

.base-subsection-title {
  font-size: var(--font-size-lg);
  margin-bottom: var(--subsection-title-margin-bottom);
  color: var(--text-primary);
}

/* 卡片组件 */
.base-card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  margin-bottom: var(--card-margin-bottom);
}

.base-card-title {
  font-size: var(--font-size-lg);
  margin-top: 0;
  margin-bottom: var(--card-title-margin-bottom);
  color: var(--text-primary);
}

/* 基础网格布局 */
.base-grid {
  display: grid;
  gap: var(--spacing-lg);
}

.base-grid-2 {
  grid-template-columns: repeat(2, 1fr);
}

.base-grid-3 {
  grid-template-columns: repeat(3, 1fr);
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-md)) {
  .base-page {
    padding: var(--page-container-padding-y-mobile) var(--page-container-padding-x-mobile);
    padding-top: var(--page-top-spacing);
  }
  
  .base-grid-2, .base-grid-3 {
    grid-template-columns: 1fr;
  }
  
  .base-card {
    padding: var(--card-padding-mobile);
  }
  
  .base-section {
    margin-bottom: var(--section-margin-bottom-mobile);
  }
}

/* 深色模式调整 */
.dark-theme .base-page-title,
.dark-theme .base-section-title,
.dark-theme .base-subsection-title,
.dark-theme .base-card-title {
  color: var(--text-heading);
}

/* 深色模式通用辅助类 */

/* 背景色辅助类 */
.dark-theme .dark-bg-card {
  background-color: var(--card-background);
}

.dark-theme .dark-bg-primary {
  background-color: var(--neutral-50);
}

.dark-theme .dark-bg-secondary {
  background-color: var(--neutral-100);
}

.dark-theme .dark-bg-tertiary {
  background-color: var(--neutral-200);
}

.dark-theme .dark-bg-input {
  background-color: var(--input-bg);
}

.dark-theme .dark-bg-dropdown {
  background-color: var(--dropdown-background);
}

.dark-theme .dark-bg-modal {
  background-color: var(--modal-background);
}

.dark-theme .dark-bg-tooltip {
  background-color: var(--tooltip-background);
}

/* 文本颜色辅助类 */
.dark-theme .dark-text-heading {
  color: var(--text-heading);
}

.dark-theme .dark-text-title {
  color: var(--text-title);
}

.dark-theme .dark-text-primary {
  color: var(--text-primary);
}

.dark-theme .dark-text-secondary {
  color: var(--text-secondary);
}

.dark-theme .dark-text-tertiary {
  color: var(--text-tertiary);
}

.dark-theme .dark-text-meta {
  color: var(--text-meta);
}

.dark-theme .dark-text-hint {
  color: var(--text-hint);
}

.dark-theme .dark-text-link {
  color: var(--text-link);
}

.dark-theme .dark-text-description {
  color: var(--text-description);
}

.dark-theme .dark-text-bold {
  color: var(--text-bold);
}

/* 边框辅助类 */
.dark-theme .dark-border {
  border-color: var(--border-color);
}

.dark-theme .dark-border-light {
  border-color: var(--neutral-200);
}

.dark-theme .dark-border-accent {
  border-color: var(--primary-color);
}

.dark-theme .dark-border-input {
  border-color: var(--input-border);
}

/* 功能性颜色辅助类 */
.dark-theme .dark-success {
  color: var(--success-color);
}

.dark-theme .dark-error {
  color: var(--error-color);
}

.dark-theme .dark-warning {
  color: var(--warning-color);
}

.dark-theme .dark-info {
  color: var(--info-color);
}

/* 背景功能色辅助类 */
.dark-theme .dark-bg-success {
  background-color: rgba(45, 203, 146, 0.2);
}

.dark-theme .dark-bg-error {
  background-color: rgba(244, 115, 115, 0.2);
}

.dark-theme .dark-bg-warning {
  background-color: rgba(245, 186, 69, 0.2);
}

.dark-theme .dark-bg-info {
  background-color: rgba(56, 209, 230, 0.2);
}

.dark-theme .dark-bg-accent {
  background-color: rgba(178, 146, 250, 0.2);
}

.dark-theme .dark-bg-primary-light {
  background-color: var(--primary-bg);
}

/* 交互状态辅助类 */
.dark-theme .dark-hover:hover {
  background-color: var(--neutral-200);
}

.dark-theme .dark-focus:focus {
  border-color: var(--input-focus-border);
  box-shadow: 0 0 0 3px rgba(66, 135, 245, 0.3);
}

.dark-theme .dark-active {
  background-color: var(--primary-bg);
}

/* 阴影辅助类 */
.dark-theme .dark-shadow-sm {
  box-shadow: var(--shadow-sm);
}

.dark-theme .dark-shadow-md {
  box-shadow: var(--shadow-md);
}

.dark-theme .dark-shadow-lg {
  box-shadow: var(--shadow-lg);
}

/* 表格相关辅助类 */
.dark-theme .dark-table-header {
  background-color: var(--table-header-bg);
}

.dark-theme .dark-table-row-hover:hover {
  background-color: var(--table-row-hover);
}

/* 表单元素辅助类 */
.dark-theme .dark-input {
  background-color: var(--input-bg);
  border-color: var(--input-border);
  color: var(--input-text);
}

.dark-theme .dark-input:focus {
  border-color: var(--input-focus-border);
}
</file>

<file path="src/pages/ForgotPassword.jsx">
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './Auth.css';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  
  const handleChange = (e) => {
    setEmail(e.target.value);
    setError('');
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // 验证邮箱
    if (!email.trim()) {
      setError('请输入您的邮箱地址');
      return;
    }
    
    if (!/\S+@\S+\.\S+/.test(email)) {
      setError('请输入有效的邮箱地址');
      return;
    }
    
    setLoading(true);
    
    // 模拟API调用
    setTimeout(() => {
      setLoading(false);
      setSuccess(true);
    }, 1500);
  };
  
  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1 className="auth-title">FundGene</h1>
            <p className="auth-subtitle">基于AI的基金投资助手</p>
          </div>
          
          {success ? (
            <div className="auth-form">
              <div className="success-message">
                <h2 className="form-title">邮件已发送</h2>
                <p className="success-text">
                  重置密码的链接已发送到您的邮箱。<br />
                  请查收邮件并按照指引完成密码重置。
                </p>
                
                <div className="auth-links">
                  <Link to="/login" className="back-to-login">返回登录</Link>
                </div>
              </div>
            </div>
          ) : (
            <form className="auth-form" onSubmit={handleSubmit}>
              <h2 className="form-title">找回密码</h2>
              <p className="form-description">
                请输入您的邮箱地址，我们将向您发送重置密码的链接。
              </p>
              
              {error && <div className="form-error">{error}</div>}
              
              <div className="form-group">
                <label htmlFor="email">电子邮件</label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={handleChange}
                  disabled={loading}
                  autoComplete="email"
                  placeholder="请输入您的注册邮箱"
                  autoFocus
                />
              </div>
              
              <button 
                type="submit" 
                className="auth-button"
                disabled={loading}
              >
                {loading ? '提交中...' : '发送重置链接'}
              </button>
              
              <div className="auth-links">
                <p>
                  记起密码了? <Link to="/login">返回登录</Link>
                </p>
              </div>
            </form>
          )}
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;
</file>

<file path="src/pages/NotFound.css">
/* 导入基础页面样式和可组合类 */
@import './css-base.css';
@import '../styles/composable-classes.css';

/* 404页面特定样式 */
.not-found {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-xl);
  text-align: center;
  background-color: var(--background-light);
}

.not-found-content {
  max-width: 600px;
  animation: fadeIn 0.6s ease-in-out;
}

.not-found h1 {
  font-size: var(--font-size-4xl);
  color: var(--primary-color);
  margin-bottom: var(--spacing-md);
  font-weight: var(--font-weight-bold);
}

.not-found h2 {
  font-size: var(--font-size-2xl);
  color: var(--text-primary);
  margin-bottom: var(--spacing-lg);
  font-weight: var(--font-weight-medium);
}

.not-found p {
  font-size: var(--font-size-md);
  color: var(--text-secondary);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--spacing-lg);
}

.not-found .back-link {
  display: inline-block;
  padding: var(--spacing-sm) var(--spacing-lg);
  background-color: var(--primary-color);
  color: white;
  border-radius: var(--border-radius-md);
  text-decoration: none;
  font-weight: var(--font-weight-medium);
  transition: var(--transition-default);
}

.not-found .back-link:hover {
  background-color: var(--primary-dark);
  text-decoration: none;
}

.not-found-image {
  max-width: 300px;
  margin-bottom: var(--spacing-xl);
}

.not-found-suggestions {
  margin-top: var(--spacing-xl);
  padding: var(--spacing-lg);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-lg);
  text-align: left;
}

.not-found-suggestions h3 {
  font-size: var(--font-size-lg);
  color: var(--text-primary);
  margin-bottom: var(--spacing-md);
}

.suggestions-list {
  list-style-type: disc;
  padding-left: var(--spacing-xl);
}

.suggestions-list li {
  margin-bottom: var(--spacing-sm);
  color: var(--text-secondary);
}

.suggestions-list a {
  color: var(--primary-color);
  text-decoration: none;
}

.suggestions-list a:hover {
  text-decoration: underline;
}

/* 动画效果 */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-md)) {
  .not-found h1 {
    font-size: var(--font-size-3xl);
  }
  
  .not-found h2 {
    font-size: var(--font-size-xl);
  }
  
  .not-found-image {
    max-width: 200px;
  }
}

/* 深色模式调整 */
.dark-theme .not-found {
  background-color: var(--background-dark);
}

.dark-theme .not-found h1 {
  color: var(--primary-light);
}

.dark-theme .not-found h2 {
  color: var(--text-heading);
}

.dark-theme .not-found p {
  color: var(--text-secondary);
}

.dark-theme .not-found-suggestions {
  background-color: var(--neutral-800);
}

.dark-theme .not-found-suggestions h3 {
  color: var(--text-heading);
}

.dark-theme .suggestions-list li {
  color: var(--text-secondary);
}

.dark-theme .suggestions-list a {
  color: var(--primary-light);
}
</file>

<file path="src/pages/NotFound.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import './NotFound.css';

const NotFound = () => {
  return (
    <div className="not-found">
      <div className="not-found-content">
        <h1>404</h1>
        <h2>页面未找到</h2>
        <p>您访问的页面不存在或已被移除。</p>
        <Link to="/" className="not-found-link">返回首页</Link>
      </div>
    </div>
  );
};

export default NotFound;
</file>

<file path="src/services/baseService.js">
/**
 * 基础服务
 * 提供通用的API调用方法和错误处理
 */
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api';

// 创建axios实例
export const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// 请求拦截器
apiClient.interceptors.request.use(
  config => {
    // 从localStorage获取token
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  error => Promise.reject(error)
);

// 响应拦截器
apiClient.interceptors.response.use(
  response => response.data,
  error => {
    // 统一错误处理
    console.error('API错误:', error.response || error);
    return Promise.reject(error);
  }
);

// 模拟延迟 - 使用Vite环境变量方式
export const delay = (ms) => 
  import.meta.env.DEV
    ? new Promise(resolve => setTimeout(resolve, ms)) 
    : Promise.resolve();

// 辅助函数：将模拟数据包装成API响应格式
export const mockSuccess = (data, delayMs = 500) => 
  delay(delayMs).then(() => ({
    success: true,
    data
  }));

export const mockError = (message, delayMs = 500) =>
  delay(delayMs).then(() => Promise.reject({
    success: false,
    message
  }));
</file>

<file path="src/services/behaviorService.js">
/**
 * 行为矫正服务
 * 该文件用于处理与行为矫正相关的API调用
 * 目前使用模拟数据，未来可替换为实际API调用
 */
import { delay } from './baseService';

/**
 * 获取用户行为画像
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回行为画像数据
 */
export const getUserBehaviorProfile = async (userId) => {
  // 模拟API请求延迟
  await delay(800);
  
  // 返回模拟数据
  return {
    success: true,
    data: {
      // 风险评估
      riskScore: 68,
      riskLevel: '中等',
      riskDescription: '您的风险承受能力评级为中等，适合配置多元化的投资组合，包含一定比例的权益类资产。',
      
      // 交易风格
      tradeFrequency: '中频',
      holdingPeriod: '3-6个月',
      volatilityTolerance: '中等',
      diversificationLevel: '较低',
      tradeStyleAnalysis: '您的交易频率适中，但投资分散度较低，主要集中在少数几只基金上。建议适当增加不同类型和风格的基金，降低非系统性风险。',
      
      // 行为雷达图数据
      behaviorRadarData: [
        { subject: '损失厌恶', score: 75 },
        { subject: '过度自信', score: 60 },
        { subject: '从众心理', score: 30 },
        { subject: '锚定效应', score: 55 },
        { subject: '处置效应', score: 65 },
        { subject: '心理账户', score: 45 }
      ],
      
      // 认知偏差
      detectedBiases: [
        {
          name: '损失厌恶',
          score: 75,
          severity: 'high',
          description: '您对亏损的反应比同等收益的喜悦感受更强烈，这可能导致您在面临亏损时不愿意止损，同时又过早兑现盈利。',
          suggestions: [
            '设置自动止损点，避免情绪化决策',
            '制定投资计划并严格执行',
            '将注意力从短期波动转移到长期价值上'
          ]
        },
        {
          name: '过度自信',
          score: 60,
          severity: 'medium',
          description: '您可能高估自己的判断和预测能力，这可能导致过度交易或过度集中投资。',
          suggestions: [
            '定期回顾和评估过去的投资决策',
            '考虑相反观点和潜在风险',
            '增加投资组合多样性'
          ]
        },
        {
          name: '处置效应',
          score: 65,
          severity: 'medium',
          description: '您倾向于过早卖出盈利的资产，而持有亏损的资产过久，这可能导致收益减少并增加风险。',
          suggestions: [
            '定期评估所有持仓，而不仅关注亏损部分',
            '设置明确的买入和卖出规则',
            '考虑税收因素进行投资决策'
          ]
        },
        {
          name: '从众心理',
          score: 30,
          severity: 'low',
          description: '您很少跟随市场热点或追逐热门基金，表现出较好的独立思考能力。',
          suggestions: [
            '继续保持独立思考的习惯',
            '适度关注市场共识，但做决策时应基于自己的分析'
          ]
        }
      ],
      
      // 知识评估
      knowledgeScore: 72,
      knowledgeDescription: '您的投资知识水平良好，对基本投资概念和产品特性有较清晰的理解，但在某些专业领域仍有提升空间。',
      strengths: ['基金类型与特点', '基础市场分析', '分散投资原则'],
      weaknesses: ['衍生品知识', '债券久期概念', '海外市场投资'],
      
      // 行为改进计划
      actionPlan: [
        {
          title: '克服损失厌恶',
          priority: '高优先级',
          description: '您的损失厌恶程度较高，需要优先解决这一问题以避免不必要的损失或错失机会。',
          steps: [
            '制定明确的止损策略并严格执行',
            '投资前预设退出条件',
            '逐步培养接受小额亏损的心态',
            '参加损失厌恶特训课程'
          ]
        },
        {
          title: '降低投资集中度',
          priority: '中优先级',
          description: '您的投资较为集中，增加了非系统性风险。',
          steps: [
            '重新评估资产配置方案',
            '增加不同类型、风格的基金',
            '考虑增加海外资产配置',
            '定期检查和调整投资组合分散度'
          ]
        },
        {
          title: '提升投资知识',
          priority: '中优先级',
          description: '提升在固定收益和海外市场方面的知识，以扩展投资视野。',
          steps: [
            '完成债券投资基础课程',
            '学习海外市场投资基础知识',
            '参与每周的市场分析讨论'
          ]
        }
      ]
    }
  };
};

/**
 * 获取用户行为提醒
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回行为提醒数据
 */
export const getUserBehaviorAlerts = async (userId) => {
  // 模拟API请求延迟
  await delay(700);
  
  // 返回模拟数据
  return {
    success: true,
    data: [
      {
        id: 'alert-001',
        title: '检测到可能的追涨行为',
        behavior: '您近期连续买入了多只大幅上涨的基金，这可能是追涨心理的体现。持续的追涨行为可能导致在高点买入，增加投资风险。',
        marketContext: '近期市场热点频繁切换，多个板块出现较大涨幅，但市场整体估值已处于历史较高水平，波动风险加大。',
        suggestion: '建议您回顾投资计划，避免盲目追涨。考虑分批买入而非一次性投入，并关注基金的长期业绩和基本面，而非短期涨幅。',
        priority: 'high',
        time: '2023-12-18 10:25',
        read: false
      },
      {
        id: 'alert-002',
        title: '持仓过度集中风险提醒',
        behavior: '您的投资组合中，超过60%的资产集中在科技主题基金，行业集中度过高可能增加投资组合的波动性。',
        marketContext: '科技板块近期表现强势，但估值已处于历史高位，波动风险加大。同时，市场轮动迹象明显，防御性板块开始获得资金关注。',
        suggestion: '建议适当分散投资，降低单一行业集中度。考虑增加低相关性的资产，如部分消费、医药或低估值蓝筹基金，提高组合的抗风险能力。',
        priority: 'medium',
        time: '2023-12-15 16:42',
        read: true
      },
      {
        id: 'alert-003',
        title: '市场情绪波动加大，注意控制交易频率',
        behavior: '您在过去一周的交易频率显著提高，是平常的3倍，频繁交易可能导致决策质量下降和不必要的交易成本。',
        marketContext: '近期市场波动加大，消息面复杂多变，投资者情绪敏感，市场短期走向不明确。',
        suggestion: '建议您降低交易频率，避免被短期市场噪音影响。复盘近期交易决策，评估是否受到市场情绪影响。坚持长期投资计划，避免过度反应。',
        priority: 'medium',
        time: '2023-12-12 09:15',
        read: false
      },
      {
        id: 'alert-004',
        title: '可能错过定投时机',
        behavior: '您已连续两个月未执行基金定投计划，错过了市场调整期的低位买入机会。',
        marketContext: '过去两个月市场经历了一定幅度的调整，主要指数回撤超过10%，为定投策略提供了良好的买入时机。',
        suggestion: '建议重新开始执行定投计划，市场调整为长期投资者提供了更好的买入价格。定投的核心优势在于平均成本，坚持执行比择时更重要。',
        priority: 'low',
        time: '2023-12-05 14:30',
        read: false
      },
      {
        id: 'alert-005',
        title: '投资知识更新提醒',
        behavior: '系统检测到您对近期出台的新监管政策了解有限，这可能影响您对市场变化的正确理解。',
        marketContext: '近期监管部门出台了多项关于基金管理和投资者保护的新政策，这些变化可能对部分基金的运作和市场环境产生影响。',
        suggestion: '建议您阅读我们准备的政策解读文章，了解最新监管变化及其可能对您投资的影响。及时更新投资知识有助于做出更明智的决策。',
        priority: 'low',
        time: '2023-11-28 11:20',
        read: true
      }
    ]
  };
};

/**
 * 更新用户行为设置
 * @param {string} userId - 用户ID
 * @param {Object} settings - 用户设置
 * @returns {Promise<Object>} - 返回更新结果
 */
export const updateBehaviorSettings = async (userId, settings) => {
  // 模拟API请求延迟
  await delay(500);
  
  // 返回模拟成功结果
  return {
    success: true,
    message: '设置更新成功'
  };
};

/**
 * 获取行为矫正进度
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回进度数据
 */
export const getBehaviorCorrectionProgress = async (userId) => {
  // 模拟API请求延迟
  await delay(600);
  
  // 返回模拟数据
  return {
    success: true,
    data: {
      overallProgress: 65, // 百分比
      startDate: '2023-09-15',
      milestones: [
        { name: '完成行为诊断', completed: true, date: '2023-09-16' },
        { name: '设置改进目标', completed: true, date: '2023-09-18' },
        { name: '学习关键概念', completed: true, date: '2023-10-02' },
        { name: '实践模拟交易', completed: true, date: '2023-10-15' },
        { name: '中期评估', completed: true, date: '2023-11-01' },
        { name: '应用到实际投资', completed: false, target: '2023-12-25' },
        { name: '最终评估', completed: false, target: '2024-01-15' }
      ],
      improvements: [
        { behavior: '损失厌恶', initialScore: 85, currentScore: 75, change: -10 },
        { behavior: '过度自信', initialScore: 72, currentScore: 60, change: -12 },
        { behavior: '从众心理', initialScore: 45, currentScore: 30, change: -15 }
      ]
    }
  };
};
</file>

<file path="src/services/chatService.js">
/**
 * 聊天服务接口
 * 该文件专门处理与AI聊天相关的API调用
 * 目前使用模拟数据，未来将接入微调模型
 */
import { fetchChatHistory, sendChatMessage } from './mockApi';

/**
 * 获取聊天历史记录
 * @param {Object} params - 查询参数
 * @param {string} params.userId - 用户ID
 * @param {number} params.limit - 返回消息数量限制
 * @param {string} params.before - 分页标记，获取此ID之前的消息
 * @returns {Promise<Object>} - 返回聊天记录数据
 */
export const getChatHistory = async (params = {}) => {
  // 目前使用模拟数据
  const response = await fetchChatHistory();
  
  // 未来实现微调模型API调用
  // const response = await axios.get('/api/chat/history', { params });
  
  return response;
};

/**
 * 发送消息到AI模型并获取回复
 * @param {Object} message - 消息对象
 * @param {string} message.content - 消息内容
 * @param {Object} options - 额外选项
 * @param {string} options.userId - 用户ID
 * @param {string} options.modelVersion - 模型版本
 * @param {boolean} options.useContext - 是否使用上下文
 * @param {number} options.maxTokens - 最大生成token数
 * @param {Array<Object>} options.context - 上下文消息数组
 * @returns {Promise<Object>} - 返回AI回复
 */
export const sendMessage = async (message, options = {}) => {
  // 默认选项
  const defaultOptions = {
    userId: 'default',
    modelVersion: 'latest',
    useContext: true,
    maxTokens: 1000,
    context: []
  };
  
  const mergedOptions = { ...defaultOptions, ...options };
  
  // 目前使用模拟数据
  const response = await sendChatMessage(message);
  
  // 未来实现微调模型API调用
  // const payload = {
  //   message: message.content,
  //   userId: mergedOptions.userId,
  //   modelVersion: mergedOptions.modelVersion,
  //   useContext: mergedOptions.useContext,
  //   maxTokens: mergedOptions.maxTokens,
  //   context: mergedOptions.context
  // };
  // const response = await axios.post('/api/chat/message', payload);
  
  return response;
};

/**
 * 获取可用的模型版本
 * @returns {Promise<Object>} - 返回可用模型列表
 */
export const getAvailableModels = async () => {
  // 目前使用模拟数据
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: [
      { id: 'fund-advisor-base', name: '基础投资顾问', description: '通用投资知识和基金分析能力' },
      { id: 'fund-advisor-pro', name: '专业投资顾问', description: '更深入的市场分析和投资组合建议' },
      { id: 'behavior-analysis', name: '行为分析专家', description: '专注于识别和矫正投资行为偏差' }
    ]
  };
  
  // 未来实现微调模型API调用
  // return await axios.get('/api/models/available');
};

/**
 * 创建智能投顾会话
 * @param {Object} params - 会话参数
 * @param {string} params.userId - 用户ID
 * @param {string} params.modelId - 模型ID
 * @param {string} params.sessionType - 会话类型(general|portfolio|behavior)
 * @returns {Promise<Object>} - 返回创建的会话信息
 */
export const createAdvisorSession = async (params = {}) => {
  // 目前使用模拟数据
  await new Promise(resolve => setTimeout(resolve, 700));
  
  return {
    success: true,
    data: {
      sessionId: `session_${Date.now()}`,
      modelId: params.modelId || 'fund-advisor-base',
      createdAt: new Date().toISOString(),
      status: 'active'
    }
  };
  
  // 未来实现微调模型API调用
  // return await axios.post('/api/chat/sessions', params);
};

/**
 * 获取特定用户的投资分析提示
 * 这些提示将根据用户的投资行为和组合表现生成
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回个性化提示
 */
export const getPersonalizedPrompts = async (userId) => {
  // 目前使用模拟数据
  await new Promise(resolve => setTimeout(resolve, 600));
  
  return {
    success: true,
    data: [
      { id: 1, text: "我的投资组合波动较大，如何降低风险？" },
      { id: 2, text: "我的投资组合中科技股比例较高，如何更好地分散投资？" },
      { id: 3, text: "最近市场波动较大，我应该如何应对当前市场环境？" },
      { id: 4, text: "我想制定一个适合自己风险偏好的长期投资计划，有什么建议？" }
    ]
  };
  
  // 未来实现微调模型API调用
  // return await axios.get(`/api/users/${userId}/prompts`);
};

/**
 * 评价AI回复质量
 * 这有助于改进模型的微调过程
 * @param {string} messageId - 消息ID
 * @param {Object} feedback - 反馈信息
 * @param {number} feedback.rating - 评分(1-5)
 * @param {string} feedback.comment - 评价内容
 * @returns {Promise<Object>} - 返回处理结果
 */
export const provideFeedback = async (messageId, feedback) => {
  // 目前使用模拟数据
  await new Promise(resolve => setTimeout(resolve, 300));
  
  return {
    success: true,
    data: {
      received: true,
      messageId,
      timestamp: new Date().toISOString()
    }
  };
  
  // 未来实现微调模型API调用
  // return await axios.post(`/api/chat/feedback/${messageId}`, feedback);
};
</file>

<file path="src/services/learningService.js">
/**
 * 学习服务
 * 该文件用于处理与学习中心相关的API调用
 * 目前使用模拟数据，未来可替换为实际API调用
 */
import { delay } from './baseService';

/**
 * 获取所有课程
 * @param {Object} params - 查询参数
 * @param {string} params.category - 课程类别
 * @param {string} params.level - 难度级别
 * @param {string} params.search - 搜索关键词
 * @returns {Promise<Object>} - 返回课程列表
 */
export const getCourses = async (params = {}) => {
  // 模拟API请求延迟
  await delay(800);
  
  // 模拟课程数据
  const courses = [
    {
      id: 'course-001',
      title: '投资基础知识入门',
      description: '介绍基本投资概念、风险与收益关系、资产类别及其特点，适合投资新手。',
      category: '基础知识',
      level: '初级',
      duration: '2小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?finance,1',
      students: 2547,
      lessons: 8,
      recommended: true,
      lastAccessed: '2023-12-15T10:30:00Z'
    },
    {
      id: 'course-002',
      title: '基金类型与特点详解',
      description: '深入了解不同类型基金的特点、风险收益特性、费用结构和适合的投资者类型。',
      category: '基金投资',
      level: '初级',
      duration: '3小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?finance,2',
      students: 1892,
      lessons: 10,
      recommended: false,
      lastAccessed: '2023-12-10T14:45:00Z'
    },
    {
      id: 'course-003',
      title: '投资心理学：认知偏差与决策',
      description: '探讨投资过程中常见的心理偏差，以及如何通过认知训练改进决策质量。',
      category: '行为金融',
      level: '中级',
      duration: '4小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?psychology',
      students: 1436,
      lessons: 12,
      recommended: true,
      lastAccessed: '2023-12-05T09:15:00Z'
    },
    {
      id: 'course-004',
      title: '基金定投策略详解',
      description: '学习基金定投的原理、优势、适用场景以及不同市场环境下的操作策略。',
      category: '投资策略',
      level: '初级',
      duration: '2.5小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?chart',
      students: 2105,
      lessons: 8,
      recommended: false,
      lastAccessed: '2023-11-28T16:20:00Z'
    },
    {
      id: 'course-005',
      title: '技术分析基础',
      description: '介绍基本技术分析概念，包括趋势、支撑与阻力、常见图表形态及技术指标。',
      category: '技术分析',
      level: '中级',
      duration: '5小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?chart,2',
      students: 1254,
      lessons: 15,
      recommended: false,
      lastAccessed: null
    },
    {
      id: 'course-006',
      title: '基本面分析方法',
      description: '学习如何分析基金的基本面因素，包括管理团队、投资策略、历史业绩等。',
      category: '基本面分析',
      level: '中级',
      duration: '4小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?analysis',
      students: 982,
      lessons: 12,
      recommended: false,
      lastAccessed: null
    },
    {
      id: 'course-007',
      title: '资产配置原理与实践',
      description: '掌握资产配置的核心原则，学习如何根据自身情况构建多元化投资组合。',
      category: '投资策略',
      level: '中级',
      duration: '3.5小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?portfolio',
      students: 1562,
      lessons: 10,
      recommended: true,
      lastAccessed: '2023-12-12T11:05:00Z'
    },
    {
      id: 'course-008',
      title: '市场周期与投资时机',
      description: '了解经济与市场周期的运行规律，学习如何识别不同周期阶段并调整投资策略。',
      category: '宏观经济',
      level: '高级',
      duration: '6小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?cycle',
      students: 875,
      lessons: 18,
      recommended: false,
      lastAccessed: null
    },
    {
      id: 'course-009',
      title: '投资者常见心理陷阱',
      description: '深入分析投资过程中的常见心理陷阱，包括从众心理、损失厌恶等，并学习克服方法。',
      category: '行为金融',
      level: '初级',
      duration: '2小时',
      imageUrl: 'https://source.unsplash.com/random/300x200?psychology,2',
      students: 1789,
      lessons: 6,
      recommended: false,
      lastAccessed: null
    }
  ];
  
  // 根据参数筛选课程
  let filteredCourses = [...courses];
  
  if (params.category) {
    filteredCourses = filteredCourses.filter(course => course.category === params.category);
  }
  
  if (params.level) {
    filteredCourses = filteredCourses.filter(course => course.level === params.level);
  }
  
  if (params.search) {
    const searchLower = params.search.toLowerCase();
    filteredCourses = filteredCourses.filter(course => 
      course.title.toLowerCase().includes(searchLower) || 
      course.description.toLowerCase().includes(searchLower)
    );
  }
  
  return {
    success: true,
    data: filteredCourses
  };
};

/**
 * 获取学习进度
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回学习进度数据
 */
export const getCoursesProgress = async (userId) => {
  // 模拟API请求延迟
  await delay(600);
  
  // 模拟进度数据
  const progress = {
    'course-001': {
      status: 'in-progress',
      percentage: 60,
      completedLessons: [1, 2, 3, 4, 5],
      totalLessons: 8,
      lastAccessed: '2023-12-15T10:30:00Z'
    },
    'course-003': {
      status: 'in-progress',
      percentage: 25,
      completedLessons: [1, 2, 3],
      totalLessons: 12,
      lastAccessed: '2023-12-05T09:15:00Z'
    },
    'course-007': {
      status: 'in-progress',
      percentage: 40,
      completedLessons: [1, 2, 3, 4],
      totalLessons: 10,
      lastAccessed: '2023-12-12T11:05:00Z'
    },
    'course-004': {
      status: 'completed',
      percentage: 100,
      completedLessons: [1, 2, 3, 4, 5, 6, 7, 8],
      totalLessons: 8,
      lastAccessed: '2023-11-28T16:20:00Z'
    }
  };
  
  return {
    success: true,
    data: progress
  };
};

/**
 * 获取课程详情
 * @param {string} courseId - 课程ID
 * @returns {Promise<Object>} - 返回课程详情
 */
export const getCourseDetail = async (courseId) => {
  // 模拟API请求延迟
  await delay(700);
  
  // 获取所有课程
  const coursesResponse = await getCourses();
  
  if (coursesResponse.success) {
    const course = coursesResponse.data.find(c => c.id === courseId);
    
    if (!course) {
      return {
        success: false,
        message: '未找到指定课程'
      };
    }
    
    // 扩展课程详情
    const courseDetail = {
      ...course,
      objectives: [
        '理解课程涵盖的核心概念和原理',
        '掌握相关的实践技能和方法',
        '能够将所学知识应用到实际投资中',
        '培养理性思考和分析能力'
      ],
      syllabus: [
        { 
          id: 1, 
          title: '课程介绍', 
          duration: '10分钟',
          type: 'video'
        },
        { 
          id: 2, 
          title: '基础概念', 
          duration: '25分钟',
          type: 'video'
        },
        { 
          id: 3, 
          title: '核心原理', 
          duration: '40分钟',
          type: 'video'
        },
        { 
          id: 4, 
          title: '实践应用', 
          duration: '35分钟',
          type: 'video'
        },
        { 
          id: 5, 
          title: '案例分析', 
          duration: '30分钟',
          type: 'video'
        },
        { 
          id: 6, 
          title: '知识测验', 
          duration: '20分钟',
          type: 'quiz'
        }
      ],
      instructors: [
        {
          id: 'instructor-001',
          name: '张教授',
          title: '金融学博士',
          bio: '拥有超过15年的金融教育和研究经验，曾在多家顶尖投资机构担任顾问。',
          avatar: 'https://source.unsplash.com/random/100x100?portrait,1'
        }
      ],
      reviews: [
        {
          id: 'review-001',
          user: '李先生',
          rating: 5,
          comment: '内容非常实用，讲解清晰易懂，对我的投资理念有很大帮助。',
          date: '2023-11-10'
        },
        {
          id: 'review-002',
          user: '王女士',
          rating: 4,
          comment: '课程质量高，但希望能有更多的实践案例。',
          date: '2023-10-25'
        }
      ],
      relatedCourses: [
        'course-002',
        'course-004',
        'course-007'
      ]
    };
    
    return {
      success: true,
      data: courseDetail
    };
  }
  
  return {
    success: false,
    message: '获取课程详情失败'
  };
};

/**
 * 更新课程进度
 * @param {string} courseId - 课程ID
 * @param {Object} progressData - 进度数据
 * @returns {Promise<Object>} - 返回更新结果
 */
export const updateCourseProgress = async (courseId, progressData) => {
  // 模拟API请求延迟
  await delay(500);
  
  // 模拟更新成功
  return {
    success: true,
    message: '进度更新成功',
    data: {
      courseId,
      ...progressData,
      updatedAt: new Date().toISOString()
    }
  };
};

/**
 * 获取学习路径
 * @param {string} pathId - 路径ID
 * @returns {Promise<Object>} - 返回学习路径数据
 */
export const getLearningPath = async (pathId) => {
  // 模拟API请求延迟
  await delay(800);
  
  // 模拟学习路径数据
  const paths = {
    'path-beginner': {
      id: 'path-beginner',
      title: '投资新手入门',
      description: '适合刚开始投资的用户，涵盖基础投资概念、基金类型和简单的分析方法。',
      courses: ['course-001', 'course-002', 'course-004', 'course-009'],
      duration: '约10小时',
      level: '初级'
    },
    'path-intermediate': {
      id: 'path-intermediate',
      title: '基金投资进阶',
      description: '进一步深入基金投资领域，学习更复杂的分析方法和投资策略。',
      courses: ['course-003', 'course-005', 'course-006', 'course-007'],
      duration: '约15小时',
      level: '中级'
    },
    'path-behavioral': {
      id: 'path-behavioral',
      title: '行为金融学专题',
      description: '深入了解投资心理和认知偏差，掌握如何避免常见的投资行为陷阱。',
      courses: ['course-003', 'course-009'],
      duration: '约8小时',
      level: '中级'
    }
  };
  
  if (pathId && paths[pathId]) {
    return {
      success: true,
      data: paths[pathId]
    };
  } else if (!pathId) {
    return {
      success: true,
      data: Object.values(paths)
    };
  }
  
  return {
    success: false,
    message: '未找到指定的学习路径'
  };
};
</file>

<file path="src/services/mockData.js">
// 模拟投资组合数据
export const mockPortfolioData = [
  { name: '股票型基金', value: 50000, percent: 0.5 },
  { name: '债券型基金', value: 30000, percent: 0.3 },
  { name: '货币型基金', value: 15000, percent: 0.15 },
  { name: '混合型基金', value: 5000, percent: 0.05 },
];

// 模拟投资组合历史表现数据
export const mockPortfolioHistoryData = [
  { date: '2023-01', value: 100000 },
  { date: '2023-02', value: 102000 },
  { date: '2023-03', value: 105000 },
  { date: '2023-04', value: 103000 },
  { date: '2023-05', value: 108000 },
  { date: '2023-06', value: 110000 },
  { date: '2023-07', value: 111000 },
  { date: '2023-08', value: 114000 },
  { date: '2023-09', value: 113000 },
  { date: '2023-10', value: 116000 },
  { date: '2023-11', value: 119000 },
  { date: '2023-12', value: 120000 },
];

// 模拟决策对比数据
export const mockComparisonData = [
  { date: '2023-01-01', user: 0.00, ai: 0.00, benchmark: 0.00 },
  { date: '2023-02-01', user: 0.02, ai: 0.025, benchmark: 0.015 },
  { date: '2023-03-01', user: 0.05, ai: 0.06, benchmark: 0.03 },
  { date: '2023-04-01', user: 0.03, ai: 0.05, benchmark: 0.02 },
  { date: '2023-05-01', user: 0.08, ai: 0.09, benchmark: 0.04 },
  { date: '2023-06-01', user: 0.10, ai: 0.12, benchmark: 0.06 },
  { date: '2023-07-01', user: 0.11, ai: 0.14, benchmark: 0.07 },
  { date: '2023-08-01', user: 0.14, ai: 0.17, benchmark: 0.09 },
  { date: '2023-09-01', user: 0.13, ai: 0.18, benchmark: 0.10 },
  { date: '2023-10-01', user: 0.16, ai: 0.21, benchmark: 0.12 },
  { date: '2023-11-01', user: 0.19, ai: 0.24, benchmark: 0.14 },
  { date: '2023-12-01', user: 0.20, ai: 0.28, benchmark: 0.15 },
];

// 模拟行为画像数据
export const mockBehaviorData = [
  {
    subject: '风险承受能力',
    value: 65,
    ideal: 80,
    description: '您对风险的承受能力低于理想水平。建议尝试更多元化的投资组合。'
  },
  {
    subject: '情绪控制',
    value: 40,
    ideal: 90,
    description: '您在投资过程中容易受情绪影响。建议制定明确的投资计划并严格执行。'
  },
  {
    subject: '知识水平',
    value: 70,
    ideal: 75,
    description: '您的投资知识基本到位，可以继续深入了解复杂投资产品的特性。'
  },
  {
    subject: '行为一致性',
    value: 55,
    ideal: 85,
    description: '您的投资行为存在不一致性，建议建立明确的投资原则。'
  },
  {
    subject: '决策速度',
    value: 80,
    ideal: 70,
    description: '您的决策速度过快，可能导致草率决定。建议进行更全面的研究。'
  },
  {
    subject: '自我学习',
    value: 75,
    ideal: 90,
    description: '您有良好的学习习惯，但可以更系统地学习投资知识。'
  },
];

// 模拟行为偏差数据
export const mockBehaviorBiases = [
  {
    name: '损失厌恶',
    score: 8.2,
    description: '您过度害怕亏损，可能导致错过好的投资机会。',
    suggestions: [
      '设定止损点但不过早退出市场',
      '关注长期回报而非短期波动',
      '尝试小额投资来降低心理压力'
    ]
  },
  {
    name: '过度自信',
    score: 7.6,
    description: '您可能高估自己的知识和预测能力。',
    suggestions: [
      '定期检查投资业绩与基准的对比',
      '记录投资决策和原因，以便回顾',
      '听取不同的观点'
    ]
  },
  {
    name: '从众效应',
    score: 6.1,
    description: '您有时会跟随大众情绪而非独立思考。',
    suggestions: [
      '制定投资计划并坚持执行',
      '逆向思考：当大多数人恐惧时考虑投资机会',
      '关注基本面而非市场情绪'
    ]
  },
  {
    name: '锚定效应',
    score: 5.7,
    description: '您可能过度依赖于某个参考点（如购买价格）来做决策。',
    suggestions: [
      '关注资产的内在价值而非购买价格',
      '定期重新评估投资组合中的每个资产',
      '避免"沉没成本"思维陷阱'
    ]
  },
];

// 模拟新闻数据
export const mockNewsData = [
  {
    id: 1,
    title: '央行降准0.5个百分点，释放流动性约1万亿元',
    source: '经济日报',
    date: '2023-12-15',
    summary: '中国人民银行宣布下调存款准备金率0.5个百分点，将释放长期资金约1万亿元。这一措施旨在增强金融对实体经济的支持力度。',
    impact: '这一政策可能对债券市场形成利好，债券型基金有望受益。同时可能提振股市信心，尤其是金融板块。',
    relevantFunds: ['易方达稳健收益债券', '南方宝元债券', '工银瑞信金融地产ETF']
  },
  {
    id: 2,
    title: '新能源汽车产业链迎来政策红利，多地出台补贴措施',
    source: '证券时报',
    date: '2023-12-10',
    summary: '多个省市近期相继出台新能源汽车消费补贴政策，包括购置补贴、充电设施建设补贴等多种形式，进一步促进新能源汽车消费。',
    impact: '新能源汽车产业链相关公司有望受益，包括整车制造、电池、电机、电控等细分领域。相关主题基金可能在短期内表现活跃。',
    relevantFunds: ['易方达新能源汽车主题ETF', '华夏新能源车ETF', '广发汽车ETF']
  },
  {
    id: 3,
    title: '医疗创新推动医药行业结构优化，CXO企业迎来发展机遇',
    source: '上海证券报',
    date: '2023-12-05',
    summary: '国家药监局发布《关于深化药品审评审批制度改革加快创新医药产品上市的意见》，支持创新药物研发和产业化。',
    impact: '医药创新企业和CXO企业有望加速发展，生物医药行业结构优化趋势明显。相关医药主题基金可能在中长期获得较好表现。',
    relevantFunds: ['富国生物医药主题', '汇添富医疗服务混合', '易方达医疗保健行业']
  },
];

// 模拟政策解读数据
export const mockPolicyData = [
  {
    id: 1,
    title: '《关于加快推动数字技术与实体经济深度融合的指导意见》',
    issuer: '国务院',
    date: '2023-11-28',
    summary: '文件提出到2025年，数字技术向国民经济各领域加速渗透，制造业数字化转型成效显著，数字经济新业态新模式蓬勃发展。',
    analysis: '这一政策强调数字经济与实体经济深度融合，重点支持方向包括工业互联网、大数据、人工智能等领域。数字技术相关企业，特别是能够助力传统产业数字化转型的企业将直接受益。',
    impact: [
      { sector: '数字经济', effect: 'positive', description: '云计算、大数据、人工智能等领域将获得政策支持' },
      { sector: '制造业', effect: 'positive', description: '智能制造、工业互联网应用将加速推进' },
      { sector: '传统零售', effect: 'neutral', description: '数字化转型是挑战也是机遇' }
    ],
    relevantFunds: ['华夏科技创新混合', '易方达创新未来混合', '南方信息创新混合']
  },
  {
    id: 2,
    title: '《关于金融支持实体经济高质量发展的意见》',
    issuer: '中国人民银行、国家金融监督管理总局',
    date: '2023-11-15',
    summary: '文件强调金融要更好服务实体经济，引导金融资源重点支持科技创新、绿色发展、中小微企业等领域。',
    analysis: '这一政策旨在优化金融资源配置，提高金融服务实体经济的效率。科技创新、绿色发展、中小微企业等领域将获得更多金融支持，相关企业融资环境有望改善。',
    impact: [
      { sector: '科技创新', effect: 'positive', description: '高新技术企业融资渠道将拓宽' },
      { sector: '绿色产业', effect: 'positive', description: '绿色金融将进一步发展，支持低碳转型' },
      { sector: '中小企业', effect: 'positive', description: '融资难、融资贵问题有望缓解' },
      { sector: '传统高污染行业', effect: 'negative', description: '金融支持将减少' }
    ],
    relevantFunds: ['博时科创主题3年封闭运作混合', '广发资源优选混合', '招商中证全指证券公司ETF']
  },
];

// 模拟场景模拟数据
export const mockScenarioData = [
  {
    id: 1,
    title: '2015年股灾',
    description: '2015年中国股市经历了大幅波动，6月中旬至8月末上证指数从5178点最低跌至2850点，跌幅近45%。',
    events: [
      { date: '2015-06-12', title: '股市见顶', description: '上证指数达到5178.19点的高位。', action: 'sell' },
      { date: '2015-06-19', title: '首次大跌', description: '上证指数单周下跌13.32%。', action: 'hold' },
      { date: '2015-07-27', title: '黑色星期一', description: '上证指数单日下跌8.48%。', action: 'buy' },
      { date: '2015-08-24', title: '再次暴跌', description: '上证指数单日下跌8.49%。', action: 'buy' },
      { date: '2015-08-26', title: '市场企稳', description: '股市开始企稳回升。', action: 'hold' }
    ],
    questions: [
      { 
        id: 1, 
        question: '在股市见顶时，最理性的投资行为是什么？', 
        options: [
          '继续买入以获取更多收益', 
          '全部卖出规避风险', 
          '减持部分高估值股票，保留价值型股票',
          '不做任何操作，继续持有'
        ],
        correctAnswer: 2,
        explanation: '市场出现非理性繁荣时，适当减持高估值、高风险资产是明智之举，但不必完全清仓，可以保留具有长期价值的标的。'
      },
      { 
        id: 2, 
        question: '在市场大幅下跌后，如何判断是否是买入机会？', 
        options: [
          '只要跌幅超过20%就是买入机会', 
          '跟随大多数投资者的行为', 
          '基于对公司基本面和估值的分析做决策',
          '等待市场完全企稳后再买入'
        ],
        correctAnswer: 2,
        explanation: '投资决策应该基于对公司基本面和估值的客观分析，而不是简单地跟随市场情绪或机械地基于价格波动。'
      }
    ],
    lessons: [
      '投资决策应以基本面分析为基础，而非市场情绪',
      '分散投资可以有效降低投资组合波动性',
      '市场极度恐慌时往往是长期价值投资者的买入机会',
      '在牛市高点保持谨慎，适当降低仓位是明智之举'
    ]
  },
  {
    id: 2,
    title: '新冠疫情市场冲击',
    description: '2020年初新冠疫情全球蔓延，全球股市遭遇剧烈震荡，随后在流动性宽松和经济复苏预期下强劲反弹。',
    events: [
      { date: '2020-02-03', title: '疫情爆发初期', description: '中国股市大幅下跌，上证指数单日跌幅7.72%。', action: 'hold' },
      { date: '2020-03-16', title: '全球股灾', description: '道琼斯指数单日下跌12.93%，创下1987年以来最大单日跌幅。', action: 'buy' },
      { date: '2020-03-24', title: '美股触底', description: '美股开始反弹，道指单日上涨11.37%。', action: 'buy' },
      { date: '2020-04-30', title: '市场回暖', description: '全球主要股指从低点已反弹20%以上。', action: 'hold' },
      { date: '2020-11-09', title: '疫苗曙光', description: '辉瑞公布疫苗有效性数据，全球股市大涨。', action: 'rebalance' }
    ],
    questions: [
      { 
        id: 1, 
        question: '在全球性危机爆发初期，投资者应该如何应对？', 
        options: [
          '立即清仓所有股票类资产', 
          '增加现金储备，同时寻找低估的优质资产', 
          '加杠杆抄底',
          '不做任何调整，坚持原有策略'
        ],
        correctAnswer: 1,
        explanation: '在危机初期保持一定流动性很重要，但同时也应该冷静分析，逐步布局被过度悲观情绪打压的优质资产。'
      },
      { 
        id: 2, 
        question: '疫情危机中，哪类资产配置策略最为有效？', 
        options: [
          '全仓避险资产（如黄金、国债）', 
          '全仓股票抄底', 
          '多元资产配置，兼顾防御和进攻',
          '全部转为现金等待机会'
        ],
        correctAnswer: 2,
        explanation: '多元化资产配置能够在不确定性高的环境中提供更好的风险调整后回报，既有防御性资产保护资金安全，又有进攻性资产把握反弹机会。'
      }
    ],
    lessons: [
      '危机往往是长期投资者的良好买入机会',
      '流动性危机中现金为王，保持充足流动性很重要',
      '多元化资产配置是应对极端市场事件的有效手段',
      '情绪化决策往往导致在最低点卖出，错过随后的反弹'
    ]
  }
];

// 模拟聊天对话数据
export const mockChatData = [
  {
    id: 1,
    role: 'assistant',
    content: '欢迎使用FundGene智能助手，我可以帮助您了解基金投资相关知识，分析您的投资行为，并提供个性化建议。请问有什么可以帮到您的？'
  }
];

export const mockChatResponses = {
  default: '我正在学习更多关于投资的知识。您能够更具体地描述您的问题吗？',
  
  // 基础问题回答
  '什么是基金': '基金是一种集合投资工具，由基金管理公司管理，将众多投资者的资金集中起来，投资于股票、债券等金融工具的组合。基金可以让普通投资者间接投资于分散的投资组合，降低单一投资风险。',
  
  '基金类型': '基金主要分为以下类型：\n1. 股票型基金：主要投资于股票\n2. 债券型基金：主要投资于债券\n3. 混合型基金：同时投资股票和债券\n4. 货币市场基金：投资于短期货币市场工具\n5. 指数基金：跟踪特定指数\n6. ETF：可在交易所交易的指数基金\n每种类型的风险和收益特点都不同，适合不同的投资需求。',
  
  '如何选择基金': '选择基金可考虑以下因素：\n1. 投资目标与风险承受能力\n2. 基金历史业绩与波动性\n3. 基金经理的管理能力与经验\n4. 基金规模与费率\n5. 基金公司的声誉\n建议根据自身情况多元化配置不同类型的基金，并定期检视调整。',
  
  '什么是定投': '基金定投是指在固定时间以固定金额投资特定基金的策略。其优势在于：\n1. 平均成本法，降低择时风险\n2. 培养良好投资习惯\n3. 适合长期投资\n4. 利用复利效应积累财富\n定投适合没有大量闲置资金但有稳定收入的投资者。',
  
  // 行为偏差相关问题
  '什么是损失厌恶': '损失厌恶是指投资者对亏损的痛苦感受比同等收益的喜悦感受更强烈。这种心理偏差可能导致投资者在面临亏损时不愿意止损，同时又过早兑现盈利。克服损失厌恶可通过设定明确的投资计划、使用自动止损和定期再平衡等策略。',
  
  '什么是羊群效应': '羊群效应是指投资者倾向于跟随大众行为而非独立思考的现象。在投资中表现为追涨杀跌、热门基金集中申购等。这种行为往往导致在高点买入、低点卖出的结果。应对策略包括：制定独立的投资计划、反向思考、关注价值而非价格、避免频繁交易。',
  
  // 市场分析类问题
  '当前市场分析': '当前市场呈现结构性特征，科技、消费和新能源等成长板块估值较高，而金融、地产等传统板块估值处于历史低位。建议：\n1. 均衡配置成长与价值\n2. 关注政策支持方向\n3. 保持适度现金仓位应对波动\n4. 定投指数基金作为核心配置\n请注意，这只是一般性建议，具体投资决策应结合您的个人情况。',
  
  // 投资组合建议
  '如何构建投资组合': '构建健康的投资组合应考虑：\n1. 资产配置：根据风险承受能力和投资目标配置股票、债券、现金比例\n2. 多元化：分散投资于不同行业、地区的基金\n3. 风险管理：根据风险等级合理分配资金比例\n4. 定期再平衡：维持目标资产配置比例\n5. 长期视角：避免频繁交易，专注长期表现\n对于普通投资者，可考虑"核心-卫星"策略，核心部分配置低成本指数基金，卫星部分选择特定行业或主题基金。'
};

// 模拟再平衡建议数据
export const mockRebalanceData = {
  currentAllocation: [
    { category: '股票型基金', current: 60, target: 50, action: 'reduce', amount: 10000 },
    { category: '债券型基金', current: 20, target: 30, action: 'increase', amount: 10000 },
    { category: '货币市场基金', current: 15, target: 15, action: 'maintain', amount: 0 },
    { category: '黄金/商品', current: 5, target: 5, action: 'maintain', amount: 0 },
  ],
  specificRecommendations: [
    { 
      fund: '易方达沪深300ETF联接', 
      code: '110020', 
      currentValue: 30000, 
      targetValue: 25000, 
      action: 'reduce', 
      amount: 5000,
      reason: '当前股票型基金比例过高，降低系统性风险' 
    },
    { 
      fund: '华夏上证50ETF', 
      code: '510050', 
      currentValue: 30000, 
      targetValue: 25000, 
      action: 'reduce', 
      amount: 5000,
      reason: '大盘蓝筹估值处于历史高位，适度降低配置' 
    },
    { 
      fund: '南方中债1-3年国开行债券指数', 
      code: '005095', 
      currentValue: 10000, 
      targetValue: 15000, 
      action: 'increase', 
      amount: 5000,
      reason: '短债收益率处于相对高位，性价比较高' 
    },
    { 
      fund: '建信中债5-10年国开行债券指数', 
      code: '003358', 
      currentValue: 10000, 
      targetValue: 15000, 
      action: 'increase', 
      amount: 5000,
      reason: '中长期利率债收益率有所上升，配置价值提升' 
    },
  ],
  rationale: '根据当前市场环境分析，股票市场估值处于合理偏高区间，债券收益率相对有吸引力。考虑到您的风险承受能力评估结果为"中等"，建议适当降低权益类资产比例，增加固定收益类资产配置，以降低组合波动性，同时保持合理收益预期。',
  expectedImpact: {
    risk: '预计组合波动性降低约15%',
    return: '预期年化收益率略有降低（约0.5%），但风险调整后收益有望提升',
    sharpeRatio: '夏普比率预期从0.85提升至1.1左右'
  }
};

// 模拟用户行为数据
export const mockUserBehaviorData = {
  userId: '123456',
  loginFrequency: {
    daily: 2.3,
    weekly: 12.5,
    monthly: 45.2
  },
  tradingFrequency: {
    daily: 0.5,
    weekly: 2.1,
    monthly: 8.4
  },
  behaviorPatterns: {
    chasePerformance: 0.75, // 0-1, 1表示非常明显
    lossAversion: 0.82,
    overconfidence: 0.65,
    herdBehavior: 0.58,
    anchoringBias: 0.71
  },
  marketConditionReactions: {
    bullMarket: 'aggressive', // aggressive, moderate, conservative
    bearMarket: 'fearful', // fearful, cautious, opportunistic
    volatileMarket: 'reactive' // reactive, stable, counter-cyclical
  },
  riskToleranceScore: 68, // 0-100
  knowledgeScore: 72, // 0-100
};
</file>

<file path="src/services/newsService.js">
/**
 * 新闻分析服务
 * 该文件用于处理新闻相关的API调用
 * 目前使用模拟数据，未来可替换为实际API调用
 */
import { fetchNewsAnalysis } from './mockApi';

/**
 * 获取新闻分析列表
 * @param {Object} params - 查询参数
 * @param {number} params.page - 页码
 * @param {number} params.pageSize - 每页数量
 * @param {string} params.keyword - 搜索关键词
 * @param {string} params.category - 新闻类别 
 * @returns {Promise<Object>} - 返回新闻列表数据
 */
export const getNewsList = async (params = {}) => {
  // 目前使用模拟数据
  const response = await fetchNewsAnalysis();
  
  // 未来实现实时API调用
  // const response = await axios.get('/api/news', { params });
  
  return response;
};

/**
 * 获取新闻详情
 * @param {string|number} id - 新闻ID
 * @returns {Promise<Object>} - 返回新闻详情数据
 */
export const getNewsDetail = async (id) => {
  // 目前使用模拟数据，从列表中筛选
  const response = await fetchNewsAnalysis();
  
  if (response.success) {
    const news = response.data.find(item => item.id.toString() === id.toString());
    
    if (news) {
      return {
        success: true,
        data: news
      };
    } else {
      return {
        success: false,
        message: '未找到指定新闻'
      };
    }
  }
  
  return response;
  
  // 未来实现实时API调用
  // return await axios.get(`/api/news/${id}`);
};

/**
 * 获取最新新闻
 * @param {number} limit - 返回数量限制
 * @returns {Promise<Object>} - 返回最新新闻列表
 */
export const getLatestNews = async (limit = 5) => {
  // 目前使用模拟数据，按日期排序并限制数量
  const response = await fetchNewsAnalysis();
  
  if (response.success) {
    // 按日期排序
    const sorted = [...response.data].sort((a, b) => {
      return new Date(b.date) - new Date(a.date);
    });
    
    return {
      success: true,
      data: sorted.slice(0, limit)
    };
  }
  
  return response;
};

/**
 * 分析自定义新闻内容
 * @param {string} newsContent - 新闻内容
 * @returns {Promise<Object>} - 返回分析结果
 */
export const analyzeCustomNews = async (newsContent) => {
  // 未来接入AI模型分析接口
  // 目前返回模拟数据
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  return {
    success: true,
    data: {
      summary: '这是一个模拟的新闻内容摘要...',
      impact: '这条新闻可能对市场产生以下影响...',
      relevantFunds: ['易方达创新未来混合', '华夏科技创新混合']
    }
  };
  
  // 未来实现
  // return await axios.post('/api/analyze-news', { newsContent });
};
</file>

<file path="src/services/policyService.js">
/**
 * 政策解读服务
 * 该文件用于处理政策相关的API调用
 * 目前使用模拟数据，未来可替换为实际API调用
 */
import { fetchPolicyInterpretations } from './mockApi';

/**
 * 获取政策解读列表
 * @param {Object} params - 查询参数
 * @param {number} params.page - 页码
 * @param {number} params.pageSize - 每页数量
 * @param {string} params.keyword - 搜索关键词
 * @param {string} params.sortBy - 排序字段
 * @returns {Promise<Object>} - 返回政策列表数据
 */
export const getPolicyList = async (params = {}) => {
  // 目前使用模拟数据
  const response = await fetchPolicyInterpretations();
  
  // 未来实现实时API调用
  // const response = await axios.get('/api/policies', { params });
  
  return response;
};

/**
 * 获取政策详情
 * @param {string|number} id - 政策ID
 * @returns {Promise<Object>} - 返回政策详情数据
 */
export const getPolicyDetail = async (id) => {
  // 目前使用模拟数据，从列表中筛选
  const response = await fetchPolicyInterpretations();
  
  if (response.success) {
    const policy = response.data.find(item => item.id.toString() === id.toString());
    
    if (policy) {
      return {
        success: true,
        data: policy
      };
    } else {
      return {
        success: false,
        message: '未找到指定政策'
      };
    }
  }
  
  return response;
  
  // 未来实现实时API调用
  // return await axios.get(`/api/policies/${id}`);
};

/**
 * 获取最新政策解读
 * @param {number} limit - 返回数量限制
 * @returns {Promise<Object>} - 返回最新政策列表
 */
export const getLatestPolicies = async (limit = 3) => {
  // 目前使用模拟数据，按日期排序并限制数量
  const response = await fetchPolicyInterpretations();
  
  if (response.success) {
    // 按日期排序
    const sorted = [...response.data].sort((a, b) => {
      return new Date(b.date) - new Date(a.date);
    });
    
    return {
      success: true,
      data: sorted.slice(0, limit)
    };
  }
  
  return response;
};

/**
 * 请求AI分析政策
 * @param {string} policyText - 政策文本内容
 * @returns {Promise<Object>} - 返回AI分析结果
 */
export const analyzePolicy = async (policyText) => {
  // 未来接入AI模型分析接口
  // 目前返回模拟数据
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  return {
    success: true,
    data: {
      summary: '这是一个模拟的AI政策解读摘要...',
      impact: [
        { sector: '科技行业', effect: 'positive', description: '政策有利于科技创新...' },
        { sector: '传统制造', effect: 'neutral', description: '影响相对有限...' }
      ],
      investmentSuggestion: '建议关注相关主题基金...'
    }
  };
  
  // 未来实现
  // return await axios.post('/api/analyze-policy', { policyText });
};
</file>

<file path="src/services/portfolioService.js">
/**
 * 投资组合服务
 * 该文件用于处理与投资组合相关的API调用
 * 目前使用模拟数据，未来可替换为实际API调用
 */
import { fetchPortfolioData } from './mockApi';

/**
 * 获取投资组合概览数据
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回投资组合数据
 */
export const getPortfolioOverview = async (userId) => {
  // 目前使用模拟数据
  const response = await fetchPortfolioData();
  
  // 计算总价值
  if (response.success) {
    const totalValue = response.data.reduce((sum, item) => sum + item.value, 0);
    response.data.totalValue = totalValue;
  }
  
  // 未来实现实际API调用
  // return await axios.get(`/api/portfolio/overview?userId=${userId}`);
  
  return response;
};

/**
 * 获取投资组合详细数据
 * @param {Object} params - 查询参数
 * @param {string} params.userId - 用户ID
 * @param {string} params.timeRange - 时间范围 (week|month|quarter|year|all)
 * @returns {Promise<Object>} - 返回详细数据
 */
export const getPortfolioDetails = async (params = {}) => {
  // 目前使用模拟数据
  await new Promise(resolve => setTimeout(resolve, 800));
  
  return {
    success: true,
    data: {
      // 基本信息
      overview: {
        totalValue: 52680.75,
        changePercent: 2.35,
        changeAmount: 1205.32,
        fundCount: 12
      },
      // 投资组合指标
      metrics: {
        annualReturn: 8.2,
        volatility: 12.5,
        sharpeRatio: 0.85,
        maxDrawdown: -15.2,
        alpha: 1.2,
        beta: 0.92
      },
      // 资产配置
      allocation: [
        { name: '股票型基金', value: 25000, percent: 47.5 },
        { name: '债券型基金', value: 15000, percent: 28.5 },
        { name: '混合型基金', value: 8000, percent: 15.2 },
        { name: '货币市场基金', value: 4680.75, percent: 8.8 }
      ],
      // 持有基金明细
      holdings: [
        { 
          name: '易方达蓝筹精选混合',
          code: '005827',
          type: '混合型',
          value: 10000,
          percent: 18.99,
          costPrice: 2.45,
          currentPrice: 2.73,
          gain: 11.43,
          riskLevel: '中'
        },
        { 
          name: '南方宝元债券',
          code: '202101',
          type: '债券型',
          value: 15000,
          percent: 28.47,
          costPrice: 1.82,
          currentPrice: 1.91,
          gain: 4.95,
          riskLevel: '低'
        },
        { 
          name: '华夏上证50ETF',
          code: '510050',
          type: '股票型',
          value: 15000,
          percent: 28.47,
          costPrice: 3.10,
          currentPrice: 3.51,
          gain: 13.23,
          riskLevel: '高'
        },
        { 
          name: '天弘余额宝货币',
          code: '000198',
          type: '货币型',
          value: 4680.75,
          percent: 8.88,
          costPrice: 1.00,
          currentPrice: 1.00,
          gain: 1.75,
          riskLevel: '极低'
        },
        { 
          name: '广发科技先锋混合',
          code: '004477',
          type: '混合型',
          value: 8000,
          percent: 15.19,
          costPrice: 1.65,
          currentPrice: 1.88,
          gain: 13.94,
          riskLevel: '中高'
        }
      ],
      // 分析与建议
      analysis: {
        riskAssessment: '中等风险',
        suggestions: [
          '您的投资组合股票型基金占比接近50%，风险较高，可考虑适当降低',
          '债券资产配置合理，但可以增加国债占比以降低信用风险',
          '缺乏海外市场配置，建议适当增加全球或新兴市场基金'
        ],
        optimalAllocation: [
          { name: '股票型基金', target: 40, current: 47.5, action: '减少' },
          { name: '债券型基金', target: 35, current: 28.5, action: '增加' },
          { name: '混合型基金', target: 15, current: 15.2, action: '保持' },
          { name: '货币市场基金', target: 5, current: 8.8, action: '减少' },
          { name: '海外基金', target: 5, current: 0, action: '新增' }
        ]
      }
    }
  };
  
  // 未来实现实际API调用
  // return await axios.get('/api/portfolio/details', { params });
};

/**
 * 获取投资组合历史表现
 * @param {Object} params - 查询参数
 * @param {string} params.userId - 用户ID
 * @param {string} params.timeRange - 时间范围 (week|month|quarter|year|all)
 * @param {string} params.interval - 数据间隔 (day|week|month)
 * @returns {Promise<Object>} - 返回历史表现数据
 */
export const getPortfolioHistory = async (params = {}) => {
  // 目前返回模拟数据
  await new Promise(resolve => setTimeout(resolve, 600));
  
  const today = new Date();
  const historyData = [];
  
  // 生成过去一年的模拟数据
  for (let i = 365; i >= 0; i--) {
    const date = new Date();
    date.setDate(today.getDate() - i);
    
    // 简单的随机波动模拟
    const randomFactor = 1 + (Math.random() * 0.004 - 0.002);
    const prevValue = i === 365 ? 50000 : historyData[historyData.length - 1].value;
    const value = Math.round(prevValue * randomFactor * 100) / 100;
    
    historyData.push({
      date: date.toISOString().split('T')[0],
      value: value
    });
  }
  
  return {
    success: true,
    data: historyData
  };
  
  // 未来实现实际API调用
  // return await axios.get('/api/portfolio/history', { params });
};

/**
 * 更新投资组合目标配置
 * @param {Object} params - 配置参数
 * @param {string} params.userId - 用户ID
 * @param {Array} params.targetAllocation - 目标配置数组
 * @returns {Promise<Object>} - 返回更新结果
 */
export const updateTargetAllocation = async (params) => {
  // 目前返回模拟成功结果
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  return {
    success: true,
    message: '目标配置更新成功'
  };
  
  // 未来实现实际API调用
  // return await axios.post('/api/portfolio/target-allocation', params);
};

/**
 * 获取再平衡建议
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回再平衡建议
 */
export const getRebalanceRecommendations = async (userId) => {
  // 目前返回模拟数据
  await new Promise(resolve => setTimeout(resolve, 1200));
  
  return {
    success: true,
    data: {
      summary: '您的投资组合与目标配置存在偏差，建议进行调整以降低风险并提高收益潜力。',
      currentVsTarget: [
        { category: '股票型基金', current: 47.5, target: 40, difference: -7.5 },
        { category: '债券型基金', current: 28.5, target: 35, difference: 6.5 },
        { category: '混合型基金', current: 15.2, target: 15, difference: -0.2 },
        { category: '货币市场基金', current: 8.8, target: 5, difference: -3.8 },
        { category: '海外基金', current: 0, target: 5, difference: 5 }
      ],
      specificRecommendations: [
        {
          action: 'sell',
          fund: '华夏上证50ETF',
          code: '510050',
          amount: 3950,
          reason: '股票型基金比例过高，适当降低以控制风险'
        },
        {
          action: 'buy',
          fund: '南方宝元债券',
          code: '202101',
          amount: 3500,
          reason: '增加债券型基金比例，提高组合稳定性'
        },
        {
          action: 'sell',
          fund: '天弘余额宝货币',
          code: '000198',
          amount: 2000,
          reason: '货币市场基金收益较低，降低配置比例'
        },
        {
          action: 'buy',
          fund: '易方达中证海外互联ETF',
          code: '513050',
          amount: 2450,
          reason: '新增海外资产配置，增强地域多元化'
        }
      ],
      expectedImpact: {
        riskReduction: '预计组合风险降低约12%',
        potentialReturn: '长期收益潜力提高约0.5%',
        diversificationImprovement: '投资组合多元化程度提升25%'
      }
    }
  };
  
  // 未来实现实际API调用
  // return await axios.get(`/api/portfolio/rebalance?userId=${userId}`);
};
</file>

<file path="src/services/tradingService.js">
/**
 * 交易服务
 * 该文件用于处理与模拟交易相关的API调用
 * 目前使用模拟数据，未来可替换为实际API调用
 */

// 模拟延迟
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

/**
 * 获取市场概览数据
 * @returns {Promise<Object>} - 返回市场数据
 */
export const getMarketOverview = async () => {
  // 模拟API请求延迟
  await delay(800);
  
  // 返回模拟数据
  return {
    success: true,
    data: [
      // 指数数据
      { type: 'index', code: '000001', name: '上证指数', value: 3094.67, change: 25.33, changePercent: 0.82 },
      { type: 'index', code: '399001', name: '深证成指', value: 10247.68, change: 91.43, changePercent: 0.90 },
      { type: 'index', code: '399006', name: '创业板指', value: 2033.26, change: 11.24, changePercent: 0.56 },
      { type: 'index', code: '000300', name: '沪深300', value: 3783.81, change: 34.56, changePercent: 0.92 },
      
      // 热门基金数据
      { type: 'fund', code: '001938', name: '中欧时代先锋混合A', value: 1.5273, change: 0.0142, changePercent: 0.94, category: '混合型' },
      { type: 'fund', code: '110011', name: '易方达优质精选混合', value: 2.7241, change: 0.0289, changePercent: 1.07, category: '混合型' },
      { type: 'fund', code: '519068', name: '汇添富成长焦点混合', value: 2.9412, change: 0.0265, changePercent: 0.91, category: '混合型' },
      { type: 'fund', code: '001712', name: '广发沪港深新起点混合', value: 1.8831, change: 0.0168, changePercent: 0.90, category: '混合型' },
      { type: 'fund', code: '000209', name: '信诚新兴产业混合', value: 1.9563, change: 0.0083, changePercent: 0.43, category: '混合型' },
      { type: 'fund', code: '162605', name: '景顺长城鼎益混合', value: 1.6423, change: 0.0198, changePercent: 1.22, category: '混合型' }
    ]
  };
  
  // 未来实现实际API调用
  // return await axios.get('/api/market/overview');
};

/**
 * 获取投资组合概览
 * @param {string} userId - 用户ID
 * @returns {Promise<Object>} - 返回投资组合数据
 */
export const getPortfolioSummary = async (userId) => {
  // 模拟API请求延迟
  await delay(600);
  
  // 返回模拟数据
  return {
    success: true,
    data: {
      totalValue: 52680.75,
      availableCash: 10000.00,
      todayProfit: 235.21,
      todayProfitPercent: 0.45,
      holdingsCount: 5,
      holdings: [
        { 
          code: '001938', 
          name: '中欧时代先锋混合A', 
          shares: 10000.00, 
          nav: 1.5273, 
          marketValue: 15273.00,
          profit: 1273.00,
          profitPercent: 9.10,
          category: '混合型'
        },
        { 
          code: '110011', 
          name: '易方达优质精选混合', 
          shares: 5000.00, 
          nav: 2.7241, 
          marketValue: 13620.50,
          profit: 2120.50,
          profitPercent: 18.44,
          category: '混合型'
        },
        { 
          code: '000209', 
          name: '信诚新兴产业混合', 
          shares: 3000.00, 
          nav: 1.9563, 
          marketValue: 5868.90,
          profit: -131.10,
          profitPercent: -2.18,
          category: '混合型'
        }
      ]
    }
  };
  
  // 未来实现实际API调用
  // return await axios.get(`/api/portfolio/summary?userId=${userId}`);
};

/**
 * 执行交易订单
 * @param {Object} order - 交易订单对象
 * @param {string} order.action - 交易类型 (buy/sell)
 * @param {string} order.fundCode - 基金代码
 * @param {number} order.amount - 金额/份额
 * @returns {Promise<Object>} - 返回交易结果
 */
export const executeTradeOrder = async (order) => {
  // 模拟API请求延迟
  await delay(1200);
  
  // 模拟交易成功
  const now = new Date();
  const tradeId = `TR${now.getTime()}`;
  
  // 查找基金信息
  const marketData = await getMarketOverview();
  const fundInfo = marketData.data.find(item => item.code === order.fundCode && item.type === 'fund');
  
  // 如果找不到基金，返回错误
  if (!fundInfo) {
    return {
      success: false,
      message: `未找到基金代码 ${order.fundCode}`
    };
  }
  
  // 生成交易记录
  const newTrade = {
    id: tradeId,
    action: order.action,
    fundCode: order.fundCode,
    fundName: fundInfo.name,
    timestamp: now.toISOString(),
    status: 'completed'
  };
  
  // 买入操作
  if (order.action === 'buy') {
    newTrade.amount = order.amount;
    newTrade.shares = +(order.amount / fundInfo.value).toFixed(2);
    newTrade.nav = fundInfo.value;
  } 
  // 卖出操作
  else if (order.action === 'sell') {
    newTrade.shares = order.amount;
    newTrade.amount = +(order.amount * fundInfo.value).toFixed(2);
    newTrade.nav = fundInfo.value;
  }
  
  // 获取当前投资组合
  const portfolioResponse = await getPortfolioSummary();
  const currentPortfolio = portfolioResponse.data;
  
  // 更新投资组合（模拟）
  const updatedPortfolio = { ...currentPortfolio };
  
  if (order.action === 'buy') {
    // 减少可用资金
    updatedPortfolio.availableCash -= order.amount;
    
    // 查找是否已持有该基金
    const existingHolding = updatedPortfolio.holdings.find(h => h.code === order.fundCode);
    
    if (existingHolding) {
      // 更新现有持仓
      existingHolding.shares += newTrade.shares;
      existingHolding.marketValue = +(existingHolding.shares * existingHolding.nav).toFixed(2);
    } else {
      // 添加新持仓
      updatedPortfolio.holdings.push({
        code: order.fundCode,
        name: fundInfo.name,
        shares: newTrade.shares,
        nav: fundInfo.value,
        marketValue: newTrade.amount,
        profit: 0,
        profitPercent: 0,
        category: fundInfo.category
      });
      
      // 更新持仓数量
      updatedPortfolio.holdingsCount = updatedPortfolio.holdings.length;
    }
  } else if (order.action === 'sell') {
    // 增加可用资金
    updatedPortfolio.availableCash += newTrade.amount;
    
    // 查找持仓
    const holdingIndex = updatedPortfolio.holdings.findIndex(h => h.code === order.fundCode);
    
    if (holdingIndex >= 0) {
      const holding = updatedPortfolio.holdings[holdingIndex];
      
      // 更新份额
      holding.shares -= order.amount;
      
      // 如果份额为0，移除持仓
      if (holding.shares <= 0) {
        updatedPortfolio.holdings.splice(holdingIndex, 1);
        updatedPortfolio.holdingsCount = updatedPortfolio.holdings.length;
      } else {
        // 更新市值
        holding.marketValue = +(holding.shares * holding.nav).toFixed(2);
      }
    }
  }
  
  // 更新总资产价值
  updatedPortfolio.totalValue = updatedPortfolio.availableCash + 
    updatedPortfolio.holdings.reduce((sum, h) => sum + h.marketValue, 0);
  
  // 生成行为反馈
  const behaviorFeedback = await getBehaviorFeedback(order);
  
  return {
    success: true,
    message: `${order.action === 'buy' ? '买入' : '卖出'}成功`,
    data: {
      newTrade,
      updatedPortfolio,
      behaviorFeedback
    }
  };
};

/**
 * 获取交易历史
 * @param {Object} params - 查询参数
 * @param {string} params.userId - 用户ID
 * @param {number} params.page - 页码
 * @param {number} params.pageSize - 每页条数
 * @returns {Promise<Object>} - 返回交易历史数据
 */
export const getTradeHistory = async (params = {}) => {
  // 模拟API请求延迟
  await delay(500);
  
  // 返回模拟数据
  return {
    success: true,
    data: [
      {
        id: 'TR1663259750000',
        action: 'buy',
        fundCode: '001938',
        fundName: '中欧时代先锋混合A',
        timestamp: '2023-12-16T10:15:50Z',
        amount: 10000.00,
        shares: 6545.54,
        nav: 1.5275,
        status: 'completed'
      },
      {
        id: 'TR1663186950000',
        action: 'buy',
        fundCode: '110011',
        fundName: '易方达优质精选混合',
        timestamp: '2023-12-15T14:15:50Z',
        amount: 5000.00,
        shares: 1835.47,
        nav: 2.7241,
        status: 'completed'
      },
      {
        id: 'TR1663100550000',
        action: 'sell',
        fundCode: '519068',
        fundName: '汇添富成长焦点混合',
        timestamp: '2023-12-14T14:15:50Z',
        amount: 2941.20,
        shares: 1000.00,
        nav: 2.9412,
        status: 'completed'
      }
    ]
  };
};

/**
 * 获取行为反馈
 * 基于用户交易行为提供反馈和建议
 * @param {Object} order - 最近的交易订单（可选）
 * @returns {Promise<Object>} - 返回行为反馈数据
 */
export const getBehaviorFeedback = async (order = null) => {
  // 模拟API请求延迟
  await delay(800);
  
  // 根据交易历史分析用户行为（模拟）
  // 实际应用中应该基于更复杂的分析逻辑
  
  // 基本反馈数据
  const feedback = {
    overallScore: 72,  // 0-100分
    scoreDescription: '您的投资行为总体表现良好，但存在一些可以改进的地方。继续保持纪律性投资，并注意控制情绪化决策。',
    detectedBehaviors: [
      {
        name: '过度交易',
        severity: 'medium',
        description: '您在短期内进行了较多交易操作，可能导致不必要的交易成本。建议制定明确的投资计划并坚持执行。'
      },
      {
        name: '追涨情绪',
        severity: 'low',
        description: '您偶尔会在基金涨幅较大后买入，这可能是追涨心理的体现。建议关注基金的长期价值而非短期表现。'
      }
    ],
    suggestions: [
      {
        title: '建立交易计划',
        content: '在交易前设定明确的买入与卖出条件，避免受市场短期波动影响而频繁交易。'
      },
      {
        title: '分散投资',
        content: '您的投资较为集中在混合型基金，建议适当分散到不同类型、不同风格的基金中以降低风险。'
      },
      {
        title: '定期投资',
        content: '考虑采用定投策略，通过固定时间、固定金额的投资方式降低择时风险。'
      }
    ]
  };
  
  // 如果提供了最新交易，增加针对性反馈
  if (order) {
    // 针对买入操作
    if (order.action === 'buy') {
      feedback.detectedBehaviors.unshift({
        name: '积极投资',
        severity: 'low',
        description: '您选择了合适的时机进行买入操作，这体现了良好的投资意识。'
      });
    }
    // 针对卖出操作
    else if (order.action === 'sell') {
      feedback.detectedBehaviors.unshift({
        name: '利润锁定',
        severity: 'low',
        description: '您选择了适当的时机进行卖出操作，这有助于锁定收益并控制风险。'
      });
    }
  }
  
  return {
    success: true,
    data: feedback
  };
  
  // 未来实现实际API调用
  // return await axios.get('/api/behavior/feedback', { params: { orderId: order?.id } });
};
</file>

<file path="src/styles/composable-classes.css">
/**
 * 可组合的CSS类
 * 这些类可用于快速构建UI，避免重复编写常见样式
 */

/* ===== 布局类 ===== */

/* 容器类 */
.container {
  width: 100%;
  max-width: var(--page-max-width);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--page-padding-x);
  padding-right: var(--page-padding-x);
}

.container-fluid {
  width: 100%;
  padding-left: var(--page-padding-x);
  padding-right: var(--page-padding-x);
}

.container-narrow {
  max-width: var(--content-narrow-width);
}

/* 显示类型 */
.d-block { display: block; }
.d-inline { display: inline; }
.d-inline-block { display: inline-block; }
.d-flex { display: flex; }
.d-grid { display: grid; }
.d-none { display: none; }

/* Flex布局类 */
.flex-row { flex-direction: row; }
.flex-column { flex-direction: column; }
.flex-row-reverse { flex-direction: row-reverse; }
.flex-column-reverse { flex-direction: column-reverse; }

.flex-wrap { flex-wrap: wrap; }
.flex-nowrap { flex-wrap: nowrap; }
.flex-wrap-reverse { flex-wrap: wrap-reverse; }

.flex-grow-0 { flex-grow: 0; }
.flex-grow-1 { flex-grow: 1; }
.flex-shrink-0 { flex-shrink: 0; }
.flex-shrink-1 { flex-shrink: 1; }

/* Flex 对齐类 */
.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }

.items-start { align-items: flex-start; }
.items-end { align-items: flex-end; }
.items-center { align-items: center; }
.items-baseline { align-items: baseline; }
.items-stretch { align-items: stretch; }

.content-start { align-content: flex-start; }
.content-end { align-content: flex-end; }
.content-center { align-content: center; }
.content-between { align-content: space-between; }
.content-around { align-content: space-around; }
.content-stretch { align-content: stretch; }

.self-auto { align-self: auto; }
.self-start { align-self: flex-start; }
.self-end { align-self: flex-end; }
.self-center { align-self: center; }
.self-stretch { align-self: stretch; }

/* Grid布局类 */
.grid-cols-1 { grid-template-columns: repeat(1, 1fr); }
.grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
.grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
.grid-cols-4 { grid-template-columns: repeat(4, 1fr); }
.grid-cols-5 { grid-template-columns: repeat(5, 1fr); }
.grid-cols-6 { grid-template-columns: repeat(6, 1fr); }

.grid-rows-1 { grid-template-rows: repeat(1, 1fr); }
.grid-rows-2 { grid-template-rows: repeat(2, 1fr); }
.grid-rows-3 { grid-template-rows: repeat(3, 1fr); }

/* 间距类 */
.gap-xs { gap: var(--spacing-xs); }
.gap-sm { gap: var(--spacing-sm); }
.gap-md { gap: var(--spacing-md); }
.gap-lg { gap: var(--spacing-lg); }
.gap-xl { gap: var(--spacing-xl); }

.gap-x-xs { column-gap: var(--spacing-xs); }
.gap-x-sm { column-gap: var(--spacing-sm); }
.gap-x-md { column-gap: var(--spacing-md); }
.gap-x-lg { column-gap: var(--spacing-lg); }
.gap-x-xl { column-gap: var(--spacing-xl); }

.gap-y-xs { row-gap: var(--spacing-xs); }
.gap-y-sm { row-gap: var(--spacing-sm); }
.gap-y-md { row-gap: var(--spacing-md); }
.gap-y-lg { row-gap: var(--spacing-lg); }
.gap-y-xl { row-gap: var(--spacing-xl); }

/* ===== 间距类 ===== */

/* 外边距 */
.m-0 { margin: 0; }
.m-xs { margin: var(--spacing-xs); }
.m-sm { margin: var(--spacing-sm); }
.m-md { margin: var(--spacing-md); }
.m-lg { margin: var(--spacing-lg); }
.m-xl { margin: var(--spacing-xl); }
.m-auto { margin: auto; }

.mx-0 { margin-left: 0; margin-right: 0; }
.mx-xs { margin-left: var(--spacing-xs); margin-right: var(--spacing-xs); }
.mx-sm { margin-left: var(--spacing-sm); margin-right: var(--spacing-sm); }
.mx-md { margin-left: var(--spacing-md); margin-right: var(--spacing-md); }
.mx-lg { margin-left: var(--spacing-lg); margin-right: var(--spacing-lg); }
.mx-xl { margin-left: var(--spacing-xl); margin-right: var(--spacing-xl); }
.mx-auto { margin-left: auto; margin-right: auto; }

.my-0 { margin-top: 0; margin-bottom: 0; }
.my-xs { margin-top: var(--spacing-xs); margin-bottom: var(--spacing-xs); }
.my-sm { margin-top: var(--spacing-sm); margin-bottom: var(--spacing-sm); }
.my-md { margin-top: var(--spacing-md); margin-bottom: var(--spacing-md); }
.my-lg { margin-top: var(--spacing-lg); margin-bottom: var(--spacing-lg); }
.my-xl { margin-top: var(--spacing-xl); margin-bottom: var(--spacing-xl); }

.mt-0 { margin-top: 0; }
.mt-xs { margin-top: var(--spacing-xs); }
.mt-sm { margin-top: var(--spacing-sm); }
.mt-md { margin-top: var(--spacing-md); }
.mt-lg { margin-top: var(--spacing-lg); }
.mt-xl { margin-top: var(--spacing-xl); }

.mr-0 { margin-right: 0; }
.mr-xs { margin-right: var(--spacing-xs); }
.mr-sm { margin-right: var(--spacing-sm); }
.mr-md { margin-right: var(--spacing-md); }
.mr-lg { margin-right: var(--spacing-lg); }
.mr-xl { margin-right: var(--spacing-xl); }

.mb-0 { margin-bottom: 0; }
.mb-xs { margin-bottom: var(--spacing-xs); }
.mb-sm { margin-bottom: var(--spacing-sm); }
.mb-md { margin-bottom: var(--spacing-md); }
.mb-lg { margin-bottom: var(--spacing-lg); }
.mb-xl { margin-bottom: var(--spacing-xl); }

.ml-0 { margin-left: 0; }
.ml-xs { margin-left: var(--spacing-xs); }
.ml-sm { margin-left: var(--spacing-sm); }
.ml-md { margin-left: var(--spacing-md); }
.ml-lg { margin-left: var(--spacing-lg); }
.ml-xl { margin-left: var(--spacing-xl); }

/* 内边距 */
.p-0 { padding: 0; }
.p-xs { padding: var(--spacing-xs); }
.p-sm { padding: var(--spacing-sm); }
.p-md { padding: var(--spacing-md); }
.p-lg { padding: var(--spacing-lg); }
.p-xl { padding: var(--spacing-xl); }

.px-0 { padding-left: 0; padding-right: 0; }
.px-xs { padding-left: var(--spacing-xs); padding-right: var(--spacing-xs); }
.px-sm { padding-left: var(--spacing-sm); padding-right: var(--spacing-sm); }
.px-md { padding-left: var(--spacing-md); padding-right: var(--spacing-md); }
.px-lg { padding-left: var(--spacing-lg); padding-right: var(--spacing-lg); }
.px-xl { padding-left: var(--spacing-xl); padding-right: var(--spacing-xl); }

.py-0 { padding-top: 0; padding-bottom: 0; }
.py-xs { padding-top: var(--spacing-xs); padding-bottom: var(--spacing-xs); }
.py-sm { padding-top: var(--spacing-sm); padding-bottom: var(--spacing-sm); }
.py-md { padding-top: var(--spacing-md); padding-bottom: var(--spacing-md); }
.py-lg { padding-top: var(--spacing-lg); padding-bottom: var(--spacing-lg); }
.py-xl { padding-top: var(--spacing-xl); padding-bottom: var(--spacing-xl); }

.pt-0 { padding-top: 0; }
.pt-xs { padding-top: var(--spacing-xs); }
.pt-sm { padding-top: var(--spacing-sm); }
.pt-md { padding-top: var(--spacing-md); }
.pt-lg { padding-top: var(--spacing-lg); }
.pt-xl { padding-top: var(--spacing-xl); }

.pr-0 { padding-right: 0; }
.pr-xs { padding-right: var(--spacing-xs); }
.pr-sm { padding-right: var(--spacing-sm); }
.pr-md { padding-right: var(--spacing-md); }
.pr-lg { padding-right: var(--spacing-lg); }
.pr-xl { padding-right: var(--spacing-xl); }

.pb-0 { padding-bottom: 0; }
.pb-xs { padding-bottom: var(--spacing-xs); }
.pb-sm { padding-bottom: var(--spacing-sm); }
.pb-md { padding-bottom: var(--spacing-md); }
.pb-lg { padding-bottom: var(--spacing-lg); }
.pb-xl { padding-bottom: var(--spacing-xl); }

.pl-0 { padding-left: 0; }
.pl-xs { padding-left: var(--spacing-xs); }
.pl-sm { padding-left: var(--spacing-sm); }
.pl-md { padding-left: var(--spacing-md); }
.pl-lg { padding-left: var(--spacing-lg); }
.pl-xl { padding-left: var(--spacing-xl); }

/* ===== 边框和圆角类 ===== */
.rounded-none { border-radius: 0; }
.rounded-sm { border-radius: var(--border-radius-sm); }
.rounded-md { border-radius: var(--border-radius-md); }
.rounded-lg { border-radius: var(--border-radius-lg); }
.rounded-xl { border-radius: var(--border-radius-xl); }
.rounded-full { border-radius: var(--border-radius-full); }

/* ===== 背景和卡片类 ===== */
.bg-transparent { background-color: transparent; }
.bg-white { background-color: white; }
.bg-black { background-color: black; }
.bg-light { background-color: var(--background-light); }
.bg-card { background-color: var(--card-background); }
.bg-primary { background-color: var(--primary-color); }
.bg-primary-light { background-color: var(--primary-light); }
.bg-success { background-color: var(--success-color); }
.bg-error { background-color: var(--error-color); }
.bg-warning { background-color: var(--warning-color); }
.bg-info { background-color: var(--info-color); }

.bg-neutral-50 { background-color: var(--neutral-50); }
.bg-neutral-100 { background-color: var(--neutral-100); }
.bg-neutral-200 { background-color: var(--neutral-200); }
.bg-neutral-300 { background-color: var(--neutral-300); }
.bg-neutral-400 { background-color: var(--neutral-400); }
.bg-neutral-500 { background-color: var(--neutral-500); }
.bg-neutral-600 { background-color: var(--neutral-600); }
.bg-neutral-700 { background-color: var(--neutral-700); }
.bg-neutral-800 { background-color: var(--neutral-800); }
.bg-neutral-900 { background-color: var(--neutral-900); }

/* 卡片类 */
.card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  margin-bottom: var(--card-margin-bottom);
}

.card-sm {
  padding: var(--spacing-md);
}

.card-lg {
  padding: var(--spacing-xl);
}

/* ===== 阴影类 ===== */
.shadow-none { box-shadow: none; }
.shadow-sm { box-shadow: var(--shadow-sm); }
.shadow-md { box-shadow: var(--shadow-md); }
.shadow-lg { box-shadow: var(--shadow-lg); }

/* ===== 响应式类 ===== */
@media (max-width: var(--breakpoint-xl)) {
  .xl\:d-none { display: none; }
  .xl\:d-block { display: block; }
  .xl\:d-flex { display: flex; }
  .xl\:flex-col { flex-direction: column; }
  .xl\:grid-cols-1 { grid-template-columns: repeat(1, 1fr); }
  .xl\:grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
}

@media (max-width: var(--breakpoint-lg)) {
  .lg\:d-none { display: none; }
  .lg\:d-block { display: block; }
  .lg\:d-flex { display: flex; }
  .lg\:flex-col { flex-direction: column; }
  .lg\:grid-cols-1 { grid-template-columns: repeat(1, 1fr); }
  .lg\:grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
}

@media (max-width: 768px) {
  .md\:d-none { display: none; }
  .md\:d-block { display: block; }
  .md\:d-flex { display: flex; }
  .md\:flex-col { flex-direction: column; }
  .md\:grid-cols-1 { grid-template-columns: repeat(1, 1fr); }
}

@media (max-width: 576px) {
  .sm\:d-none { display: none; }
  .sm\:d-block { display: block; }
  .sm\:d-flex { display: flex; }
  .sm\:flex-col { flex-direction: column; }
  .sm\:grid-cols-1 { grid-template-columns: repeat(1, 1fr); }
}
</file>

<file path="src/styles/dark-theme.css">
/* 深色模式变量 */
.dark-theme {
  /* 主色调 - 优化亮度和对比度 */
  --primary-color: #4287f5; /* 增加明亮度，提高在深色背景上的可见性 */
  --primary-light: #6fb0ff; /* 调亮以提供更好的层次感 */
  --primary-dark: #2563eb;
  --primary-bg: rgba(66, 135, 245, 0.12); /* 降低不透明度，减少视觉压力 */

  /* 辅助色 - 调整饱和度与对比度 */
  --accent-color: #b292fa; /* 增加亮度 */
  --accent-light: #d0c3fd; /* 更软的色调 */
  --accent-dark: #8b5cf6;
  
  /* 功能色 - 调整为深色背景下更加舒适的色调 */
  --success-color: #2dcb92; /* 减少绿色亮度，更舒适 */
  --success-light: #5de0ad; /* 减少饱和度 */
  --success-dark: #10b981;
  
  --error-color: #f47373; /* 轻微减少亮度，降低视觉刺激 */
  --error-light: #fcb5b5; /* 更柔和的错误提示 */
  --error-dark: #ef4444;
  
  --warning-color: #f5ba45; /* 降低亮度，更适合深色模式 */
  --warning-light: #f8cc64; /* 降低饱和度 */
  --warning-dark: #f59e0b;
  
  --info-color: #38d1e6; /* 调整青色以提高易读性 */
  --info-light: #78e6f2; /* 调亮 */
  --info-dark: #06b6d4;
  
  /* 中性色 - 重新调整亮度梯度，提供更自然的过渡 */
  --neutral-50: #121214; /* 更深的背景色 */
  --neutral-100: #1e1e21; /* 更柔和的对比 */
  --neutral-200: #2e2e33; /* 增加层次感 */
  --neutral-300: #45454d; /* 更均衡的灰阶 */
  --neutral-400: #646470; /* 提高可辨识度 */
  --neutral-500: #9292a0; /* 降低饱和度 */
  --neutral-600: #c8c8d0; /* 提高文本可读性 */
  --neutral-700: #dfdfe5; /* 更柔和的高亮色 */
  --neutral-800: #ebebf0; /* 降低刺眼程度 */
  --neutral-900: #f7f7fa; /* 更温和的最亮色调 */
  
  /* 背景色 - 调整以减少眼部疲劳 */
  --background-light: #141417; /* 微调以减轻视觉压力 */
  --background-dark: #0a0a0c; /* 更深但不刺眼 */
  --card-background: #1e1e21; /* 与中性色协调 */
  
  /* 文本颜色 - 优化对比度和易读性 */
  --text-primary: #f0f0f5; /* 降低白色强度，减轻眼部压力 */
  --text-secondary: #c8c8d0; /* 提高可读性 */
  --text-tertiary: #9292a0; /* 更柔和的辅助文本 */
  --text-light: #25252c; /* 调整以匹配整体色调 */
  
  /* 特殊文本颜色 - 增强层次感和舒适度 */
  --text-heading: #f7f7fa; /* 不使用纯白，减轻视觉冲击 */
  --text-bold: #f0f0f5; /* 粗体文本稍微调暗 */
  --text-title: #f0f0f5; /* 统一标题文本 */
  --text-description: #c8c8d0; /* 提高描述文本可读性 */
  --text-meta: #9292a0; /* 协调元数据文本 */
  --text-hint: #646470; /* 提示文本更明显 */
  --text-link: #6fb0ff; /* 链接更明显 */
  --text-link-hover: #a3d0ff; /* 鼠标悬停效果更明显 */
  
  /* 表格和边框颜色 - 提供更细腻的视觉分隔 */
  --border-color: #2e2e33; /* 更柔和的边框 */
  --table-header-bg: #1e1e21; /* 与卡片背景协调 */
  --table-row-hover: #2e2e33; /* 更明显的悬停效果 */
  
  /* 组件背景 - 统一协调各组件背景色 */
  --header-background: #1e1e21; /* 与卡片背景统一 */
  --sidebar-background: #1e1e21; /* 统一侧边栏背景 */
  --dropdown-background: #141417; /* 下拉菜单稍暗 */
  --tooltip-background: #25252c; /* 提高工具提示可见性 */
  --modal-background: #1e1e21; /* 统一模态框背景 */
  
  /* 阴影 - 优化深色背景下的立体感 */
  --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.3), 0 1px 2px 0 rgba(0, 0, 0, 0.2);
  --shadow-md: 0 4px 8px -1px rgba(0, 0, 0, 0.35), 0 2px 5px -1px rgba(0, 0, 0, 0.3);
  --shadow-lg: 0 10px 20px -3px rgba(0, 0, 0, 0.5), 0 4px 8px -2px rgba(0, 0, 0, 0.3);
  
  /* 表单元素 - 改善表单交互体验 */
  --input-bg: #25252c; /* 提高与背景的对比度 */
  --input-text: #f0f0f5; /* 保持文本清晰可见 */
  --input-border: #45454d; /* 边框更明显 */
  --input-focus-border: #6fb0ff; /* 聚焦状态更明显 */
  
  /* 新增：滚动条样式 */
  --scrollbar-thumb: #45454d; /* 滚动条滑块 */
  --scrollbar-track: #1e1e21; /* 滚动条轨道 */
  
  /* 新增：选择文本颜色 */
  --selection-bg: rgba(66, 135, 245, 0.3); /* 文本选择背景 */
  --selection-text: #f0f0f5; /* 文本选择颜色 */
}

/* 自定义滚动条 */
.dark-theme *::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.dark-theme *::-webkit-scrollbar-thumb {
  background-color: var(--scrollbar-thumb);
  border-radius: 4px;
}

.dark-theme *::-webkit-scrollbar-track {
  background-color: var(--scrollbar-track);
}

/* 文本选择样式 */
.dark-theme ::selection {
  background-color: var(--selection-bg);
  color: var(--selection-text);
}

/* 图表深色模式样式增强 - 添加到文件末尾 */

/* 图表通用深色模式样式 */
.dark-theme .recharts-wrapper {
  background-color: transparent;
}

.dark-theme .recharts-surface {
  filter: brightness(0.9);
}

/* 文本样式 */
.dark-theme .recharts-text,
.dark-theme .recharts-cartesian-axis-tick-value,
.dark-theme .recharts-legend-item-text {
  fill: var(--text-secondary) !important;
}

/* 网格线 */
.dark-theme .recharts-cartesian-grid-horizontal line,
.dark-theme .recharts-cartesian-grid-vertical line {
  stroke: var(--neutral-300) !important;
  opacity: 0.3;
}

/* 图例样式 */
.dark-theme .recharts-default-legend {
  background-color: transparent !important;
}

/* 工具提示 */
.dark-theme .recharts-tooltip-wrapper .recharts-default-tooltip {
  background-color: var(--tooltip-background) !important;
  border-color: var(--border-color) !important;
  box-shadow: var(--shadow-md) !important;
}

.dark-theme .recharts-tooltip-wrapper .recharts-tooltip-label {
  color: var(--text-heading) !important;
}

.dark-theme .recharts-tooltip-wrapper .recharts-tooltip-item-list {
  color: var(--text-primary) !important;
}

/* 重新平衡图表特定样式 */
.dark-theme .allocation-chart .chart-container {
  background-color: var(--card-background);
}

.dark-theme .allocation-chart .allocation-table th {
  background-color: var(--table-header-bg);
  color: var(--text-secondary);
}

.dark-theme .allocation-chart .allocation-table td {
  border-color: var(--border-color);
  color: var(--text-primary);
}

.dark-theme .allocation-chart .significant-diff {
  color: var(--error-color);
}
</file>

<file path="src/styles/layout-variables.css">
/* 布局变量 - 专门用于统一不同页面和组件的布局变量 */
:root {
  /* 页面容器尺寸 */
  --page-max-width: 1200px;
  --page-min-width: 320px;
  
  /* 页面间距 */
  --page-padding-x: 2rem;
  --page-padding-y: 2rem;
  --page-padding-x-mobile: 1rem;
  --page-padding-y-mobile: 1.5rem;
  
  /* 顶部导航栏相关 */
  --header-height: 64px;
  --header-z-index: 100;
  
  /* 侧边栏相关 */
  --sidebar-width: 220px;
  --sidebar-collapsed-width: 60px;
  --sidebar-z-index: 90;
  
  /* 页面顶部间距 - 用于统一所有页面顶部与导航栏的间距 */
  --page-top-spacing: calc(var(--header-height) + 0rem);
  
  /* 组件间距 - 使用统一的变量命名 */
  --component-margin-bottom: var(--spacing-md);
  --section-margin-bottom: var(--spacing-xl);
  --subsection-margin-bottom: var(--spacing-lg);
  
  /* 标题间距 */
  --section-title-margin-bottom: var(--spacing-md);
  --subsection-title-margin-bottom: var(--spacing-sm);
  
  /* 卡片间距和边距 */
  --card-margin-bottom: var(--spacing-lg);
  --card-padding: var(--spacing-lg);
  --card-padding-mobile: 1rem;
  --card-title-margin-bottom: 1rem;
  
  /* 页面容器设置 */
  --page-container-width: var(--page-max-width);
  --page-container-padding-x: var(--page-padding-x);
  --page-container-padding-y: var(--page-padding-y);
  --page-container-margin: 0 auto;
  
  /* 内容容器设置 */
  --content-container-padding: var(--spacing-lg);
  --content-narrow-padding: var(--spacing-lg);
  
  /* 标题块间距 */
  --header-block-margin-bottom: var(--spacing-xl);
  --header-title-margin-bottom: var(--spacing-sm);
  --header-description-margin-bottom: var(--spacing-md);
  
  /* 区域和区块间距 */
  --section-margin-bottom: var(--spacing-xl);
  --section-title-margin-bottom: var(--spacing-md);
  --subsection-margin-bottom: var(--spacing-lg);
  --subsection-title-margin-bottom: var(--spacing-sm);
  
  /* 卡片设置 */
  --card-margin-bottom: var(--spacing-lg);
  --card-padding: var(--spacing-lg);
  --card-title-margin-bottom: var(--spacing-md);
  
  /* 表单设置 */
  --form-group-margin-bottom: var(--spacing-md);
  --form-label-margin-bottom: var(--spacing-xs);
  --form-input-padding: var(--spacing-sm) var(--spacing-md);
  
  /* 移动设备调整 */
  --page-container-padding-x-mobile: var(--spacing-mobile-md);
  --page-container-padding-y-mobile: var(--spacing-mobile-md);
  --card-padding-mobile: var(--spacing-mobile-md);
  --section-margin-bottom-mobile: var(--spacing-mobile-lg);
}
</file>

<file path="src/styles/TextStyles.css">
/* 文本样式系统 - 遵循组合式设计 */

/* 基础文本样式 */
.text-base {
  font-family: var(--font-family);
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-normal);
  color: var(--text-primary);
}

/* ===== 文本层级样式 ===== */

/* 主要文本 */
.text-primary {
  color: var(--text-primary);
}

/* 次要文本 */
.text-secondary {
  color: var(--text-secondary);
}

/* 第三级文本 */
.text-tertiary {
  color: var(--text-tertiary);
}

/* 描述性文本 */
.text-description {
  color: var(--text-description);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-relaxed);
}

/* 元数据文本 */
.text-meta {
  color: var(--text-meta);
  font-size: var(--font-size-xs);
}

/* 标签文本 */
.text-tag {
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-medium);
  color: var(--text-tertiary);
}

/* 标题文本 */
.text-heading {
  color: var(--text-heading);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-heading);
  letter-spacing: var(--letter-spacing-heading);
}

/* 提示性文本 */
.text-hint {
  color: var(--text-hint);
  font-size: var(--font-size-sm);
  font-style: italic;
}

/* 链接文本 */
.text-link {
  color: var(--text-link);
  text-decoration: none;
  cursor: pointer;
}

.text-link:hover {
  color: var(--text-link-hover);
  text-decoration: underline;
}

/* ===== 文本状态样式 ===== */
.text-success {
  color: var(--success-color);
}

.text-error {
  color: var(--error-color);
}

.text-warning {
  color: var(--warning-color);
}

.text-info {
  color: var(--info-color);
}

/* ===== 文本大小样式 ===== */
.text-xs {
  font-size: var(--font-size-xs);
}

.text-sm {
  font-size: var(--font-size-sm);
}

.text-md {
  font-size: var(--font-size-md);
}

.text-lg {
  font-size: var(--font-size-lg);
}

.text-xl {
  font-size: var(--font-size-xl);
}

.text-2xl {
  font-size: var(--font-size-2xl);
}

.text-3xl {
  font-size: var(--font-size-3xl);
}

.text-4xl {
  font-size: var(--font-size-4xl);
}

/* ===== 文本排版样式 ===== */
.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-justify {
  text-align: justify;
}

/* ===== 文本装饰样式 ===== */
.text-underline {
  text-decoration: underline;
}

.text-line-through {
  text-decoration: line-through;
}

.text-no-underline {
  text-decoration: none;
}

.text-uppercase {
  text-transform: uppercase;
}

.text-lowercase {
  text-transform: lowercase;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-italic {
  font-style: italic;
}

.text-normal-style {
  font-style: normal;
}

/* ===== 文本行高样式 ===== */
.text-leading-tight {
  line-height: var(--line-height-tight);
}

.text-leading-normal {
  line-height: var(--line-height-normal);
}

.text-leading-relaxed {
  line-height: var(--line-height-relaxed);
}

/* ===== 文本字体粗细 ===== */
.text-normal {
  font-weight: var(--font-weight-normal);
}

.text-medium {
  font-weight: var(--font-weight-medium);
}

.text-bold {
  font-weight: var(--font-weight-bold);
}

.text-extrabold {
  font-weight: var(--font-weight-extrabold);
}

/* ===== 文本截断样式 ===== */
.text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.text-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.text-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* ===== 标题样式 ===== */

/* 统一的标题样式 */
h1, h2, h3, h4, h5, h6 {
  font-family: var(--font-family-heading, var(--font-family));
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-heading);
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  color: var(--text-heading);
}

h1 {
  font-size: var(--heading-h1-size);
  letter-spacing: var(--letter-spacing-heading);
}

h2 {
  font-size: var(--heading-h2-size);
  letter-spacing: var(--letter-spacing-heading);
}

h3 {
  font-size: var(--heading-h3-size);
}

h4 {
  font-size: var(--heading-h4-size);
}

h5 {
  font-size: var(--heading-h5-size);
}

h6 {
  font-size: var(--heading-h6-size);
}

/* ===== 深色模式适配 ===== */
.dark-theme .text-primary {
  color: var(--neutral-50);
}

.dark-theme .text-secondary {
  color: var(--neutral-200);
}

.dark-theme .text-tertiary {
  color: var(--neutral-400);
}

.dark-theme .text-description {
  color: var(--neutral-300);
}

.dark-theme .text-meta {
  color: var(--neutral-400);
}

.dark-theme .text-tag {
  color: var(--neutral-400);
}

.dark-theme .text-heading {
  color: white;
}

.dark-theme .text-hint {
  color: var(--neutral-400);
}

.dark-theme .text-link {
  color: var(--primary-light);
}

.dark-theme .text-link:hover {
  color: var(--primary-light);
}
</file>

<file path="src/styles/typography.css">
/* 排版组合样式 - 提供预定义的文字风格组合 */

/* 页面级标题 - 最大标题 */
.title-hero {
  font-size: var(--heading-h1-size);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-heading);
  color: var(--text-heading);
  margin-bottom: var(--spacing-lg);
  letter-spacing: var(--letter-spacing-heading);
}

/* 页面标题 */
.title-page {
  font-size: var(--heading-h2-size);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-heading);
  color: var(--text-heading);
  margin-bottom: var(--spacing-md);
}

/* 区域标题 */
.title-section {
  font-size: var(--heading-h3-size);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-heading);
  color: var(--text-heading);
  margin-bottom: var(--spacing-md);
}

/* 卡片标题 */
.title-card {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-heading);
  color: var(--text-heading);
  margin-bottom: var(--spacing-sm);
}

/* 分组标题 */
.title-group {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  line-height: var(--line-height-normal);
  color: var(--text-primary);
  margin-bottom: var(--spacing-xs);
}

/* 标准正文段落 */
.paragraph {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-relaxed);
  color: var(--text-primary);
  margin-bottom: var(--spacing-md);
}

/* 次级段落 */
.paragraph-secondary {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-relaxed);
  color: var(--text-secondary);
  margin-bottom: var(--spacing-md);
}

/* 小型段落 */
.paragraph-small {
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-relaxed);
  color: var(--text-secondary);
  margin-bottom: var(--spacing-sm);
}

/* 标注文本 */
.text-caption {
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-normal);
  color: var(--text-tertiary);
  margin-bottom: var(--spacing-xs);
}

/* 强调文本 */
.text-emphasis {
  font-weight: var(--font-weight-medium);
  color: var(--text-primary);
}

/* 引用块 */
.blockquote {
  font-size: var(--font-size-md);
  font-style: italic;
  color: var(--text-secondary);
  padding-left: var(--spacing-md);
  border-left: 4px solid var(--neutral-300);
  margin: var(--spacing-md) 0;
  line-height: var(--line-height-relaxed);
}

/* 列表样式 */
.list {
  margin: 0 0 var(--spacing-md) var(--spacing-lg);
  padding: 0;
}

.list li {
  margin-bottom: var(--spacing-xs);
  line-height: var(--line-height-relaxed);
}

/* 描述性段落 */
.description {
  font-size: var(--font-size-md);
  color: var(--text-description);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--spacing-lg);
  max-width: var(--content-narrow-width);
}

/* 提示文本 */
.text-tip {
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
  line-height: var(--line-height-normal);
  font-style: italic;
}

/* 通用状态文本 */
.text-state-success {
  color: var(--success-color);
}

.text-state-error {
  color: var(--error-color);
}

.text-state-warning {
  color: var(--warning-color);
}

.text-state-info {
  color: var(--info-color);
}

/* 带有符号的列表 */
.checklist {
  list-style: none;
  margin: 0 0 var(--spacing-md) 0;
  padding: 0;
}

.checklist li {
  position: relative;
  padding-left: var(--spacing-lg);
  margin-bottom: var (--spacing-sm);
  line-height: var(--line-height-relaxed);
}

.checklist li::before {
  content: "✓";
  position: absolute;
  left: 0;
  color: var(--success-color);
  font-weight: var(--font-weight-bold);
}

/* 数值标签 */
.number-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 1.5rem;
  height: 1.5rem;
  padding: 0 0.375rem;
  border-radius: var(--border-radius-full);
  background-color: var(--primary-color);
  color: white;
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-medium);
}

/* 深色模式调整 */
.dark-theme .title-hero,
.dark-theme .title-page,
.dark-theme .title-section,
.dark-theme .title-card,
.dark-theme .title-group {
  color: var(--text-heading);
}

.dark-theme .paragraph {
  color: var(--text-primary);
}

.dark-theme .paragraph-secondary,
.dark-theme .paragraph-small {
  color: var(--text-secondary);
}

.dark-theme .text-caption {
  color: var(--text-tertiary);
}

.dark-theme .text-emphasis {
  color: var(--text-primary);
}

.dark-theme .blockquote {
  color: var(--text-secondary);
  border-left-color: var(--neutral-600);
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-md)) {
  .title-hero {
    font-size: calc(var(--heading-h1-size) * 0.8);
  }
  
  .title-page {
    font-size: calc(var(--heading-h2-size) * 0.85);
  }
}
</file>

<file path="src/utils/formatters.js">
/**
 * 格式化工具函数集合
 * 用于在应用中统一数据格式化方式
 */

/**
 * 格式化货币值为人民币格式
 * @param {number} value - 要格式化的数值
 * @param {Object} options - 格式化选项
 * @param {number} options.decimals - 小数位数，默认为2
 * @param {boolean} options.showSymbol - 是否显示货币符号，默认为true
 * @param {boolean} options.compact - 是否使用紧凑格式（如：1.2万），默认为false
 * @returns {string} 格式化后的货币字符串
 */
export const formatCurrency = (value, { decimals = 2, showSymbol = true, compact = false } = {}) => {
  if (value === null || value === undefined) return '--';
  
  try {
    if (compact) {
      return formatCompactCurrency(value, { decimals, showSymbol });
    }
    
    const formattedValue = value.toLocaleString('zh-CN', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    });
    
    return showSymbol ? `¥${formattedValue}` : formattedValue;
  } catch (error) {
    console.error('formatCurrency error:', error);
    return '--';
  }
};

/**
 * 以紧凑格式显示货币值（适用于大数额显示）
 * @param {number} value - 货币值
 * @param {Object} options - 格式化选项
 * @param {number} options.decimals - 小数位数
 * @param {boolean} options.showSymbol - 是否显示货币符号
 * @returns {string} 格式化后的货币字符串
 */
const formatCompactCurrency = (value, { decimals = 2, showSymbol = true } = {}) => {
  if (value === null || value === undefined) return '--';
  
  let formattedValue = '';
  const absValue = Math.abs(value);
  
  if (absValue >= 1000000000) {
    formattedValue = (value / 1000000000).toFixed(decimals) + '亿';
  } else if (absValue >= 10000) {
    formattedValue = (value / 10000).toFixed(decimals) + '万';
  } else {
    formattedValue = value.toFixed(decimals);
  }
  
  return showSymbol ? `¥${formattedValue}` : formattedValue;
};

/**
 * 格式化百分比值
 * @param {number} value - 要格式化的百分比值（0.1 表示 10%）
 * @param {Object} options - 格式化选项
 * @param {number} options.decimals - 小数位数，默认为2
 * @param {boolean} options.showSign - 是否显示正负号，默认为false
 * @param {boolean} options.colorful - 是否返回带颜色的文本（需与CSS结合），默认为false
 * @returns {string|Object} 格式化后的百分比字符串或带有color属性的对象
 */
export const formatPercent = (value, { decimals = 2, showSign = false, colorful = false } = {}) => {
  if (value === null || value === undefined) return '--';
  
  try {
    const sign = showSign && value > 0 ? '+' : '';
    const formattedValue = (value * 100).toFixed(decimals);
    const result = `${sign}${formattedValue}%`;
    
    if (!colorful) return result;
    
    // 返回带颜色信息的对象，需配合CSS或style使用
    return {
      text: result,
      color: value > 0 ? 'var(--success-color)' : value < 0 ? 'var(--error-color)' : 'inherit'
    };
  } catch (error) {
    console.error('formatPercent error:', error);
    return '--';
  }
};

/**
 * 格式化日期
 * @param {string|Date} dateInput - 日期字符串或Date对象
 * @param {string} format - 格式类型: 'short'(年月日), 'long'(年月日时分), 'full'(年月日时分秒), 'custom'(自定义)
 * @param {string} customFormat - 自定义格式，当format为'custom'时使用
 * @returns {string} 格式化后的日期字符串
 */
export const formatDate = (dateInput, format = 'short', customFormat = '') => {
  if (!dateInput) return '--';
  
  try {
    const date = new Date(dateInput);
    if (isNaN(date.getTime())) return '--';
    
    if (format === 'custom' && customFormat) {
      return formatDateCustom(date, customFormat);
    }
    
    const options = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    };
    
    if (format === 'long' || format === 'full') {
      options.hour = '2-digit';
      options.minute = '2-digit';
    }
    
    if (format === 'full') {
      options.second = '2-digit';
    }
    
    return date.toLocaleString('zh-CN', options)
      .replace(/\//g, '-'); // 将2021/01/01转换为2021-01-01格式
  } catch (error) {
    console.error('formatDate error:', error);
    return '--';
  }
};

/**
 * 使用自定义格式格式化日期
 * 支持的格式: 
 * - YYYY: 四位年份
 * - MM: 两位月份
 * - DD: 两位日期
 * - HH: 两位小时
 * - mm: 两位分钟
 * - ss: 两位秒数
 * 例如: "YYYY-MM-DD HH:mm"
 * 
 * @param {Date} date - Date对象
 * @param {string} format - 自定义格式
 * @returns {string} 格式化后的日期字符串
 */
const formatDateCustom = (date, format) => {
  const year = date.getFullYear();
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  const seconds = date.getSeconds().toString().padStart(2, '0');
  
  return format
    .replace('YYYY', year)
    .replace('MM', month)
    .replace('DD', day)
    .replace('HH', hours)
    .replace('mm', minutes)
    .replace('ss', seconds);
};

/**
 * 获取日期范围的友好表示
 * @param {Date|string} startDate - 开始日期
 * @param {Date|string} endDate - 结束日期
 * @param {string} separator - 分隔符，默认为"至"
 * @returns {string} 格式化后的日期范围
 */
export const formatDateRange = (startDate, endDate, separator = ' 至 ') => {
  if (!startDate || !endDate) return '--';
  
  try {
    const formattedStart = formatDate(startDate);
    const formattedEnd = formatDate(endDate);
    
    if (formattedStart === formattedEnd) {
      return formattedStart;
    }
    
    return `${formattedStart}${separator}${formattedEnd}`;
  } catch (error) {
    console.error('formatDateRange error:', error);
    return '--';
  }
};

/**
 * 截断文本并添加省略号
 * @param {string} text - 要截断的文本
 * @param {number} maxLength - 最大长度，默认为100
 * @param {string} ellipsis - 省略符号，默认为'...'
 * @returns {string} 截断后的文本
 */
export const truncateText = (text, maxLength = 100, ellipsis = '...') => {
  if (!text) return '';
  
  try {
    if (text.length <= maxLength) return text;
    
    return text.substring(0, maxLength) + ellipsis;
  } catch (error) {
    console.error('truncateText error:', error);
    return text;
  }
};

/**
 * 格式化数字
 * @param {number} value - 要格式化的数值
 * @param {Object} options - 格式化选项
 * @param {number} options.decimals - 小数位数，默认为0
 * @param {boolean} options.grouping - 是否使用千分位分组，默认为true
 * @param {string} options.defaultValue - 值为空时的默认显示，默认为'--'
 * @returns {string} 格式化后的数字字符串
 */
export const formatNumber = (value, { decimals = 0, grouping = true, defaultValue = '--' } = {}) => {
  if (value === null || value === undefined) return defaultValue;
  
  try {
    if (!grouping) {
      return Number(value).toFixed(decimals);
    }
    
    return value.toLocaleString('zh-CN', {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    });
  } catch (error) {
    console.error('formatNumber error:', error);
    return defaultValue;
  }
};

/**
 * 格式化基金代码，确保显示为6位数字
 * @param {string} code - 基金代码
 * @param {boolean} showPrefix - 是否显示前缀，默认为false
 * @returns {string} 格式化后的基金代码
 */
export const formatFundCode = (code, showPrefix = false) => {
  if (!code) return '';
  
  try {
    // 移除非数字字符
    const numericCode = code.toString().replace(/\D/g, '');
    
    // 确保是6位数字
    const formattedCode = numericCode.padStart(6, '0');
    
    return showPrefix ? `${formattedCode}` : formattedCode;
  } catch (error) {
    console.error('formatFundCode error:', error);
    return code;
  }
};

/**
 * 获取相对时间描述（如：3分钟前，2小时前）
 * @param {string|Date} dateInput - 日期字符串或Date对象
 * @param {Object} options - 格式化选项
 * @param {boolean} options.full - 是否显示完整格式（超过30天则显示完整日期），默认为false
 * @returns {string} 相对时间描述
 */
export const getRelativeTimeString = (dateInput, { full = false } = {}) => {
  if (!dateInput) return '--';
  
  try {
    const date = new Date(dateInput);
    if (isNaN(date.getTime())) return '--';
    
    const now = new Date();
    const diffMs = now - date;
    const diffSec = Math.floor(diffMs / 1000);
    
    if (diffSec < 60) return '刚刚';
    if (diffSec < 3600) return `${Math.floor(diffSec / 60)}分钟前`;
    if (diffSec < 86400) return `${Math.floor(diffSec / 3600)}小时前`;
    if (diffSec < 2592000) return `${Math.floor(diffSec / 86400)}天前`;
    
    // 超过30天，根据选项决定是否显示完整日期
    if (full) {
      return formatDate(date);
    }
    
    if (diffSec < 31536000) return `${Math.floor(diffSec / 2592000)}个月前`;
    
    return `${Math.floor(diffSec / 31536000)}年前`;
  } catch (error) {
    console.error('getRelativeTimeString error:', error);
    return '--';
  }
};

/**
 * 格式化数字为带单位的字符串（中文：万、亿；英文：k、M、B）
 * @param {number} value - 要格式化的数值
 * @param {Object} options - 格式化选项
 * @param {number} options.decimals - 小数位数，默认为1
 * @param {boolean} options.useChineseUnits - 是否使用中文单位（万、亿），默认为true
 * @returns {string} 格式化后的带单位的字符串
 */
export const formatNumberWithUnit = (value, { decimals = 1, useChineseUnits = true } = {}) => {
  if (value === null || value === undefined) return '--';
  
  try {
    if (useChineseUnits) {
      return formatNumberWithChineseUnit(value, { decimals });
    }
    
    return formatNumberWithEnglishUnit(value, { decimals });
  } catch (error) {
    console.error('formatNumberWithUnit error:', error);
    return value.toString();
  }
};

/**
 * 使用中文单位格式化数字
 */
const formatNumberWithChineseUnit = (value, { decimals = 1 } = {}) => {
  const absValue = Math.abs(value);
  
  if (absValue < 10000) {
    return value.toFixed(decimals);
  }
  
  if (absValue < 100000000) {
    return (value / 10000).toFixed(decimals) + '万';
  }
  
  return (value / 100000000).toFixed(decimals) + '亿';
};

/**
 * 使用英文单位格式化数字
 */
const formatNumberWithEnglishUnit = (value, { decimals = 1 } = {}) => {
  const absValue = Math.abs(value);
  
  if (absValue < 1000) {
    return value.toString();
  }
  
  if (absValue < 1000000) {
    return (value / 1000).toFixed(decimals) + 'k';
  }
  
  if (absValue < 1000000000) {
    return (value / 1000000).toFixed(decimals) + 'M';
  }
  
  return (value / 1000000000).toFixed(decimals) + 'B';
};

/**
 * 格式化文件大小
 * @param {number} bytes - 文件大小（字节）
 * @param {number} decimals - 小数位数，默认为2
 * @returns {string} 格式化后的文件大小
 */
export const formatFileSize = (bytes, decimals = 2) => {
  if (bytes === 0) return '0 B';
  
  try {
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];
  } catch (error) {
    console.error('formatFileSize error:', error);
    return bytes + ' B';
  }
};

/**
 * 格式化手机号码为更易读的格式
 * @param {string} phone - 手机号码
 * @param {string} separator - 分隔符，默认为空格
 * @returns {string} 格式化后的手机号码
 */
export const formatPhoneNumber = (phone, separator = ' ') => {
  if (!phone) return '';
  
  try {
    const cleaned = phone.replace(/\D/g, '');
    const match = cleaned.match(/^(\d{3})(\d{4})(\d{4})$/);
    
    if (match) {
      return match[1] + separator + match[2] + separator + match[3];
    }
    
    return phone;
  } catch (error) {
    console.error('formatPhoneNumber error:', error);
    return phone;
  }
};

/**
 * 格式化整数为中文数字（适用于金额、序号等）
 * @param {number} num - 整数
 * @returns {string} 中文数字
 */
export const formatNumberToChinese = (num) => {
  if (isNaN(num)) return '';
  
  try {
    const chineseNum = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];
    const chineseUnit = ['', '十', '百', '千', '万', '十', '百', '千', '亿'];
    
    let result = '';
    const numStr = num.toString();
    
    for (let i = 0; i < numStr.length; i++) {
      const digit = parseInt(numStr[i]);
      const unit = chineseUnit[numStr.length - i - 1];
      
      // 处理零的特殊情况
      if (digit === 0) {
        if (result.charAt(result.length - 1) !== '零' && i !== numStr.length - 1) {
          result += '零';
        }
      } else {
        result += chineseNum[digit] + unit;
      }
    }
    
    // 处理一十开头的情况
    if (result.startsWith('一十')) {
      result = result.substring(1);
    }
    
    // 处理末尾的零
    if (result.endsWith('零')) {
      result = result.substring(0, result.length - 1);
    }
    
    // 处理全零的情况
    if (result === '') {
      result = '零';
    }
    
    return result;
  } catch (error) {
    console.error('formatNumberToChinese error:', error);
    return num.toString();
  }
};

/**
 * 格式化银行卡号，每4位添加一个空格
 * @param {string} cardNumber - 银行卡号
 * @returns {string} 格式化后的银行卡号
 */
export const formatBankCardNumber = (cardNumber) => {
  if (!cardNumber) return '';
  
  try {
    const cleaned = cardNumber.replace(/\s/g, '');
    const groups = [];
    
    for (let i = 0; i < cleaned.length; i += 4) {
      groups.push(cleaned.substring(i, i + 4));
    }
    
    return groups.join(' ');
  } catch (error) {
    console.error('formatBankCardNumber error:', error);
    return cardNumber;
  }
};

/**
 * 格式化身份证号，隐藏中间8位
 * @param {string} idNumber - 身份证号
 * @returns {string} 格式化后的身份证号
 */
export const formatIdCardNumber = (idNumber) => {
  if (!idNumber || idNumber.length < 15) return idNumber;
  
  try {
    return `${idNumber.substring(0, 6)}********${idNumber.substring(14)}`;
  } catch (error) {
    console.error('formatIdCardNumber error:', error);
    return idNumber;
  }
};
</file>

<file path="src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { RouterProvider } from 'react-router-dom'
import router from './routes/index'
import { AuthProvider } from './contexts/AuthContext'
import { ThemeProvider } from './contexts/ThemeContext'
import './styles/globals.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ThemeProvider>
      <AuthProvider>
        <RouterProvider router={router} />
      </AuthProvider>
    </ThemeProvider>
  </React.StrictMode>,
)
</file>

<file path=".gitignore">
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/dist
/build
/android
/ios

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
.env

npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Netlify
.netlify
</file>

<file path="capacitor.config.json">
{
  "appId": "com.fundgene.app",
  "appName": "FundGene",
  "webDir": "dist",
  "bundledWebRuntime": false,
  "server": {
    "androidScheme": "https"
  }
}
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules"]
}
</file>

<file path="netlify.toml">
[build]
  command = "npm run build"
  publish = "dist"

# Handle client-side routing
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
</file>

<file path="README_1.md">
# FundGene 项目文件结构与说明

本文档介绍 FundGene 项目的文件结构、各文件用途及其关系。

## 项目概述

FundGene 是一个基于 AI 的基金投资助手，旨在帮助入门级投资者建立健康的投资行为，提高投资决策质量。项目使用 React、Vite、Ant Design 和 Recharts 等技术栈构建。

## 项目根目录文件

| 文件                    | 用途                                                    |
|------------------------|----------------------------------------------------------|
| `.env`                 | 环境变量配置文件，存储API密钥、服务URL等敏感或环境特定配置  |
| `.gitignore`           | Git版本控制忽略文件列表，防止敏感信息、构建文件等提交到仓库 |
| `capacitor.config.json`| Capacitor配置文件，用于移动应用构建的配置信息            |
| `index.html`           | 应用入口HTML文件，是SPA应用的容器和初始加载页面          |
| `netlify.toml`         | Netlify部署配置文件，定义构建命令和网站发布设置          |
| `package-lock.json`    | NPM依赖锁定文件，确保团队成员使用相同的依赖版本          |
| `package.json`         | 项目配置文件，包含依赖列表、脚本命令和项目元数据          |
| `tsconfig.json`        | TypeScript配置文件，定义编译选项和类型检查规则           |
| `vite.config.js`       | Vite构建工具配置文件，定义开发服务器、构建选项和插件设置  |

### 主要配置文件详情

#### package.json

包含了项目的所有依赖项和脚本命令：

- **依赖项**：React、Ant Design、Axios、Recharts等前端库
- **开发依赖**：Vite、ESLint、Capacitor（移动开发工具）等
- **脚本命令**：
  - `dev`: 启动开发服务器
  - `build`: 构建生产版本
  - `deploy:netlify/vercel`: 部署到相应服务
  - `prepare-app`: 准备移动应用构建

#### vite.config.js

Vite构建工具配置，包含：

- PWA (Progressive Web App) 支持配置
- 开发服务器设置
- 构建优化选项，如代码分割、资源管理
- 打包分析工具集成
- 路径别名配置（`@`指向`src`目录）

#### tsconfig.json

TypeScript编译器配置：

- 设定目标ECMAScript版本为ES2018
- 启用严格类型检查
- 配置模块解析和JSX支持
- 定义包含的源代码文件和排除的目录

## 公共资源目录 (`public/`)

包含静态资源文件：

| 文件                | 用途                                                      |
|--------------------|----------------------------------------------------------|
| `favicon.svg`      | 网站图标                                                   |
| `logo192.png`      | PWA 和移动应用小尺寸图标                                    |
| `logo512.png`      | PWA 和移动应用大尺寸图标                                    |
| `manifest.json`    | PWA 配置文件，定义应用名称、图标和主题颜色                      |
| `robots.txt`       | 搜索引擎爬虫指令文件                                         |
| `serviceWorker.js` | 服务工作线程脚本，实现 PWA 离线功能和缓存策略                   |
| `_redirects`       | Netlify 重定向规则，确保 SPA 路由正常工作                     |
| `assets/`          | 静态资源目录，包含图片、图标等资源文件                           |

## 源代码目录 (`src/`)

### 核心文件

| 文件                 | 用途                                                      |
|---------------------|----------------------------------------------------------|
| `App.jsx`           | 应用根组件                                                 |
| `App.css`           | 应用根组件样式                                              |
| `index.jsx`         | 应用入口点，渲染根组件到 DOM                                 |
| `index.css`         | 全局样式                                                   |
| `routes.jsx`        | 路由配置，定义应用的页面结构和导航                             |
| `main.jsx`          | 应用主入口文件，配置providers和路由                           |

### 样式文件 (`src/styles/`)

| 文件                     | 用途                                                 |
|-------------------------|----------------------------------------------------|
| `variables.css`         | CSS 变量定义，包含颜色、字体等基础变量                   |
| `globals.css`           | 全局样式规则                                          |
| `responsive-variables.css` | 响应式布局变量，定义断点和相关尺寸                    |

### 上下文管理 (`src/contexts/`)

提供全局状态管理：

| 文件                        | 用途                                                 |
|----------------------------|-----------------------------------------------------|
| `AuthContext.jsx`          | 认证上下文，管理用户登录状态和认证信息                    |
| `ThemeContext.jsx`         | 主题上下文，管理应用主题设置（深色/浅色模式）              |


### 服务层 (`src/services/`)

提供数据和 API 交互功能：

| 文件                   | 用途                                                    |
|-----------------------|--------------------------------------------------------|
| `tradingService.js`   | 交易和市场数据服务，提供市场概览等数据                      |
| `portfolioService.js` | 投资组合服务，提供投资组合数据和分析功能                     |
| `mockData.js`         | 模拟数据，提供开发和演示用的测试数据                        |
| `mockApi.js`          | 模拟 API 服务，提供政策解读和新闻分析等数据                 |
| `learningService.js`  | 学习资源服务，提供课程和学习进度数据                        |
| `behaviorService.js`  | 行为分析服务，提供用户行为模式和偏差分析                     |
| `policyService.js`    | 政策分析服务，提供政策解读和影响评估                        |
| `newsService.js`      | 新闻分析服务，提供财经新闻解读和市场影响评估                  |
| `chatService.js`      | 聊天服务，处理AI助手对话和反馈                             |
| `baseService.js`      | 基础服务层模块，提供通用API调用方法和错误处理                |

### 组件 (`src/components/`)

#### 布局组件

| 文件                      | 用途                                              |
|--------------------------|--------------------------------------------------|
| `Layout.jsx`             | 主布局组件，包含侧边栏、头部和内容区                   |
| `Layout.css`             | 布局组件样式                                        |
| `layout/Header.jsx`      | 顶部导航栏组件                                      |
| `layout/Header.css`      | 顶部导航栏样式                                      |
| `layout/Sidebar.jsx`     | 侧边导航栏组件                                      |
| `layout/Sidebar.css`     | 侧边导航栏样式                                      |
| `layout/Footer.jsx`      | 页脚组件                                           |
| `layout/Footer.css`      | 页脚样式                                           |

#### 通用组件

| 文件                        | 用途                                             |
|----------------------------|-------------------------------------------------|
| `common/Card.jsx`          | 卡片容器组件，用于内容展示                          |
| `common/Button.jsx`        | 按钮组件                                          |
| `common/Loading.jsx`       | 加载状态组件                                      |
| `common/Input.jsx`         | 输入框组件                                        |
| `common/Modal.jsx`         | 模态框组件                                        |
| `common/Tabs.jsx`          | 标签页组件                                        |

#### 图表组件

| 文件                          | 用途                                           |
|------------------------------|-----------------------------------------------|
| `charts/PortfolioChart.jsx`  | 投资组合饼图组件，展示资产配置                    |
| `charts/BehaviorRadar.jsx`   | 行为雷达图，展示用户各项行为特征的强弱程度         |
| `charts/PerformanceChart.jsx`| 表现趋势图，展示投资组合历史表现                 |

#### 交易组件

| 文件                           | 用途                                          |
|-------------------------------|----------------------------------------------|
| `trading/TradeForm.jsx`       | 交易表单组件，用于买卖操作                      |
| `trading/PortfolioSummary.jsx`| 投资组合概览组件，展示总资产和收益               |
| `trading/MarketOverview.jsx`  | 市场概览组件，展示指数和热门基金                 |
| `trading/Trading.css`         | 交易相关组件的共享样式                          |
| `trading/TradingHistory.jsx`  | 交易历史记录组件                                |


#### 行为分析组件

| 文件                              | 用途                                        |
|----------------------------------|---------------------------------------------|
| `behavior/BehaviorFeedback.jsx`  | 行为反馈组件，提供基于交易行为的反馈和建议      |
| `behavior/Behavior.css`          | 行为组件共享样式                              |

#### 聊天和交互组件

| 文件                               | 用途                                         |
|-----------------------------------|----------------------------------------------|
| `chat/ChatWindow.jsx`            | 聊天窗口组件，用于与AI顾问交互                 |
| `chat/MessageBubble.jsx`         | 消息气泡组件，展示聊天对话中的单条消息         |
| `chat/ChatSuggestions.jsx`       | 聊天建议组件，提供预设问题和快速回复选项       |
| `chat/Chat.css`                  | 聊天相关组件的共享样式                        |

### 页面 (`src/pages/`)

#### 仪表盘

| 文件                 | 用途                                                     |
|---------------------|----------------------------------------------------------|
| `Dashboard.jsx`     | 仪表盘/主页，提供整体概览和功能入口                         |
| `Dashboard.css`     | 仪表盘页面样式                                             |

#### 认知诊断与教学

| 文件                                 | 用途                                       |
|-------------------------------------|-------------------------------------------|
| `cognitive/ChatInterface.jsx`       | AI 聊天界面，用于知识问答和诊断              |
| `cognitive/ChatInterface.css`       | 聊天界面样式                                |
| `cognitive/LearningCenter.jsx`      | 学习中心，提供学习资源和课程                 |
| `cognitive/LearningCenter.css`      | 学习中心样式                                |
| `cognitive/CourseDetail.jsx`        | 课程详情页面，展示特定课程内容               |
| `cognitive/CourseDetail.css`        | 课程详情页面样式                            |
| `cognitive/ScenarioSimulation.jsx`  | 场景模拟页面，提供投资场景练习               |
| `cognitive/ScenarioSimulation.css`  | 场景模拟页面样式                            |

#### 行为矫正

| 文件                              | 用途                                         |
|----------------------------------|---------------------------------------------|
| `behavior/BehaviorCorrection.jsx`| 行为矫正页面，整合行为分析和建议               |
| `behavior/BehaviorCorrection.css`| 行为矫正页面样式                              |
| `behavior/BehaviorProfile.jsx`   | 行为画像页面，展示用户行为特征和偏差           |
| `behavior/BehaviorProfile.css`   | 行为画像页面样式                              |
| `behavior/TradingSimulation.jsx` | 交易模拟页面，提供练习环境                     |
| `behavior/TradingSimulation.css` | 交易模拟页面样式                              |
| `behavior/TradingSimulator.jsx`  | 交易模拟器组件，为模拟交易提供核心功能         |
| `behavior/BehaviorAlerts.jsx`    | 行为提醒页面，展示行为警告和建议               |
| `behavior/BehaviorAlerts.css`    | 行为提醒页面样式                              |

#### 决策支持

| 文件                                | 用途                                    |
|------------------------------------|----------------------------------------|
| `decision/Portfolio.jsx`           | 投资组合分析页面，展示资产配置和风险指标   |
| `decision/Portfolio.css`           | 投资组合页面样式                         |
| `decision/PortfolioRebalance.jsx`  | 投资组合再平衡页面                       |
| `decision/DecisionComparison.jsx`  | 决策对比页面，比较不同投资策略            |

#### 信息解读

| 文件                            | 用途                                         |
|--------------------------------|---------------------------------------------|
| `information/NewsAnalysis.jsx` | 新闻分析页面，展示解读后的新闻影响             |
| `information/NewsAnalysis.css` | 新闻分析页面样式                              |
| `information/PolicyAnalysis.jsx`| 政策解读页面，展示政策变化对投资的影响        |
| `information/PolicyAnalysis.css`| 政策解读页面样式                             |

### 其他页面

| 文件               | 用途                                                |
|-------------------|------------------------------------------------------|
| `Login.jsx`       | 登录页面                                             |
| `Register.jsx`    | 注册页面                                             |
| `NotFound.jsx`    | 404 错误页面                                         |
| `NotFound.css`    | 404 错误页面样式                                     |

### 工具和辅助 (`src/utils/`)

| 文件                      | 用途                                             |
|--------------------------|--------------------------------------------------|
| `formatter.js`           | 数据格式化工具，处理货币、日期等格式               |


### 钩子 (`src/hooks/`)

| 文件                      | 用途                                              |
|--------------------------|---------------------------------------------------|
| `useBehaviorData.js`         | 行为数据钩子                                |

### 资源文件 (`src/assets/`)

| 文件                      | 用途                                             |
|--------------------------|--------------------------------------------------|
| `icons/`                 | 图标资源目录，包含应用使用的SVG图标               |
| `images/`                | 图像资源目录，包含应用使用的各种图片资源          |
| `fonts/`                 | 字体资源目录，包含应用使用的自定义字体文件        |

## 文件关系梳理

1. **入口链路**：
   - `index.html` → `index.jsx`/`main.jsx` → `App.jsx` → `routes.jsx` → 各页面组件

2. **样式继承关系**：
   - `variables.css` 被 `globals.css` 和 `responsive-variables.css` 使用
   - 各组件样式文件（如 `BehaviorCorrection.css`）继承全局样式并定义特定样式

3. **组件与服务关系**：
   - 页面组件（如 `Portfolio.jsx`）调用对应服务（如 `portfolioService.js`）获取数据
   - 页面组件使用通用组件（如 `Card.jsx`）和图表组件（如 `PortfolioChart.jsx`）构建界面
   - 服务层组件与上下文（contexts）交互，管理全局状态

4. **布局与页面关系**：
   - `Layout.jsx` 作为容器包裹所有页面内容，提供一致的导航和结构
   - 各页面组件在 `routes.jsx` 中注册，并在 `Layout` 内部的 `Outlet` 位置渲染
   - `Header.jsx`、`Sidebar.jsx` 和 `Footer.jsx` 提供统一的导航和页面结构

5. **模拟数据流**：
   - 开发环境中，服务层组件（如 `tradingService.js`）使用 `mockData.js` 和 `mockApi.js` 提供数据
   - 这些模拟数据可以无缝替换为实际的API调用，保持应用结构不变

6. **上下文与钩子协作**：
   - 上下文组件（如 `AuthContext.jsx`）提供全局状态
   - 自定义钩子（如 `useAuth.js`）封装上下文使用，简化组件中的状态管理

7. **服务层分层关系**：
   - `baseService.js` 作为基础服务层，提供通用的API请求方法和错误处理
   - 其他服务如 `tradingService.js`、`portfolioService.js` 等基于 `baseService.js` 构建特定功能的API调用
   - 开发环境中的模拟API (`mockApi.js`) 实现相同接口，使得服务层可以无缝切换真实和模拟数据源

这些文件共同构成了一个完整的前端应用架构，实现了 FundGene 作为基金投资助手的各项功能。
</file>

<file path="README.md">
# FundGene - 基于AI的基金投资助手

FundGene是一个面向入门级基金投资者的智能助手，旨在帮助用户建立健康的投资行为，提高投资决策质量。

## 项目特点

- **认知诊断与教学**：通过AI聊天和场景模拟，帮助用户理解投资基础知识
- **行为矫正**：分析用户行为模式，识别偏差，并提供改进建议
- **智能决策支持**：提供投资组合分析和再平衡建议
- **信息解读**：对市场资讯和政策进行智能解读

## 快速开始

确保你已安装 Node.js (>= 16.0.0) 和 npm (>= 8.0.0)。

```bash
# 安装依赖
npm install

# 启动开发服务器
npm run dev

# 构建生产版本
npm run build

# 预览生产版本
npm run preview
```

## 部署指南

### 网站部署

项目已配置好用于部署的相关设置，可以轻松部署到各种托管服务：

#### Netlify部署

```bash
# 安装Netlify CLI
npm install -g netlify-cli

# 部署到Netlify
npm run deploy:netlify
```

#### Vercel部署

```bash
# 安装Vercel CLI
npm install -g vercel

# 部署到Vercel
npm run deploy:vercel
```

#### 部署到其他静态托管服务

1. 构建项目：`npm run build`
2. 将`dist`目录的内容上传到托管服务

### 移动应用构建

项目使用Capacitor将Web应用转换为原生移动应用：

#### 初始配置

```bash
# 安装Capacitor
npm install

# 构建项目并同步到Capacitor
npm run prepare-app
```

#### Android应用构建

```bash
# 添加Android平台
npx cap add android

# 打开Android Studio
npx cap open android
```

#### iOS应用构建

```bash
# 添加iOS平台
npx cap add ios

# 打开Xcode
npx cap open ios
```

## 技术栈

- React 18
- TypeScript
- Vite
- React Router
- Recharts (图表库)
- Capacitor (移动应用框架)

## 项目结构

```
src/
├── components/       # 可复用组件
├── contexts/         # React上下文
├── hooks/            # 自定义钩子
├── pages/            # 页面组件
├── services/         # API服务
├── styles/           # 全局样式
└── utils/            # 工具函数
```

## PWA支持

项目已配置为渐进式Web应用(PWA)，支持：
- 离线访问
- 主屏幕安装
- 原生应用体验

## UI设计指南

### 答辩UI设计目标
创建一个视觉吸引力强的UI原型，用于答辩展示FundGene的核心功能和用户体验。原型不需要完整的后端功能，但必须看起来可信，并清晰展示项目的创新点。

### 设计原则
1. **清晰性**：明确展示用户能做什么以及系统如何帮助他们
2. **突出创新**：强调独特功能（AI聊天、行为反馈、场景模拟、决策支持对比）
3. **专业性与信任感**：设计应现代、简洁、可靠，适合金融类应用
4. **以用户为中心**：体现对目标用户（入门级投资者）的理解——保持简单直观
5. **视觉吸引力**：设计要美观，留下积极印象

### 关键页面设计
- **整体框架**：
  - 登录/注册
  - 仪表盘/主页：核心入口
- **认知诊断与教学**：
  - 聊天界面：AI交互（诊断、问答）
  - 学习中心/知识库：主题/概念展示
  - 场景模拟页面：历史场景（如2015年股灾）交互
- **行为矫正**：
  - 行为画像：显示识别的偏差
  - 模拟交易界面：简化版交易视图
  - 反馈/提醒页面：非理性行为提示
- **智能决策支持**：
  - 投资组合概览：可视化持仓和风险指标
  - 再平衡建议页面：AI建议展示
  - 决策对比页面：用户选择 vs AI建议对比
- **信息解读**：
  - 新闻/政策推送：相关新闻列表
  - 交互分析页面：结构化解析展示

## 贡献指南

1. Fork 项目
2. 创建特性分支 (`git checkout -b feature/amazing-feature`)
3. 提交更改 (`git commit -m 'Add some amazing feature'`)
4. 推送到分支 (`git push origin feature/amazing-feature`)
5. 创建Pull Request
</file>

<file path="src/components/behavior/Behavior.css">
/* 行为反馈组件样式 */
.behavior-feedback {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
}

/* 评分区域 */
.behavior-score-section {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
  margin-bottom: var(--spacing-md);
}

.score-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.score-circle {
  width: 100px;
  height: 100px;
}

.score-circle svg {
  width: 100%;
  height: 100%;
}

.score-bg {
  fill: none;
  stroke: var(--neutral-200);
  stroke-width: 3;
}

.score-fill {
  fill: none;
  stroke: var(--primary-color);
  stroke-width: 3;
  stroke-linecap: round;
  transform: rotate(90deg);
  transform-origin: center;
  transition: stroke-dasharray 0.5s;
}

.score-text {
  font-size: var(--font-size-xs);
  text-anchor: middle;
  fill: var(--text-primary);
  font-weight: var(--font-weight-bold);
}

/* 使用TextStyles类 */
.score-label {
  margin-top: var(--spacing-sm);
  /* 使用text-sm text-secondary类 */
}

.score-description {
  flex: 1;
  line-height: var(--line-height-relaxed);
  /* 使用text-secondary类 */
}

/* 检测到的行为 */
.behavior-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.behavior-item {
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
}

.behavior-item.high {
  background-color: rgba(239, 68, 68, 0.1);
  border-left: 4px solid var(--error-color);
}

.behavior-item.medium {
  background-color: rgba(245, 158, 11, 0.1);
  border-left: 4px solid var(--accent-color);
}

.behavior-item.low {
  background-color: rgba(16, 185, 129, 0.1);
  border-left: 4px solid var(--success-color);
}

.behavior-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-sm);
}

.behavior-name {
  font-weight: var(--font-weight-bold);
}

.behavior-severity {
  font-size: var(--font-size-xs);
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  color: white;
}

.behavior-severity.high {
  background-color: var(--error-color);
}

.behavior-severity.medium {
  background-color: var(--accent-color);
}

.behavior-severity.low {
  background-color: var(--success-color);
}

.behavior-description {
  margin: 0;
  line-height: var(--line-height-normal);
}

/* 改进建议 */
.suggestion-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.suggestion-item {
  background-color: var(--neutral-50);
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  border-left: 4px solid var(--primary-color);
}

.suggestion-title {
  font-weight: var(--font-weight-bold);
  margin-bottom: var(--spacing-sm);
}

.suggestion-content {
  margin: 0;
  line-height: var(--line-height-normal);
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-md)) {
  .behavior-score-section {
    flex-direction: column;
    text-align: center;
  }
}
</file>

<file path="src/components/common/Button.jsx">
import React from 'react';
import classNames from 'classnames';
import './Button.css';

/**
 * 通用按钮组件
 * 支持多种变体、尺寸和状态
 * 
 * @param {Object} props - 组件属性
 * @param {React.ReactNode} props.children - 按钮内容
 * @param {Function} props.onClick - 点击事件处理函数
 * @param {'button'|'submit'|'reset'} props.type - 按钮类型
 * @param {'primary'|'secondary'|'outline'|'text'|'success'|'error'|'warning'|'info'} props.variant - 按钮样式变体
 * @param {'xs'|'sm'|'md'|'lg'|'xl'} props.size - 按钮尺寸
 * @param {boolean} props.disabled - 是否禁用
 * @param {boolean} props.loading - 是否处于加载状态
 * @param {boolean} props.fullWidth - 是否占满容器宽度
 * @param {React.ReactNode} props.icon - 按钮图标
 * @param {'left'|'right'} props.iconPosition - 图标位置
 * @param {boolean} props.iconOnly - 是否只显示图标
 * @param {'default'|'rounded'|'square'} props.shape - 按钮形状
 * @param {string} props.className - 自定义类名
 */
const Button = ({
  children,
  onClick,
  type = 'button',
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  fullWidth = false,
  icon,
  iconPosition = 'left',
  iconOnly = false,
  shape = 'default',
  className,
  ...props
}) => {
  // 处理加载状态的图标
  const loadingIcon = (
    <span className="button-loading-indicator">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" strokeOpacity="0.25" />
        <path 
          d="M12 2C6.47715 2 2 6.47715 2 12C2 12.6343 2.06115 13.2546 2.17849 13.8557" 
          stroke="currentColor" 
          strokeWidth="4" 
          strokeLinecap="round" 
        />
      </svg>
    </span>
  );

  const buttonClasses = classNames(
    'button',
    `button-${variant}`,
    `button-${size}`,
    {
      'button-full-width': fullWidth,
      'button-disabled': disabled || loading,
      'button-loading': loading,
      'button-icon-only': iconOnly,
      'button-rounded': shape === 'rounded',
      'button-square': shape === 'square',
      [`button-icon-${iconPosition}`]: icon && !iconOnly,
    },
    className
  );

  const handleClick = (e) => {
    if (disabled || loading) {
      e.preventDefault();
      return;
    }
    onClick && onClick(e);
  };

  // 处理按钮内容
  const renderContent = () => {
    if (iconOnly) {
      return icon || children;
    }

    if (loading) {
      return (
        <>
          {loadingIcon}
          {children}
        </>
      );
    }

    if (icon && iconPosition === 'left') {
      return (
        <>
          <span className="button-icon">{icon}</span>
          {children}
        </>
      );
    }

    if (icon && iconPosition === 'right') {
      return (
        <>
          {children}
          <span className="button-icon">{icon}</span>
        </>
      );
    }

    return children;
  };

  return (
    <button
      type={type}
      className={buttonClasses}
      onClick={handleClick}
      disabled={disabled || loading}
      {...props}
    >
      {renderContent()}
    </button>
  );
};

/**
 * 按钮组组件
 * 用于组合多个相关的按钮
 */
export const ButtonGroup = ({ 
  children, 
  className, 
  vertical = false,
  ...props 
}) => {
  const groupClasses = classNames(
    'button-group',
    {
      'button-group-vertical': vertical
    },
    className
  );

  return (
    <div className={groupClasses} {...props}>
      {children}
    </div>
  );
};

export default Button;
</file>

<file path="src/components/common/Card.css">
/* 卡片组件样式 */

/* 基础卡片 */
.card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  margin-bottom: var(--card-margin-bottom);
  transition: box-shadow 0.3s ease;
}

.card:hover {
  box-shadow: var(--shadow-md);
}

.card-bordered {
  border: 1px solid var(--neutral-200);
}

.card-hoverable:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-md);
}

/* 阴影变体 */
.card-shadow-none {
  box-shadow: none;
}

.card-shadow-sm {
  box-shadow: var(--shadow-sm);
}

.card-shadow-md {
  box-shadow: var(--shadow-md);
}

.card-shadow-lg {
  box-shadow: var(--shadow-lg);
}

/* 内边距变体 */
.card-padding-none {
  padding: 0;
}

.card-padding-sm {
  padding: var(--spacing-sm);
}

.card-padding-md {
  padding: var(--spacing-md);
}

.card-padding-lg {
  padding: var(--spacing-lg);
}

.card-padding-xl {
  padding: var(--spacing-xl);
}

/* 卡片尺寸变体 */
.card-sm {
  padding: var(--spacing-md);
}

.card-lg {
  padding: var(--spacing-xl);
}

/* 无内边距卡片 */
.card-no-padding {
  padding: 0;
}

/* 卡片头部 */
.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.card-title {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  color: var(--text-heading);
  margin: 0;
}

.card-subtitle {
  font-size: var(--font-size-md);
  color: var(--text-secondary);
  margin-top: var(--spacing-xs);
}

.card-extra {
  color: var(--text-secondary);
}

/* 卡片内容 */
.card-content {
  margin-bottom: var(--spacing-md);
}

/* 卡片底部 */
.card-footer {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-top: var(--spacing-md);
  padding-top: var(--spacing-md);
  border-top: 1px solid var(--neutral-200);
}

/* 卡片变体 - 突出显示卡片 */
.card-highlighted {
  border-left: 4px solid var(--primary-color);
}

/* 卡片变体 - 状态卡片 */
.card-success {
  border-top: 4px solid var(--success-color);
}

.card-error {
  border-top: 4px solid var(--error-color);
}

.card-warning {
  border-top: 4px solid var(--warning-color);
}

.card-info {
  border-top: 4px solid var(--info-color);
}

/* 分隔卡片内容 */
.card-divider {
  height: 1px;
  background-color: var(--neutral-200);
  margin: var(--spacing-md) 0;
}

/* 卡片列表项 */
.card-list-item {
  display: flex;
  align-items: center;
  padding: var(--spacing-md);
  border-bottom: 1px solid var(--neutral-200);
}

.card-list-item:last-child {
  border-bottom: none;
}

/* 卡片网格布局 */
.card-grid {
  display: grid;
  gap: var(--spacing-md);
}

.card-grid-cols-2 {
  grid-template-columns: repeat(2, 1fr);
}

.card-grid-cols-3 {
  grid-template-columns: repeat(3, 1fr);
}

/* 卡片统计数字 */
.card-stat {
  text-align: center;
  padding: var(--spacing-md);
}

.card-stat-value {
  font-size: var(--font-size-2xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  line-height: 1.2;
}

.card-stat-label {
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
  margin-top: var(--spacing-xs);
}

/* 深色模式适配 */
.dark-theme .card {
  background-color: var(--card-background);
}

.dark-theme .card-bordered {
  border-color: var(--neutral-700);
}

.dark-theme .card-title {
  color: var(--text-light);
}

.dark-theme .card .section-title,
.dark-theme .card .subsection-title {
  color: var(--text-light);
}

.dark-theme .card-footer,
.dark-theme .card-divider,
.dark-theme .card-list-item {
  border-color: var(--neutral-600);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .card-padding-md {
    padding: var(--spacing-sm);
  }
  
  .card-padding-lg {
    padding: var(--spacing-md);
  }
  
  .card-padding-xl {
    padding: var(--spacing-lg);
  }
}

@media (max-width: var(--breakpoint-md)) {
  .card-grid-cols-2,
  .card-grid-cols-3 {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="src/components/common/Input.jsx">
import React, { forwardRef } from 'react';
import classNames from 'classnames';
import './Input.css';

/**
 * 输入框组件
 * 支持多种变体、尺寸和状态
 * 
 * @param {Object} props - 组件属性
 * @param {string} props.label - 输入框标签
 * @param {'text'|'password'|'email'|'number'|'tel'|'url'|'search'} props.type - 输入框类型
 * @param {string} props.placeholder - 占位文本
 * @param {string|number} props.value - 输入框值
 * @param {Function} props.onChange - 值变化处理函数
 * @param {string} props.name - 输入框名称
 * @param {string|boolean} props.error - 错误信息或错误状态
 * @param {string} props.helperText - 辅助文本
 * @param {boolean} props.required - 是否必填
 * @param {boolean} props.fullWidth - 是否占满容器宽度
 * @param {boolean} props.disabled - 是否禁用
 * @param {'sm'|'md'|'lg'} props.size - 输入框尺寸
 * @param {'default'|'filled'|'outlined'|'underlined'} props.variant - 输入框变体
 * @param {React.ReactNode} props.prefix - 前缀内容（图标或文本）
 * @param {React.ReactNode} props.suffix - 后缀内容（图标或文本）
 * @param {boolean} props.suffixClickable - 后缀是否可点击
 * @param {Function} props.onSuffixClick - 后缀点击事件处理函数
 * @param {string} props.className - 自定义类名
 */
const Input = forwardRef(({ 
  label,
  type = 'text',
  placeholder,
  value,
  onChange,
  name,
  error,
  helperText,
  required = false,
  fullWidth = false,
  disabled = false,
  size = 'md',
  variant = 'default',
  prefix,
  suffix,
  suffixClickable = false,
  onSuffixClick,
  className,
  ...props
}, ref) => {
  const inputId = name || Math.random().toString(36).substring(2, 9);
  
  // 判断是否为搜索框
  const isSearch = type === 'search';
  
  const inputClasses = classNames(
    'input-field',
    `input-${size}`,
    {
      'input-error': error,
      'input-disabled': disabled,
      [`input-${variant}`]: variant !== 'default',
    },
    className
  );

  const formGroupClasses = classNames(
    'form-group',
    {
      'form-group-full-width': fullWidth,
      'input-with-icon': suffix,
      'input-with-prefix': prefix || isSearch,
      'input-search': isSearch
    }
  );

  // 处理搜索图标
  const renderSearchIcon = () => {
    if (!isSearch) return null;
    
    return (
      <span className="input-search-icon">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z" 
            stroke="currentColor" 
            strokeWidth="2" 
            strokeLinecap="round" 
            strokeLinejoin="round" 
          />
        </svg>
      </span>
    );
  };

  // 处理后缀的点击事件
  const handleSuffixClick = (e) => {
    if (suffixClickable && onSuffixClick) {
      e.stopPropagation();
      onSuffixClick(e);
    }
  };

  return (
    <div className={formGroupClasses}>
      {label && (
        <label htmlFor={inputId} className="input-label">
          {label} {required && <span className="input-required">*</span>}
        </label>
      )}
      
      {renderSearchIcon()}
      
      {prefix && <span className="input-prefix">{prefix}</span>}
      
      <input
        ref={ref}
        id={inputId}
        type={type}
        className={inputClasses}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        name={name}
        disabled={disabled}
        required={required}
        {...props}
      />
      
      {suffix && (
        <span 
          className={classNames('input-icon', {
            'input-icon-clickable': suffixClickable
          })}
          onClick={handleSuffixClick}
        >
          {suffix}
        </span>
      )}
      
      {(error || helperText) && (
        <p className={`input-helper-text ${error ? 'input-error-text' : ''}`}>
          {error || helperText}
        </p>
      )}
    </div>
  );
});

/**
 * 文本区域组件
 */
export const TextArea = forwardRef(({
  rows = 4,
  className,
  ...props
}, ref) => {
  const textareaClasses = classNames(
    'input-field',
    className
  );
  
  return (
    <Input
      {...props}
      ref={ref}
      as="textarea"
      className={textareaClasses}
      rows={rows}
    />
  );
});

/**
 * 密码输入框组件
 */
export const PasswordInput = forwardRef(({
  ...props
}, ref) => {
  const [showPassword, setShowPassword] = React.useState(false);
  
  // 切换密码显示/隐藏
  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };
  
  // 密码可见性图标
  const visibilityIcon = showPassword ? (
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M2 12C2 12 5 5 12 5C19 5 22 12 22 12C22 12 19 19 12 19C5 19 2 12 2 12Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
      <path d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
      <path d="M3 3L21 21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  ) : (
    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M2 12C2 12 5 5 12 5C19 5 22 12 22 12C22 12 19 19 12 19C5 19 2 12 2 12Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
      <path d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  );
  
  return (
    <Input
      {...props}
      ref={ref}
      type={showPassword ? 'text' : 'password'}
      suffix={visibilityIcon}
      suffixClickable
      onSuffixClick={togglePasswordVisibility}
    />
  );
});

/**
 * 搜索输入框组件
 */
export const SearchInput = forwardRef(({
  ...props
}, ref) => {
  return (
    <Input
      {...props}
      ref={ref}
      type="search"
    />
  );
});

Input.displayName = 'Input';
TextArea.displayName = 'TextArea';
PasswordInput.displayName = 'PasswordInput';
SearchInput.displayName = 'SearchInput';

export default Input;
</file>

<file path="src/components/layout/Footer.css">
.footer {
  background-color: var(--neutral-800);
  color: var(--neutral-300);
  padding: var(--spacing-md) 0;
  text-align: center;
}

.footer-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 var(--spacing-lg);
}

/* 深色模式调整 */
.dark-theme .footer {
  background-color: var(--neutral-900);
  color: var(--neutral-200); /* 更亮的颜色，提高在深色背景下的可读性 */
}
</file>

<file path="src/components/trading/MarketOverview.jsx">
import React from 'react';
import './Trading.css';

/**
 * 市场概览组件
 * 显示市场主要指数和热门基金行情
 * @param {Object} props - 组件属性
 * @param {Array} props.data - 市场数据
 */
const MarketOverview = ({ data }) => {
  // 如果没有数据，显示提示信息
  if (!data || data.length === 0) {
    return <div className="empty-state">暂无市场数据</div>;
  }

  // 分离指数和热门基金数据
  const indexes = data.filter(item => item.type === 'index');
  const hotFunds = data.filter(item => item.type === 'fund');

  return (
    <div className="market-overview">
      {/* 主要指数 */}
      <div className="index-section">
        <h3 className="subsection-title">主要指数</h3>
        <div className="index-cards">
          {indexes.map((index) => (
            <div 
              key={index.code} 
              className={`index-card ${index.changePercent >= 0 ? 'positive' : 'negative'}`}
            >
              <div className="index-name text-sm text-secondary">{index.name}</div>
              <div className="index-value">{index.value.toFixed(2)}</div>
              <div className="index-change text-sm">
                <span className="change-percent">
                  {index.changePercent >= 0 ? '+' : ''}{index.changePercent.toFixed(2)}%
                </span>
                <span className="change-value">
                  {index.change >= 0 ? '+' : ''}{index.change.toFixed(2)}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* 热门基金 */}
      <div className="hot-funds-section">
        <h3 className="subsection-title">热门基金</h3>
        <table className="funds-table">
          <thead>
            <tr>
              <th>基金名称</th>
              <th>代码</th>
              <th>净值</th>
              <th>日涨跌</th>
              <th>类型</th>
            </tr>
          </thead>
          <tbody>
            {hotFunds.map((fund) => (
              <tr key={fund.code}>
                <td>{fund.name}</td>
                <td>{fund.code}</td>
                <td>{fund.value.toFixed(4)}</td>
                <td className={fund.changePercent >= 0 ? 'positive' : 'negative'}>
                  {fund.changePercent >= 0 ? '+' : ''}{fund.changePercent.toFixed(2)}%
                </td>
                <td>{fund.category}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default MarketOverview;
</file>

<file path="src/components/trading/TradeForm.jsx">
import React, { useState } from 'react';
import './Trading.css';

/**
 * 交易表单组件
 * 用户可以通过此表单提交买入或卖出基金的申请
 * @param {Object} props - 组件属性
 * @param {Array} props.marketData - 市场数据
 * @param {Object} props.portfolio - 投资组合数据
 * @param {Function} props.onSubmit - 提交表单的回调函数
 */
const TradeForm = ({ marketData, portfolio, onSubmit }) => {
  // 表单状态
  const [formData, setFormData] = useState({
    action: 'buy', // buy 或 sell
    fundCode: '',
    amount: '', // 买入金额或卖出份额
    isAmountValid: true
  });
  
  // 交易结果状态
  const [tradeResult, setTradeResult] = useState(null);
  
  // 正在提交状态
  const [submitting, setSubmitting] = useState(false);
  
  // 可交易基金列表 (市场中的基金 + 持仓中的基金)
  const tradableFunds = React.useMemo(() => {
    const marketFunds = marketData.filter(item => item.type === 'fund');
    const portfolioFunds = portfolio?.holdings || [];
    
    // 合并市场基金和持仓基金，并去重
    const allFunds = [...marketFunds];
    
    portfolioFunds.forEach(holding => {
      if (!allFunds.find(fund => fund.code === holding.code)) {
        allFunds.push({
          code: holding.code,
          name: holding.name,
          value: holding.nav,
          category: holding.category || '未知'
        });
      }
    });
    
    return allFunds;
  }, [marketData, portfolio]);
  
  // 当前选中的基金
  const selectedFund = React.useMemo(() => {
    return tradableFunds.find(fund => fund.code === formData.fundCode);
  }, [tradableFunds, formData.fundCode]);
  
  // 当前持仓的基金
  const holdingFund = React.useMemo(() => {
    return portfolio?.holdings.find(holding => holding.code === formData.fundCode);
  }, [portfolio, formData.fundCode]);
  
  // 处理输入变化
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'amount') {
      // 验证金额/份额输入
      const isValid = /^\d*\.?\d*$/.test(value) && parseFloat(value) > 0;
      setFormData({
        ...formData,
        [name]: value,
        isAmountValid: isValid
      });
    } else {
      setFormData({
        ...formData,
        [name]: value
      });
    }
    
    // 清除之前的交易结果
    setTradeResult(null);
  };
  
  // 处理表单提交
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // 验证表单
    if (!formData.fundCode || !formData.amount || !formData.isAmountValid) {
      return;
    }
    
    // 构建交易订单
    const order = {
      action: formData.action,
      fundCode: formData.fundCode,
      amount: parseFloat(formData.amount)
    };
    
    setSubmitting(true);
    
    try {
      // 提交交易订单
      const result = await onSubmit(order);
      setTradeResult(result);
      
      // 如果交易成功，重置表单
      if (result.success) {
        setFormData({
          action: 'buy',
          fundCode: '',
          amount: '',
          isAmountValid: true
        });
      }
    } catch (err) {
      setTradeResult({
        success: false,
        message: '交易过程中发生错误: ' + err.message
      });
    } finally {
      setSubmitting(false);
    }
  };
  
  return (
    <div className="trade-form">
      <form onSubmit={handleSubmit}>
        {/* 买入/卖出选择 */}
        <div className="form-group">
          <label className="form-label text-secondary">交易类型</label>
          <div className="trade-type-selector">
            <label className={`trade-type-option ${formData.action === 'buy' ? 'selected' : ''}`}>
              <input
                type="radio"
                name="action"
                value="buy"
                checked={formData.action === 'buy'}
                onChange={handleInputChange}
              />
              买入
            </label>
            <label className={`trade-type-option ${formData.action === 'sell' ? 'selected' : ''}`}>
              <input
                type="radio"
                name="action"
                value="sell"
                checked={formData.action === 'sell'}
                onChange={handleInputChange}
              />
              卖出
            </label>
          </div>
        </div>
        
        {/* 基金选择 */}
        <div className="form-group">
          <label htmlFor="fundCode" className="form-label text-secondary">选择基金</label>
          <select
            id="fundCode"
            name="fundCode"
            value={formData.fundCode}
            onChange={handleInputChange}
            className="fund-select"
            required
          >
            <option value="">请选择基金</option>
            {tradableFunds.map(fund => (
              <option key={fund.code} value={fund.code}>
                {fund.name} ({fund.code})
              </option>
            ))}
          </select>
        </div>
        
        {/* 金额/份额输入 */}
        <div className="form-group">
          <label htmlFor="amount" className="form-label text-secondary">
            {formData.action === 'buy' ? '买入金额 (元)' : '卖出份额'}
          </label>
          <input
            type="text"
            id="amount"
            name="amount"
            value={formData.amount}
            onChange={handleInputChange}
            className={`amount-input ${!formData.isAmountValid ? 'invalid' : ''}`}
            placeholder={formData.action === 'buy' ? '请输入买入金额' : '请输入卖出份额'}
            required
          />
          {!formData.isAmountValid && (
            <div className="input-error text-error text-xs">请输入有效的{formData.action === 'buy' ? '金额' : '份额'}</div>
          )}
          
          {/* 显示可用资金或可卖出份额 */}
          {formData.fundCode && (
            <div className="available-info text-sm text-tertiary">
              {formData.action === 'buy' && portfolio ? (
                <span>可用资金: ¥{portfolio.availableCash.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</span>
              ) : (
                holdingFund && (
                  <span>可卖出份额: {holdingFund.shares.toFixed(2)}</span>
                )
              )}
            </div>
          )}
        </div>
        
        {/* 交易信息预览 */}
        {selectedFund && formData.isAmountValid && formData.amount && (
          <div className="trade-preview">
            <h4 className="preview-title text-sm text-secondary">交易预览</h4>
            <div className="preview-item">
              <span className="preview-label text-tertiary">基金:</span>
              <span className="preview-value">{selectedFund.name}</span>
            </div>
            <div className="preview-item">
              <span className="preview-label text-tertiary">最新净值:</span>
              <span className="preview-value">{selectedFund.value.toFixed(4)}</span>
            </div>
            {formData.action === 'buy' ? (
              <div className="preview-item">
                <span className="preview-label text-tertiary">预估份额:</span>
                <span className="preview-value">
                  {(parseFloat(formData.amount) / selectedFund.value).toFixed(2)}
                </span>
              </div>
            ) : (
              <div className="preview-item">
                <span className="preview-label text-tertiary">预估金额:</span>
                <span className="preview-value">
                  ¥{(parseFloat(formData.amount) * selectedFund.value).toLocaleString('zh-CN', { minimumFractionDigits: 2 })}
                </span>
              </div>
            )}
          </div>
        )}
        
        {/* 交易结果提示 */}
        {tradeResult && (
          <div className={`trade-result ${tradeResult.success ? 'success' : 'error'}`}>
            {tradeResult.message}
          </div>
        )}
        
        {/* 提交按钮 */}
        <button
          type="submit"
          className="submit-button"
          disabled={!formData.fundCode || !formData.amount || !formData.isAmountValid || submitting}
        >
          {submitting ? '处理中...' : formData.action === 'buy' ? '买入' : '卖出'}
        </button>
      </form>
    </div>
  );
};

export default TradeForm;
</file>

<file path="src/components/trading/Trading.css">
/* 市场概览组件样式 */
.market-overview {
  margin-bottom: var(--spacing-md);
}

.subsection-title {
  font-size: var(--font-size-md);
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

/* 指数卡片 */
.index-cards {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-xl);
}

.index-card {
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  width: calc(25% - var(--spacing-md));
  min-width: 150px;
}

.index-card.positive {
  background-color: rgba(16, 185, 129, 0.1);
  border-left: 3px solid var(--success-color);
}

.index-card.negative {
  background-color: rgba(239, 68, 68, 0.1);
  border-left: 3px solid var(--error-color);
}

.index-name {
  margin-bottom: var(--spacing-xs);
}

.index-value {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  margin-bottom: var(--spacing-xs);
}

.index-card.positive .index-change {
  color: var(--success-color);
}

.index-card.negative .index-change {
  color: var(--error-color);
}

.change-value {
  margin-left: var(--spacing-sm);
  opacity: 0.8;
}

/* 基金表格 */
.funds-table,
.holdings-table,
.trades-table {
  width: 100%;
  border-collapse: collapse;
}

.funds-table th,
.funds-table td,
.holdings-table th,
.holdings-table td,
.trades-table th,
.trades-table td {
  padding: var(--spacing-sm);
  text-align: left;
  border-bottom: 1px solid var(--neutral-200);
}

.funds-table th,
.holdings-table th,
.trades-table th {
  font-weight: var(--font-weight-bold);
  color: var(--text-secondary);
  background-color: var(--neutral-50);
}

.positive {
  color: var(--success-color);
}

.negative {
  color: var(--error-color);
}

/* 投资组合概览样式 */
.portfolio-stats {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-xl);
}

.stat-item {
  display: flex;
  flex-direction: column;
}

.stat-label {
  margin-bottom: var(--spacing-xs);
}

.stat-value {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
}

.stat-secondary {
  opacity: 0.8;
  margin-left: var(--spacing-xs);
}

.fund-name {
  font-weight: var(--font-weight-medium);
}

.profit-value {
  display: block;
  opacity: 0.9;
}

/* 交易表单样式 */
.trade-form {
  max-width: 500px;
  margin: 0 auto;
}

.form-group {
  margin-bottom: var(--spacing-md);
}

.form-label {
  display: block;
  margin-bottom: var(--spacing-xs);
  color: var(--text-secondary);
  font-weight: var(--font-weight-medium);
}

.trade-type-selector {
  display: flex;
  margin-bottom: var(--spacing-sm);
}

.trade-type-option {
  flex: 1;
  text-align: center;
  padding: var(--spacing-sm);
  border: 1px solid var(--neutral-300);
  background-color: var(--neutral-50);
  cursor: pointer;
}

.trade-type-option:first-child {
  border-radius: var(--border-radius-md) 0 0 var(--border-radius-md);
}

.trade-type-option:last-child {
  border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;
}

.trade-type-option.selected {
  background-color: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.trade-type-option input {
  display: none;
}

.fund-select,
.amount-input {
  width: 100%;
  padding: var(--spacing-sm);
  border: 1px solid var(--neutral-300);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-md);
}

.fund-select:focus,
.amount-input:focus {
  outline: none;
  border-color: var(--primary-color);
}

.amount-input.invalid {
  border-color: var(--error-color);
}

.input-error {
  color: var(--error-color);
  font-size: var(--font-size-xs);
  margin-top: var(--spacing-xs);
}

.available-info {
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
  margin-top: var(--spacing-xs);
}

.trade-preview {
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
  padding: var(--spacing-md);
  margin-bottom: var(--spacing-md);
}

.preview-title {
  font-size: var(--font-size-sm);
  margin-top: 0;
  margin-bottom: var(--spacing-sm);
  color: var(--text-secondary);
}

.preview-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: var(--spacing-xs);
  font-size: var(--font-size-sm);
}

.preview-label {
  color: var(--text-tertiary);
}

.trade-result {
  padding: var(--spacing-sm);
  border-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-md);
  font-size: var(--font-size-sm);
}

.trade-result.success {
  background-color: rgba(16, 185, 129, 0.1);
  color: var(--success-color);
}

.trade-result.error {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--error-color);
}

.submit-button {
  width: 100%;
  padding: var(--spacing-sm);
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: var(--transition-default);
}

.submit-button:hover:not(:disabled) {
  background-color: var(--primary-dark);
}

.submit-button:disabled {
  background-color: var(--neutral-400);
  cursor: not-allowed;
}

/* 交易历史样式 */
.trade-action {
  font-weight: var(--font-weight-medium);
}

.trade-action.buy {
  color: var(--success-color);
}

.trade-action.sell {
  color: var(--error-color);
}

.trade-shares,
.trade-amount {
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
}

.trade-status {
  display: inline-block;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
}

.trade-status.completed {
  background-color: rgba(16, 185, 129, 0.1);
  color: var(--success-color);
}

.trade-status.pending {
  background-color: rgba(245, 158, 11, 0.1);
  color: var(--accent-color);
}

.trade-status.failed {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--error-color);
}

/* 空状态 */
.empty-state {
  text-align: center;
  padding: var(--spacing-xl);
  color: var(--text-tertiary);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .index-card {
    width: calc(50% - var(--spacing-md));
  }

  .funds-table,
  .holdings-table,
  .trades-table {
    display: block;
    overflow-x: auto;
  }
}
</file>

<file path="src/components/Layout.jsx">
import React, { useState, useEffect } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import Header from './layout/Header';
import Sidebar from './layout/Sidebar';
import Footer from './layout/Footer';
import { BiBarChart, BiChat, BiUser, BiLineChart, BiNews } from 'react-icons/bi';
import './Layout.css';

const Layout = () => {
  const location = useLocation();
  const [activeCategory, setActiveCategory] = useState('');

  // 根据当前路径确定活动类别
  useEffect(() => {
    const path = location.pathname;
    if (path.includes('/cognitive')) {
      setActiveCategory('cognitive');
    } else if (path.includes('/behavior')) {
      setActiveCategory('behavior');
    } else if (path.includes('/decision')) {
      setActiveCategory('decision');
    } else if (path.includes('/information')) {
      setActiveCategory('information');
    } else if (path.includes('/user')) {
      setActiveCategory('user');
    } else {
      setActiveCategory('');
    }
  }, [location]);

  const menuItems = [
    {
      category: 'cognitive',
      label: '认知诊断',
      icon: <BiChat className="sidebar-icon" />,
      path: '/cognitive/chat'
    },
    {
      category: 'behavior',
      label: '行为矫正',
      icon: <BiUser className="sidebar-icon" />,
      path: '/behavior/profile'
    },
    {
      category: 'decision',
      label: '决策支持',
      icon: <BiBarChart className="sidebar-icon" />,
      path: '/decision/portfolio'
    },
    {
      category: 'information',
      label: '信息解读',
      icon: <BiNews className="sidebar-icon" />,
      path: '/information/news'
    },
    {
      category: 'user',
      label: '用户中心',
      icon: <BiUser className="sidebar-icon" />,
      path: '/user/profile'
    }
  ];

  return (
    <div className="app-layout">
      <Sidebar activeCategory={activeCategory} menuItems={menuItems} />
      <div className="main-content">
        <Header />
        <main className="content-area">
          <Outlet />
        </main>
        <Footer />
      </div>
    </div>
  );
};

export default Layout;
</file>

<file path="src/contexts/ThemeContext.jsx">
import React, { createContext, useState, useEffect } from 'react';

export const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    // 检查用户之前的主题偏好
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      setTheme(savedTheme);
      if (savedTheme === 'dark') {
        document.documentElement.classList.add('dark-theme');
      }
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      setTheme('dark');
      document.documentElement.classList.add('dark-theme');
    }
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);

    // 切换 HTML 根元素的类
    if (newTheme === 'dark') {
      document.documentElement.classList.add('dark-theme');
    } else {
      document.documentElement.classList.remove('dark-theme');
    }
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};
</file>

<file path="src/pages/behavior/BehaviorCorrection.css">
/* 导入基础页面样式和可组合类 */
@import '../css-base.css';
@import '../../styles/composable-classes.css';

.behavior-correction-page {
  max-width: var(--page-container-width);
  margin: 0 auto;
  padding: var(--page-container-padding-y) var(--page-container-padding-x);
  padding-top: var(--page-top-spacing);
  width: 100%;
}

.page-header {
  margin-bottom: var(--header-block-margin-bottom);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--header-title-margin-bottom);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: var(--content-narrow-width);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--header-description-margin-bottom);
}

.behavior-tabs {
  display: flex;
  border-bottom: 1px solid var(--neutral-200);
  margin-bottom: var(--spacing-xl);
}

.tab-button {
  background: none;
  border: none;
  padding: var(--spacing-sm) var(--spacing-lg);
  font-size: var(--font-size-md);
  color: var(--text-tertiary);
  cursor: pointer;
  position: relative;
  transition: var(--transition-default);
}

.tab-button.active {
  color: var(--primary-color);
  font-weight: var(--font-weight-medium);
}

.tab-button.active::after {
  content: '';
  position: absolute;
  bottom: -1px;
  left: 0;
  width: 100%;
  height: 2px;
  background-color: var(--primary-color);
}

.tab-button:hover:not(.active) {
  color: var(--text-primary);
  background-color: var(--neutral-50);
}

.alerts-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 20px;
  height: 20px;
  padding: 0 var(--spacing-xs);
  border-radius: 10px;
  background-color: var(--primary-color);
  color: white;
  font-size: var(--font-size-xs);
  margin-left: var(--spacing-xs);
}

.feature-content {
  margin-bottom: var(--spacing-xl);
}

.section-title {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: var(--spacing-lg);
}

.module-cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: var(--spacing-lg);
}

.module-card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  display: flex;
  flex-direction: column;
  transition: var(--transition-default);
}

.module-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-md);
}

.module-icon {
  font-size: 2rem;
  margin-bottom: var(--spacing-md);
  color: var(--primary-color);
}

.profile-icon {
  color: var(--accent-color);
}

.trading-icon {
  color: var(--success-color);
}

.alerts-icon {
  color: var(--warning-color);
}

.module-title {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: var(--spacing-sm);
}

.module-description {
  color: var(--text-secondary);
  margin-bottom: var(--spacing-lg);
  line-height: var(--line-height-relaxed);
  flex-grow: 1;
}

.module-link {
  align-self: flex-start;
  padding: var(--spacing-xs) var(--spacing-md);
  background-color: var(--primary-color);
  color: white;
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  text-decoration: none;
  transition: var(--transition-default);
}

.module-link:hover {
  background-color: var(--primary-dark);
  text-decoration: none;
}

/* 学习资源卡片 */
.learning-resources-card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  margin-bottom: var(--spacing-xl);
}

.card-title {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: var(--spacing-lg);
}

.resources-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.resource-item {
  display: flex;
  gap: var(--spacing-md);
  padding: var(--spacing-md);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
  transition: var(--transition-default);
}

.resource-item:hover {
  background-color: var(--neutral-100);
}

.resource-icon {
  font-size: 1.5rem;
  color: var(--primary-color);
}

.article-icon {
  color: var(--info-color);
}

.video-icon {
  color: var(--error-color);
}

.quiz-icon {
  color: var(--warning-color);
}

.resource-content {
  flex: 1;
}

.resource-title {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: var(--spacing-xs);
}

.resource-description {
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--spacing-xs);
}

.resource-link {
  color: var(--primary-color);
  font-size: var(--font-size-sm);
  text-decoration: none;
}

.resource-link:hover {
  text-decoration: underline;
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-md)) {
  .behavior-tabs {
    overflow-x: auto;
    padding-bottom: var(--spacing-xs);
  }
  
  .tab-button {
    white-space: nowrap;
    padding: var(--spacing-xs) var(--spacing-md);
  }
  
  .module-cards {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="src/pages/behavior/BehaviorProfile.css">
.behavior-profile-page {
  max-width: var(--page-max-width);
  margin: 0 auto;
  padding: var(--page-padding-y) var(--page-padding-x);
  padding-top: var(--page-top-spacing); /* 使用统一的顶部间距变量 */
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
}

.behavior-profile-overview {
  display: grid;
  grid-template-columns: 1fr 2fr;
  gap: var(--spacing-lg);
  margin-bottom: var(--spacing-xl);
}

.card-title {
  font-size: var(--font-size-lg);
  margin-top: 0;
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
}

/* 风险得分卡片 */
.risk-score-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.score-circle {
  width: 120px;
  height: 120px;
  margin-bottom: var(--spacing-md);
}

.score-circle.large {
  width: 150px;
  height: 150px;
}

.score-circle svg {
  width: 100%;
  height: 100%;
}

.score-bg {
  fill: none;
  stroke: var(--neutral-200);
  stroke-width: 3;
}

.score-fill {
  fill: none;
  stroke: var(--primary-color);
  stroke-width: 3;
  stroke-linecap: round;
  transform: rotate(90deg);
  transform-origin: center;
  transition: stroke-dasharray 0.5s;
}

.score-fill.knowledge {
  stroke: var(--secondary-color);
}

.score-text {
  font-size: var(--font-size-xs);
  text-anchor: middle;
  fill: var(--text-primary);
  font-weight: var(--font-weight-bold);
}

.score-description {
  margin-top: var(--spacing-sm);
  color: var(--text-secondary);
}

.score-label {
  display: inline-block;
  padding: var(--spacing-xs) var(--spacing-xs);
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  background-color: var(--primary-color);
  color: white;
  margin-top: var(--spacing-sm);
}

/* 交易风格卡片 */
.trade-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-lg);
}

.stat-item {
  display: flex;
  flex-direction: column;
}

.stat-label {
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
  margin-bottom: var(--spacing-xs);
}

.stat-value {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
}

.style-analysis {
  color: var(--text-secondary);
  line-height: 1.6;
}

/* 雷达图卡片 */
.radar-chart-card {
  margin-bottom: var(--spacing-xl);
}

.chart-container {
  height: 400px;
  margin-bottom: var(--spacing-lg);
}

.chart-description {
  color: var(--text-tertiary);
  font-size: var(--font-size-sm);
  text-align: center;
}

/* 偏差部分 */
.section-title {
  font-size: var(--font-size-xl);
  margin-bottom: var(--spacing-lg);
  color: var(--text-primary);
}

.bias-cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: var(--spacing-lg);
  margin-bottom: var(--spacing-xl);
}

.bias-card {
  position: relative;
  overflow: visible;
}

.bias-card.high::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background-color: var(--error-color);
  border-radius: var(--border-radius-lg) var(--border-radius-lg) 0 0;
}

.bias-card.medium::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background-color: var(--warning-color);
  border-radius: var(--border-radius-lg) var(--border-radius-lg) 0 0;
}

.bias-card.low::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background-color: var(--success-color);
  border-radius: var(--border-radius-lg) var(--border-radius-lg) 0 0;
}

.bias-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.bias-name {
  font-size: var(--font-size-lg);
  margin: 0;
}

.bias-severity {
  font-size: var(--font-size-xs);
  padding: var(--spacing-xs) var(--spacing-xs);
  border-radius: var(--border-radius-full);
  color: white;
}

.bias-severity.high {
  background-color: var(--error-color);
}

.bias-severity.medium {
  background-color: var(--warning-color);
}

.bias-severity.low {
  background-color: var(--success-color);
}

.bias-score {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-md);
}

.score-bar {
  flex: 1;
  height: 8px;
  background-color: var(--neutral-200);
  border-radius: var (--border-radius-full);
  overflow: hidden;
}

.score-bar-fill {
  height: 100%;
  background-color: var(--primary-color);
  border-radius: var(--border-radius-full);
}

.bias-description {
  color: var(--text-secondary);
  line-height: 1.6;
  margin-bottom: var(--spacing-md);
}

.suggestions-title {
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-sm);
}

.suggestions-list {
  padding-left: var(--spacing-lg);
  margin-bottom: 0;
  color: var(--text-secondary);
}

.suggestions-list li {
  margin-bottom: var(--spacing-xs);
}

/* 知识评估卡片 */
.knowledge-evaluation-card {
  margin-bottom: var(--spacing-xl);
}

.knowledge-score {
  display: flex;
  gap: var(--spacing-xl);
  align-items: center;
}

.knowledge-description {
  flex: 1;
}

.knowledge-areas {
  margin-top: var(--spacing-md);
}

.knowledge-areas h4 {
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-sm);
}

.knowledge-tags {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-sm);
  margin-bottom: var(--spacing-md);
}

.knowledge-tag {
  display: inline-block;
  padding: 4px 12px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
}

.knowledge-tag.strength {
  background-color: rgba(16, 185, 129, 0.1);
  color: var(--success-color);
}

.knowledge-tag.weakness {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--error-color);
}

/* 行为改进计划 */
.action-plan-card {
  margin-bottom: var(--spacing-xl);
}

.action-items {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-xl);
}

.action-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.action-title {
  font-size: var(--font-size-lg);
  margin: 0;
}

.action-priority {
  display: inline-block;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  background-color: var(--primary-color);
  color: white;
}

.action-description {
  color: var(--text-secondary);
  line-height: 1.6;
  margin-bottom: var(--spacing-md);
}

.steps-title {
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-sm);
}

.steps-list {
  padding-left: var(--spacing-xl);
  margin-bottom: 0;
  color: var(--text-secondary);
}

.steps-list li {
  margin-bottom: var(--spacing-sm);
}

/* 响应式调整 */
@media (max-width: 992px) {
  .behavior-profile-overview {
    grid-template-columns: 1fr;
  }
  
  .knowledge-score {
    flex-direction: column;
    text-align: center;
  }
}

@media (max-width: 768px) {
  .bias-cards {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="src/pages/behavior/TradingSimulation.css">
/* 导入基础页面样式 */
@import '../css-base.css';

/* 继承基础页面样式 */
.trading-simulation-page {
  composes: base-page;
}

/* 页面头部继承基础样式，不需要重新定义 */
.trading-simulation-page .page-header {
  composes: base-page-header;
}

.trading-simulation-page .page-title {
  composes: base-page-title;
}

.trading-simulation-page .page-description {
  composes: base-page-description;
}

/* 交易模拟页面特定布局 */
.trading-simulation-layout {
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--spacing-lg);
}

.portfolio-trade-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--spacing-lg);
  margin-bottom: var(--component-margin-bottom);
}

/* 卡片容器使用基础卡片样式，额外添加必要的样式 */
.market-overview-card,
.portfolio-card,
.trade-card,
.trade-history-card,
.behavior-feedback-card {
  composes: base-card;
}

/* 标题使用基础标题样式 */
.section-title {
  composes: base-section-title;
}

/* 响应式设计 */
@media (max-width: var(--breakpoint-lg)) {
  .portfolio-trade-grid {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="src/pages/cognitive/ChatInterface.css">
/* 导入基础页面样式 */
@import '../css-base.css';

/* 导入已有样式变量和通用样式 */
@import '../../styles/variables.css';
@import '../../styles/composable-classes.css';

/* 基础页面布局 */
.chat-interface-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing-md) var(--spacing-lg);
  padding-top: var(--page-top-spacing); /* 使用统一的顶部间距变量 */
}

/* 页面标题样式 - 与 LearningCenter 保持一致 */
.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
}

/* 部分标题 - 与 LearningCenter 保持一致 */
.section-title {
  font-size: var(--font-size-xl);
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

/* 聊天布局 */
.chat-container {
  display: grid;
  grid-template-columns: 2fr 1fr; /* 维持 2:1 的比例 */
  gap: var(--spacing-lg);
  margin-bottom: var(--spacing-xl);
}

.chat-main {
  display: flex;
  flex-direction: column;
}

.chat-sidebar {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
}

/* 卡片样式 - 使用全局卡片样式 */
.card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  margin-bottom: var(--card-margin-bottom);
  transition: transform 0.2s, box-shadow 0.2s;
}

.card:hover {
  box-shadow: var(--shadow-md);
}

.card-sm {
  padding: var(--spacing-md);
}

/* 聊天区域样式 */
.chat-header {
  padding-bottom: var(--spacing-md);
  border-bottom: 1px solid var(--neutral-200);
  margin-bottom: var(--spacing-md);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  height: 450px;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-md);
  padding: var(--spacing-md);
  border: 1px solid var(--neutral-200);
  border-radius: var(--border-radius-md);
  background-color: var(--neutral-50);
  scroll-behavior: smooth;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.05);
}

/* 消息样式 */
.message {
  display: flex;
  max-width: 85%;
  margin-bottom: var(--spacing-sm);
  animation: message-fade-in 0.3s ease-out forwards;
}

@keyframes message-fade-in {
  0% {
    opacity: 0;
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.message-user {
  align-self: flex-end;
  flex-direction: row-reverse;
}

.message-assistant {
  align-self: flex-start;
}

.message-avatar {
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: var(--font-size-xl);
  margin: 0 var(--spacing-sm);
}

.message-content {
  background-color: var(--neutral-100);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--border-radius-lg);
  color: var(--text-primary);
  box-shadow: var(--shadow-sm);
  line-height: var(--line-height-relaxed);
}

/* 用户消息样式 */
.message-user .message-content {
  background-color: var(--primary-color);
  color: white;
  border-top-right-radius: 4px;
}

/* AI消息样式 */
.message-assistant .message-content {
  background-color: var(--neutral-100);
  border-top-left-radius: 4px;
}

/* 消息内容段落 */
.message-content p {
  margin: var(--spacing-xs) 0;
}

/* 打字指示器 */
.typing-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 30px;
  padding: var(--spacing-xs) var(--spacing-md);
}

.typing-indicator span {
  height: 8px;
  width: 8px;
  margin: 0 2px;
  background-color: var(--neutral-400);
  border-radius: 50%;
  display: inline-block;
  animation: typing 1.4s infinite ease-in-out;
}

.typing-indicator span:nth-child(1) {
  animation-delay: 0s;
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes typing {
  0%, 60%, 100% { 
    transform: translateY(0px); 
    opacity: 0.6;
  }
  30% { 
    transform: translateY(-8px); 
    opacity: 1;
  }
}

/* 错误消息 */
.chat-error {
  margin-bottom: var(--spacing-md);
  padding: var(--spacing-sm) var(--spacing-md);
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--error-color);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-sm);
  border-left: 3px solid var(--error-color);
}

/* 聊天输入区域 */
.chat-input-container {
  display: flex;
  gap: var(--spacing-sm);
  align-items: flex-start;
  padding: var(--spacing-md) 0;
}

.chat-input {
  flex: 1;
  padding: var(--spacing-md);
  border: 1px solid var(--neutral-300);
  border-radius: var(--border-radius-md);
  font-family: inherit;
  font-size: var(--font-size-md);
  resize: none;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
  line-height: var(--line-height-relaxed);
}

.chat-input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

/* 按钮样式 - 使用通用按钮样式 */
.btn {
  padding: var(--spacing-sm) var(--spacing-lg);
  border-radius: var(--border-radius-md);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: all 0.2s ease;
  border: none;
}

.btn.primary {
  background-color: var(--primary-color);
  color: white;
}

.btn.primary:hover:not(:disabled) {
  background-color: var(--primary-dark);
  transform: translateY(-1px);
}

.btn.primary:active:not(:disabled) {
  transform: translateY(1px);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* 标题样式 */
.title-group {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-medium);
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

/* 快速问题按钮 */
.quick-questions-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

.quick-question-button {
  padding: var(--spacing-sm) var(--spacing-md);
  background-color: var(--neutral-100);
  border: 1px solid var(--neutral-200);
  border-radius: var(--border-radius-md);
  text-align: left;
  font-size: var(--font-size-sm);
  color: var(--text-primary);
  cursor: pointer;
  transition: all 0.2s ease;
}

.quick-question-button:hover {
  background-color: var(--neutral-200);
  transform: translateY(-1px);
  box-shadow: var(--shadow-sm);
}

.quick-question-button:active {
  transform: translateY(0);
}

/* 行为分析条 */
.behavior-summary {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-md);
}

.behavior-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.behavior-bar {
  flex: 1;
  height: 8px;
  background-color: var(--neutral-200);
  border-radius: var(--border-radius-full);
  margin: 0 var(--spacing-sm);
  overflow: hidden;
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
}

.behavior-fill {
  height: 100%;
  background-color: var(--primary-color);
  border-radius: var(--border-radius-full);
  transition: width 1s ease-out;
}

/* 工具类 */
.text-sm {
  font-size: var(--font-size-sm);
}

.text-bold {
  font-weight: var(--font-weight-bold);
}

.text-tertiary {
  color: var(--text-tertiary);
}

.mt-md {
  margin-top: var(--spacing-md);
}

/* 响应式布局 */
@media (max-width: 768px) {
  .chat-container {
    grid-template-columns: 1fr;
  }
  
  .chat-sidebar {
    order: -1;
    margin-bottom: var(--spacing-lg);
  }
  
  .chat-input-container {
    flex-direction: column;
  }
  
  .btn {
    width: 100%;
  }
}

/* 加载状态 */
.page-loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 300px;
  padding: var(--spacing-xl);
  text-align: center;
  color: var(--text-secondary);
}
</file>

<file path="src/pages/cognitive/CourseDetail.css">
/* 导入基础页面样式和可组合类 */
@import '../css-base.css';
@import '../../styles/composable-classes.css';

/* 使用直接类定义而非composes */
.course-detail-page {
  /* 使用布局类定义 */
  max-width: var(--page-container-width);
  margin: 0 auto;
  padding: var(--page-container-padding-y) var(--page-container-padding-x);
  padding-top: var(--page-top-spacing);
  width: 100%;
}

/* 为页面添加命名空间，避免和全局样式冲突 */
.course-detail-page .page-header {
  margin-bottom: var(--header-block-margin-bottom);
}

.course-detail-page .page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--header-title-margin-bottom);
  color: var(--text-primary);
}

/* 解决与基础页面样式的冲突 */
.course-detail-container {
  display: grid;
  grid-template-columns: 1fr 300px;
  gap: var(--spacing-lg);
}

/* 使用独立命名的选择器，避免与页面级样式冲突 */
.course-main-content {
  /* 课程主要内容区域 */
}

.course-image-container {
  max-width: 300px; /* 特定于此组件，不会与页面冲突 */
  margin-bottom: var(--spacing-md);
}

/* 重命名冲突的lesson-type类 */
.course-lesson-type {
  /* 使用更具体的命名避免重复 */
  display: inline-flex;
  align-items: center;
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
  margin-right: var(--spacing-md);
}

.course-lesson-type.video::before {
  content: "▶";
  margin-right: var(--spacing-xs);
  color: var(--primary-color);
}

.course-lesson-type.quiz::before {
  content: "?";
  margin-right: var(--spacing-xs);
  color: var(--accent-color);
}

/* 响应式设计调整 */
@media (max-width: var(--breakpoint-lg)) {
  .course-detail-container {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="src/pages/cognitive/LearningCenter.css">
.learning-center-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing-md) 0;
  padding-top: var(--page-top-spacing); /* 使用统一的顶部间距变量 */
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
}

/* 搜索栏样式 */
.search-bar {
  margin-bottom: var(--spacing-xl);
}

.search-input-container {
  position: relative;
  max-width: 600px;
}

.search-icon {
  position: absolute;
  left: var(--spacing-md);
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-tertiary);
}

.search-input {
  width: 100%;
  padding: var(--spacing-md) var(--spacing-md) var(--spacing-md) calc(var(--spacing-md) * 3);
  border: 1px solid var(--neutral-300);
  border-radius: var(--border-radius-lg);
  font-size: var(--font-size-md);
  transition: border-color 0.2s, box-shadow 0.2s;
}

.search-input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

/* 部分标题 */
.section-title {
  font-size: var(--font-size-xl);
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

.section-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-lg);
  max-width: 800px;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-lg);
  flex-wrap: wrap;
  gap: var(--spacing-md);
}

/* 分类筛选 */
.category-filter {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-xs);
}

.category-button {
  background-color: var(--neutral-100);
  border: none;
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
  cursor: pointer;
  transition: background-color 0.2s, color 0.2s;
}

.category-button.active {
  background-color: var(--primary-color);
  color: white;
}

.category-button:hover:not(.active) {
  background-color: var(--neutral-200);
}

/* 进行中的课程 */
.in-progress-section {
  margin-bottom: var(--spacing-2xl);
}

.course-cards {
  display: grid;
  gap: var(--spacing-lg);
}

.course-cards.in-progress {
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
}

.course-cards.recommended {
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
}

.course-cards.all {
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
}

.course-card {
  position: relative;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
  display: flex;
  flex-direction: column;
}

.course-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-md);
}

.course-card.in-progress {
  border-top: 3px solid var(--primary-color);
}

.course-tag {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: var(--primary-color);
  color: white;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  z-index: 1;
}

.course-progress-bar {
  height: 4px;
  background-color: var(--neutral-200);
  border-radius: var(--border-radius-full);
  overflow: hidden;
  margin-bottom: var(--spacing-md);
}

.course-progress-bar.small {
  height: 3px;
  margin-top: var(--spacing-sm);
  margin-bottom: 0;
}

.progress-fill {
  height: 100%;
  background-color: var(--primary-color);
  border-radius: var(--border-radius-full);
}

.course-image-container {
  width: 100%;
  height: 160px;
  overflow: hidden;
  border-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-sm);
}

.course-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s;
}

.course-card:hover .course-image {
  transform: scale(1.05);
}

.course-title {
  font-size: var(--font-size-lg);
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
}

.course-description {
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  margin-bottom: var(--spacing-sm);
  line-height: var(--line-height-normal);
  
  /* 多行文本截断 */
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.course-meta {
  display: flex;
  justify-content: space-between;
  margin-bottom: var(--spacing-xs);
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
}

.course-stats {
  display: flex;
  justify-content: space-between;
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
}

.course-level {
  background-color: var(--neutral-100);
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
}

.course-last-accessed {
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
  margin-bottom: var(--spacing-sm);
}

.continue-button {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--border-radius-md);
  cursor: pointer;
  transition: background-color 0.2s;
  align-self: flex-start;
}

.continue-button:hover {
  background-color: var(--primary-dark);
}

/* 推荐课程 */
.recommended-section {
  margin-bottom: var(--spacing-2xl);
}

/* 所有课程 */
.all-courses-section {
  margin-bottom: var(--spacing-2xl);
}

/* 学习路径 */
.learning-paths-section {
  margin-bottom: var(--spacing-2xl);
}

.learning-paths {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: var(--spacing-lg);
}

.learning-path-card {
  transition: transform 0.2s, box-shadow 0.2s;
}

.learning-path-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-md);
}

.path-title {
  font-size: var(--font-size-lg);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.path-description {
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  margin-bottom: var(--spacing-md);
  line-height: var(--line-height-normal);
}

.path-stats {
  display: flex;
  justify-content: space-between;
  margin-bottom: var(--spacing-md);
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
}

.path-button {
  background-color: transparent;
  border: 1px solid var(--primary-color);
  color: var(--primary-color);
  padding: var(--spacing-xs) var(--spacing-md);
  border-radius: var(--border-radius-md);
  cursor: pointer;
  transition: background-color 0.2s, color 0.2s;
}

.path-button:hover {
  background-color: var(--primary-color);
  color: white;
}

/* 空状态 */
.empty-state {
  text-align: center;
  padding: var(--spacing-xl);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
  color: var(--text-tertiary);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .section-header {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .category-filter {
    margin-top: var(--spacing-sm);
  }
  
  .course-cards.in-progress,
  .course-cards.recommended,
  .course-cards.all,
  .learning-paths {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="src/pages/cognitive/ScenarioSimulation.css">
.scenario-simulation-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing-md) 0;
  padding-top: var(--page-top-spacing); /* 使用统一的顶部间距变量 */
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
}

/* 场景卡片网格 */
.scenarios-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: var(--spacing-lg);
}

.scenario-card {
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
  position: relative;
  overflow: hidden;
}

.scenario-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-md);
}

.scenario-card.completed {
  border-top: 4px solid var(--success-color);
}

.completion-badge {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: var(--success-color);
  color: white;
  font-size: var(--font-size-xs);
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
}

.scenario-title {
  font-size: var(--font-size-lg);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.scenario-description {
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--spacing-md);
}

.scenario-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.scenario-meta {
  display: flex;
  gap: var(--spacing-sm);
}

.scenario-difficulty,
.scenario-duration {
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
}

.scenario-tags {
  display: flex;
  gap: var(--spacing-xs);
}

.scenario-tag {
  background-color: var(--neutral-100);
  color: var(--text-secondary);
  font-size: var(--font-size-xs);
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
}

.scenario-tag.more {
  background-color: var(--neutral-300);
  color: var(--text-light);
}

/* 场景详情 */
.scenario-detail-card {
  margin-bottom: var(--spacing-xl);
}

.back-button {
  background: none;
  border: none;
  color: var(--primary-color);
  padding: 0;
  cursor: pointer;
  font-size: var(--font-size-sm);
  margin-bottom: var(--spacing-md);
  display: flex;  
  align-items: center;
}

.back-button::before {
  content: '←';
  margin-right: var(--spacing-xs);
}

.scenario-detail-header {
  margin-bottom: var(--spacing-md);
}

.scenario-detail-header .scenario-title {
  font-size: var(--font-size-xl);
  margin-bottom: var(--spacing-xs);
}

.scenario-detail-header .scenario-meta {
  margin-bottom: var(--spacing-md);
}

.scenario-detail-card .scenario-description {
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-lg);
}

.scenario-detail-card .scenario-tags {
  margin-bottom: var(--spacing-xl);
}

.section-title {
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.scenario-background {
  color: var(--text-secondary);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--spacing-lg);
}

.learning-objectives,
.scenario-steps {
  padding-left: var(--spacing-xl);
  margin-bottom: var(--spacing-lg);
  color: var(--text-secondary);
  line-height: 1.6;
}

.learning-objectives li,
.scenario-steps li {
  margin-bottom: var(--spacing-sm);
}

.scenario-actions {
  margin-top: var(--spacing-xl);
  display: flex;
  justify-content: center;
}

.start-button {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: var(--spacing-sm) var(--spacing-xl);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: background-color 0.2s;
}

.start-button:hover:not(:disabled) {
  background-color: var(--primary-dark);
}

.start-button:disabled {
  background-color: var(--neutral-400);
  cursor: not-allowed;
}

/* 响应式调整 */
@media (max-width: 768px) {
  .scenarios-grid {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="src/pages/decision/Portfolio.css">
/* 导入基础页面样式 */
@import '../css-base.css';

/* 继承基础页面样式 */
.portfolio-page {
  composes: base-page;
}

/* 页面头部继承基础样式 */
.portfolio-page .page-header {
  composes: base-page-header;
}

.portfolio-page .page-title {
  composes: base-page-title;
}

.portfolio-page .page-description {
  composes: base-page-description;
}

/* 资产配置概览 */
.portfolio-overview {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--spacing-lg);
  margin-bottom: var(--section-margin-bottom);
}

/* 继承基础部分标题 */
.section-title {
  composes: base-section-title;
}

/* 图表和摘要 */
.portfolio-summary-card,
.portfolio-chart-card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
}

.card-title {
  font-size: var(--font-size-lg);
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
}

.chart-container {
  height: 300px;
  margin-bottom: var(--spacing-md);
}

/* 通用状态样式 */
.positive {
  color: var(--success-color);
}

.negative {
  color: var(--error-color);
}

/* 资产统计数据 */
.portfolio-stats {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-lg);
  margin-bottom: var(--spacing-md);
}

.stat-item {
  flex: 1 1 calc(50% - var(--spacing-lg));
  min-width: 140px;
  display: flex;
  flex-direction: column;
}

.stat-label {
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
  margin-bottom: var(--spacing-xs);
}

.stat-value {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
}

/* 风险等级样式 */
.risk-level {
  display: inline-block;
  padding: 4px 10px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-medium);
  text-align: center;
}

.risk-high {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--error-color);
}

.risk-medium {
  background-color: rgba(245, 158, 11, 0.1);
  color: var(--warning-color);
}

.risk-low {
  background-color: rgba(16, 185, 129, 0.1);
  color: var(--success-color);
}

.risk-verylow {
  background-color: rgba(59, 130, 246, 0.1);
  color: var(--info-color);
}

/* 投资组合详情卡片 */
.portfolio-details-card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  margin-bottom: var(--section-margin-bottom);
}

.portfolio-table {
  width: 100%;
  border-collapse: collapse;
  border-radius: var(--border-radius-md);
  overflow: hidden;
  margin-bottom: var(--spacing-md);
  font-family: var(--font-family-base);
}

.portfolio-table th,
.portfolio-table td {
  padding: var(--spacing-sm) var(--spacing-md);
  text-align: left;
  border-bottom: 1px solid var(--neutral-200);
}

.portfolio-table th {
  background-color: var(--neutral-100);
  font-weight: var(--font-weight-medium);
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.portfolio-table tr:last-child td {
  border-bottom: none;
}

.portfolio-table td {
  font-size: var(--font-size-sm);
  vertical-align: middle;
}

/* 分析卡片 */
.portfolio-analysis-card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
  margin-bottom: var(--section-margin-bottom);
}

.analysis-content {
  color: var(--text-secondary);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--spacing-lg);
  font-size: var(--font-size-md);
}

.analysis-points {
  padding-left: var(--spacing-xl);
  margin-bottom: var(--spacing-lg);
}

.analysis-points li {
  margin-bottom: var(--spacing-md);
  color: var (--text-secondary);
  line-height: var(--line-height-relaxed);
}

.analysis-highlight {
  color: var(--text-primary);
  font-weight: var(--font-weight-medium);
}

/* 按钮样式 */
.action-buttons {
  display: flex;
  gap: var(--spacing-md);
  margin-top: var(--spacing-lg);
}

.action-buttons .btn {
  min-width: 160px;
  padding: var(--spacing-sm) var(--spacing-lg);
  border-radius: var(--border-radius-md);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-md);
  text-align: center;
  text-decoration: none;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.action-buttons .btn.primary {
  background-color: var(--primary-color);
  color: white;
}

.action-buttons .btn.primary:hover {
  background-color: var(--primary-dark);
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.action-buttons .btn.secondary {
  background-color: var(--neutral-100);
  color: var(--text-primary);
  border: 1px solid var(--neutral-300);
}

.action-buttons .btn.secondary:hover {
  background-color: var(--neutral-200);
  transform: translateY(-2px);
}

/* 加载和错误状态 */
.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 300px;
  font-size: var(--font-size-lg);
  color: var(--text-tertiary);
}

.error {
  max-width: 800px;
  margin: 100px auto;
  padding: var(--spacing-lg);
  background-color: rgba(239, 68, 68, 0.1);
  border-left: 4px solid var(--error-color);
  color: var(--error-color);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-md);
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-lg)) {
  .portfolio-overview {
    grid-template-columns: 1fr;
  }
  
  .portfolio-analysis-card,
  .portfolio-details-card,
  .portfolio-chart-card,
  .portfolio-summary-card {
    padding: var(--card-padding-mobile);
  }
}

@media (max-width: var(--breakpoint-md)) {
  .portfolio-page {
    padding: var(--page-container-padding-y-mobile) var(--page-container-padding-x-mobile);
    padding-top: var(--page-top-spacing);
  }
  
  .portfolio-stats {
    flex-direction: column;
    gap: var(--spacing-md);
  }
  
  .stat-item {
    flex: 1 1 100%;
  }
  
  .portfolio-table {
    display: block;
    overflow-x: auto;
  }
  
  .action-buttons {
    flex-direction: column;
    gap: var(--spacing-sm);
  }
  
  .action-buttons .btn {
    width: 100%;
  }
}

@media (max-width: var(--breakpoint-sm)) {
  .stat-value {
    font-size: var(--font-size-lg);
  }
  
  .analysis-content {
    font-size: var(--font-size-sm);
  }
  
  .analysis-points {
    padding-left: var(--spacing-lg);
  }
}
</file>

<file path="src/pages/decision/PortfolioRebalance.css">
.portfolio-rebalance-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing-md) 0;
  padding-top: var(--page-top-spacing); /* 使用统一的顶部间距变量 */
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
  margin-bottom: var(--spacing-md);
}

.page-actions {
  margin-top: var(--spacing-md);
}

.back-link {
  color: var(--primary-color);
  display: inline-flex;
  align-items: center;
  text-decoration: none;
}

.back-link::before {
  content: '←';
  margin-right: var(--spacing-xs);
}

.back-link:hover {
  text-decoration: underline;
}

.rebalance-card {
  margin-bottom: var(--spacing-xl);
  padding: var(--spacing-lg);
}

.rebalance-help-card {
  padding: var(--spacing-lg);
}

.card-title {
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  font-size: var(--font-size-lg);
  color: var(--text-primary);
}

.help-text {
  line-height: 1.6;
  color: var(--text-secondary);
  margin-bottom: var(--spacing-md);
}

.help-subtitle {
  font-size: var(--font-size-md);
  margin-top: var(--spacing-lg);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.help-list {
  color: var(--text-secondary);
  line-height: 1.6;
  padding-left: var(--spacing-lg);
}

.help-list li {
  margin-bottom: var(--spacing-sm);
}

.learn-more-link {
  margin-top: var(--spacing-lg);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .page-title {
    font-size: var(--font-size-2xl);
  }
}
</file>

<file path="src/pages/information/NewsAnalysis.css">
/* 导入基础页面样式 */
@import '../css-base.css';

.news-list-page {
  max-width: 1200px;
  margin: 0 auto;
  padding-top: calc(var(--page-top-spacing) + var(--spacing-lg)); /* 增加顶部间距 */
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
}

.news-container {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
}

.news-card {
  background-color: white;
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--spacing-lg);
  transition: var(--transition-default);
}

.news-card:hover {
  box-shadow: var(--shadow-md);
}

.news-header {
  margin-bottom: var(--spacing-md);
}

.news-title {
  font-size: var(--font-size-xl);
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
}

.news-meta {
  display: flex;
  align-items: center;
  color: var(--text-tertiary);
  font-size: var(--font-size-sm);
}

.news-source {
  margin-right: var(--spacing-md);
  font-weight: var(--font-weight-medium);
}

.news-summary {
  color: var(--text-secondary);
  margin-bottom: var(--spacing-md);
  line-height: var(--line-height-relaxed);
}

.news-impact {
  background-color: rgba(16, 185, 129, 0.1);
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-md);
}

.impact-title {
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-sm);
  color: var(--secondary-color);
}

.impact-content {
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-relaxed);
  margin: 0;
}

.relevant-funds {
  margin-top: var(--spacing-md);
}

.funds-title {
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.funds-list {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-sm);
}

.fund-tag {
  background-color: var(--neutral-100);
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-xs);
  color: var(--text-secondary);
}

.pagination-placeholder {
  margin-top: var(--spacing-xl);
  padding: var(--spacing-lg);
  background-color: var(--neutral-100);
  border-radius: var(--border-radius-md);
  text-align: center;
  color: var(--text-tertiary);
}

/* 继承基础页面样式 */
.news-analysis-page {
  composes: base-page;
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--spacing-md) 0;
  padding-top: calc(var(--page-top-spacing) + var(--spacing-lg)); /* 增加顶部间距 */
}

/* 深色模式调整 - 统一使用变量 */
.dark-theme .news-card {
  background-color: var(--card-background);
  border-color: var(--neutral-300);
}

/* 文本颜色统一调整 */
.dark-theme .news-title,
.dark-theme .impact-title,
.dark-theme .funds-title,
.dark-theme .page-title {
  color: var(--text-heading);
}

.dark-theme .news-summary,
.dark-theme .page-description,
.dark-theme .news-meta {
  color: var(--text-secondary);
}

.dark-theme .news-impact {
  background-color: var(--neutral-300);
}

/* 解决重复声明的深色模式样式 */
.dark-theme .news-meta,
.dark-theme .news-source,
.dark-theme .news-date {
  color: var(--text-meta);
}

.dark-theme .impact-content {
  color: var(--text-description);
}

.dark-theme .fund-tag {
  background-color: var(--neutral-300);
  color: var(--text-hint);
}

@media (max-width: 768px) {
  .news-meta {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .news-source {
    margin-bottom: var(--spacing-xs);
  }
}
</file>

<file path="src/pages/information/PolicyAnalysis.css">
.policy-list-page,
.policy-detail-page {
  max-width: 1200px;
  margin: 0 auto;
  padding-top: calc(var(--page-top-spacing) + var(--spacing-lg)); /* 增加顶部间距 */
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: 1.6;
}

/* 政策列表样式 */
.policies-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: var(--spacing-lg);
}

.policy-card {
  background-color: white;
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--spacing-lg);
  margin-bottom: var(--spacing-lg);
}

.policy-card.preview {
  cursor: pointer;
  transition: var(--transition-default);
  display: flex;
  flex-direction: column;
  height: 100%;
}

.policy-card.preview:hover {
  box-shadow: var(--shadow-md);
  transform: translateY(-3px);
}

.policy-header {
  margin-bottom: var(--spacing-md);
}

.policy-title {
  font-size: var(--font-size-lg);
  margin-bottom: var(--spacing-xs);
  color: var(--text-primary);
}

.policy-meta {
  display: flex;
  align-items: center;
  color: var(--text-tertiary);
  font-size: var(--font-size-sm);
}

.policy-issuer {
  margin-right: var(--spacing-md);
}

.policy-summary {
  color: var(--text-secondary);
  margin-bottom: var(--spacing-md);
  line-height: 1.6;
  /* 文本截断 */
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.policy-impact-preview {
  margin-bottom: var(--spacing-md);
}

.impact-preview-title {
  font-size: var(--font-size-sm);
  margin-bottom: var(--spacing-sm);
  color: var(--text-secondary);
}

.impact-tags {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-sm);
}

.impact-tag {
  display: inline-block;
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  font-size: var(--font-size-xs);
  color: white;
}

.impact-tag.positive {
  background-color: var(--success-color);
}

.impact-tag.negative {
  background-color: var(--error-color);
}

.impact-tag.neutral {
  background-color: var(--neutral-500);
}

.impact-tag.more {
  background-color: var(--neutral-400);
}

.policy-card-footer {
  margin-top: auto;
  padding-top: var(--spacing-md);
}

.view-detail-button {
  background-color: transparent;
  color: var(--primary-color);
  border: none;
  padding: var(--spacing-xs) 0;
  cursor: pointer;
  font-size: var(--font-size-sm);
  text-align: left;
}

.view-detail-button:hover {
  text-decoration: underline;
}

/* 政策详情页样式 */
.back-button {
  background-color: transparent;
  color: var(--primary-color);
  border: none;
  padding: var(--spacing-xs) 0;
  margin-bottom: var(--spacing-sm);
  cursor: pointer;
  font-size: var(--font-size-sm);
  display: flex;
  align-items: center;
}

.back-button:hover {
  text-decoration: underline;
}

.back-button::before {
  content: '←';
  margin-right: var(--spacing-xs);
}

.section-title {
  font-size: var(--font-size-xl);
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

.subsection-title {
  font-size: var(--font-size-lg);
  margin: var(--spacing-lg) 0 var(--spacing-sm);
  color: var(--text-primary);
}

.policy-analysis {
  color: var(--text-secondary);
  line-height: 1.6;
  margin-bottom: var(--spacing-lg);
}

.policy-analysis-page {
  max-width: var(--page-max-width);
  margin: 0 auto;
  padding: var(--spacing-md) 0;
  padding-top: calc(var(--page-top-spacing) + var(--spacing-lg)); /* 增加顶部间距 */
}

.sector-impacts {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: var(--spacing-md);
}

.impact-item {
  border-radius: var(--border-radius-md);
  padding: var(--spacing-md);
}

.impact-item.impact-positive {
  background-color: rgba(16, 185, 129, 0.1);
  border-left: 4px solid var(--success-color);
}

.impact-item.impact-negative {
  background-color: rgba(239, 68, 68, 0.1);
  border-left: 4px solid var(--error-color);
}

.impact-item.impact-neutral {
  background-color: rgba(107, 114, 128, 0.1);
  border-left: 4px solid var(--neutral-500);
}

.impact-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-sm);
}

.sector-name {
  font-size: var(--font-size-md);
  font-weight: 600;
  margin: 0;
}

.impact-effect {
  font-size: var(--font-size-xs);
  padding: 2px 8px;
  border-radius: var(--border-radius-full);
  color: white;
}

.impact-positive .impact-effect {
  background-color: var(--success-color);
}

.impact-negative .impact-effect {
  background-color: var(--error-color);
}

.impact-neutral .impact-effect {
  background-color: var(--neutral-500);
}

.impact-description {
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
  line-height: 1.5;
  margin: 0;
}

.related-funds {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-sm);
}

.fund-item {
  background-color: var(--neutral-100);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .policies-container {
    grid-template-columns: 1fr;
  }
  
  .sector-impacts {
    grid-template-columns: 1fr;
  }
}

/* 深色模式调整 */
.dark-theme .policy-card {
  background-color: var(--card-background);
  border-color: var(--neutral-300);
}

.dark-theme .page-title,
.dark-theme .section-title,
.dark-theme .policy-title,
.dark-theme .impact-header h4,
.dark-theme .sector-name {
  color: var(--text-heading);
}

.dark-theme .page-description,
.dark-theme .policy-summary,
.dark-theme .policy-meta {
  color: var(--text-secondary);
}

.dark-theme .policy-content {
  color: var(--text-primary);
}

.dark-theme .impact-item {
  background-color: var(--neutral-300);
}

/* 深色模式增强 */
.dark-theme .policy-summary {
  color: var(--text-description);
}

.dark-theme .policy-meta,
.dark-theme .policy-issuer,
.dark-theme .policy-date {
  color: var(--text-meta);
}

.dark-theme .impact-description {
  color: var(--text-description);
}

.dark-theme .fund-item {
  background-color: var(--neutral-300);
  color: var(--text-hint);
}
</file>

<file path="src/pages/user/User.css">
/* 用户资料页面样式 */
.user-profile-page,
.user-settings-page {
  max-width: var(--page-max-width);
  margin: 0 auto;
  padding: var(--spacing-md) 0;
  padding-top: var(--page-top-spacing);
}

.page-header {
  margin-bottom: var(--spacing-xl);
}

.page-title {
  font-size: var(--font-size-3xl);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.page-description {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  max-width: 800px;
  line-height: var(--line-height-relaxed);
}

/* 用户资料卡片样式 */
.profile-card {
  margin-bottom: var(--spacing-lg);
}

.profile-header {
  display: flex;
  align-items: center;
  margin-bottom: var(--spacing-xl);
}

.avatar-container {
  margin-right: var(--spacing-lg);
}

.user-avatar,
.avatar-placeholder {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  object-fit: cover;
}

.avatar-placeholder {
  background-color: var(--primary-color);
  color: white;
  font-size: var(--font-size-2xl);
  display: flex;
  align-items: center;
  justify-content: center;
}

.user-info {
  flex: 1;
}

.username {
  font-size: var(--font-size-2xl);
  margin: 0 0 var(--spacing-xs);
  color: var(--text-primary);
}

.user-subtitle {
  color: var(--text-secondary);
  margin: 0 0 var(--spacing-xs);
}

.user-join-date {
  color: var(--text-tertiary);
  font-size: var(--font-size-sm);
  margin: 0;
}

.profile-details {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--spacing-xl);
  margin-bottom: var(--spacing-xl);
}

.profile-section {
  margin-bottom: var(--spacing-lg);
}

.section-title {
  font-size: var(--font-size-lg);
  margin: 0 0 var(--spacing-md);
  color: var(--text-primary);
}

.detail-item {
  display: flex;
  margin-bottom: var(--spacing-sm);
}

.detail-label {
  width: 120px;
  color: var(--text-tertiary);
  font-size: var(--font-size-sm);
}

.detail-value {
  flex: 1;
  color: var(--text-primary);
}

.profile-actions {
  display: flex;
  gap: var(--spacing-md);
}

.action-button {
  padding: var(--spacing-sm) var(--spacing-lg);
  border-radius: var(--border-radius-md);
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-default);
}

.action-button.primary {
  background-color: var(--primary-color);
  color: white;
  border: none;
}

.action-button.primary:hover {
  background-color: var(--primary-dark);
}

.action-button.secondary {
  background-color: transparent;
  color: var(--primary-color);
  border: 1px solid var(--primary-color);
}

.action-button.secondary:hover {
  background-color: rgba(37, 99, 235, 0.05);
}

/* 设置页面样式 */
.settings-card {
  margin-bottom: var(--spacing-lg);
}

.card-title {
  font-size: var(--font-size-lg);
  margin: 0 0 var(--spacing-lg);
  color: var(--text-primary);
}

.settings-section {
  margin-bottom: var(--spacing-md);
}

.setting-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-sm) 0;
  border-bottom: 1px solid var(--neutral-200);
}

.setting-item:last-child {
  border-bottom: none;
}

.setting-info {
  flex: 1;
}

.setting-name {
  display: block;
  color: var(--text-primary);
}

.setting-description {
  display: block;
  font-size: var(--font-size-sm);
  color: var(--text-tertiary);
  margin-top: var(--spacing-xs);
}

.setting-control {
  margin-left: var(--spacing-lg);
}

/* 主题按钮 */
.theme-button {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid var(--neutral-300);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
  cursor: pointer;
  margin-right: var(--spacing-sm);
}

.theme-button.active {
  background-color: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

/* 切换开关 */
.toggle-switch {
  position: relative;
  display: inline-block;
  width: 50px;
  height: 24px;
}

.toggle-switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.toggle-slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--neutral-300);
  transition: var(--transition-default);
  border-radius: 24px;
}

.toggle-slider:before {
  position: absolute;
  content: "";
  height: 18px;
  width: 18px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  transition: var(--transition-default);
  border-radius: 50%;
}

input:checked + .toggle-slider {
  background-color: var(--primary-color);
}

input:checked + .toggle-slider:before {
  transform: translateX(26px);
}

.settings-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: var(--spacing-xl);
}

.save-button {
  padding: var(--spacing-sm) var(--spacing-xl);
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: var(--border-radius-md);
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-default);
}

.save-button:hover {
  background-color: var(--primary-dark);
}

/* 深色模式调整 */
.dark-theme .setting-item {
  border-bottom-color: var(--neutral-300);
}

.dark-theme .page-title {
  color: var(--text-heading);
}

.dark-theme .page-description {
  color: var(--text-description);
}

.dark-theme .setting-name {
  color: var(--text-heading);
}

.dark-theme .setting-description {
  color: var(--text-tertiary);
}

.dark-theme .theme-button {
  background-color: var(--neutral-200);
  border-color: var(--neutral-300);
  color: var(--text-primary);
}

.dark-theme .toggle-slider {
  background-color: var(--neutral-400);
}

/* 用户资料深色模式增强 */
.dark-theme .username,
.dark-theme .section-title,
.dark-theme .card-title {
  color: var(--text-heading);
}

.dark-theme .user-subtitle {
  color: var(--text-description);
}

.dark-theme .user-join-date {
  color: var(--text-meta);
}

.dark-theme .detail-label {
  color: var(--text-meta);
}

.dark-theme .detail-value {
  color: var(--text-primary);
}

.dark-theme .avatar-placeholder {
  background-color: var(--primary-dark);
  color: var(--text-light);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .profile-details {
    grid-template-columns: 1fr;
  }
  
  .profile-header {
    flex-direction: column;
    text-align: center;
  }
  
  .avatar-container {
    margin-right: 0;
    margin-bottom: var(--spacing-md);
  }
  
  .profile-actions {
    flex-direction: column;
  }
  
  .action-button {
    width: 100%;
  }
}
</file>

<file path="src/pages/user/UserProfile.jsx">
import React, { useState, useContext, useEffect } from 'react';
import { AuthContext } from '../../contexts/AuthContext';
import Card from '../../components/common/Card';
import './User.css';

const UserProfile = () => {
  const { user } = useContext(AuthContext);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const loadUserProfile = async () => {
      try {
        setLoading(true);
        // 模拟 API 调用获取用户资料
        setTimeout(() => {
          setProfile({
            username: user?.username || '默认用户',
            email: user?.email || 'user@example.com',
            avatar: null,
            joinDate: '2023-01-15',
            lastLogin: new Date().toISOString(),
            phone: '138****1234',
            nickname: '投资达人',
            riskPreference: '中等风险',
            investmentGoal: '长期稳健增长',
            experienceLevel: '中级'
          });
          setLoading(false);
        }, 800);
      } catch (error) {
        console.error('加载用户资料失败:', error);
        setLoading(false);
      }
    };
    
    loadUserProfile();
  }, [user]);
  
  if (loading) {
    return <div className="loading">加载用户资料中...</div>;
  }
  
  return (
    <div className="user-profile-page">
      <div className="page-header">
        <h1 className="page-title text-heading">个人资料</h1>
        <p className="page-description text-description">
          查看和管理您的个人资料信息
        </p>
      </div>
      
      <div className="profile-content">
        <Card className="profile-card">
          <div className="profile-header">
            <div className="avatar-container">
              {profile?.avatar ? (
                <img src={profile.avatar} alt="用户头像" className="user-avatar" />
              ) : (
                <div className="avatar-placeholder">
                  {profile?.username?.charAt(0).toUpperCase() || 'U'}
                </div>
              )}
            </div>
            <div className="user-info">
              <h2 className="username text-heading">{profile?.username}</h2>
              <p className="user-subtitle text-description">{profile?.nickname}</p>
              <p className="user-join-date text-meta">注册时间: {new Date(profile?.joinDate).toLocaleDateString('zh-CN')}</p>
            </div>
          </div>
          
          <div className="profile-details">
            <div className="profile-section">
              <h3 className="section-title text-heading">基本信息</h3>
              <div className="detail-item">
                <span className="detail-label text-meta">用户名</span>
                <span className="detail-value text-primary">{profile?.username}</span>
              </div>
              <div className="detail-item">
                <span className="detail-label text-meta">昵称</span>
                <span className="detail-value text-primary">{profile?.nickname}</span>
              </div>
              <div className="detail-item">
                <span className="detail-label text-meta">电子邮箱</span>
                <span className="detail-value text-primary">{profile?.email}</span>
              </div>
              <div className="detail-item">
                <span className="detail-label text-meta">手机号码</span>
                <span className="detail-value text-primary">{profile?.phone}</span>
              </div>
              <div className="detail-item">
                <span className="detail-label text-meta">上次登录</span>
                <span className="detail-value text-primary">{new Date(profile?.lastLogin).toLocaleString('zh-CN')}</span>
              </div>
            </div>
            
            <div className="profile-section">
              <h3 className="section-title text-heading">投资偏好</h3>
              <div className="detail-item">
                <span className="detail-label text-meta">风险承受能力</span>
                <span className="detail-value text-primary">{profile?.riskPreference}</span>
              </div>
              <div className="detail-item">
                <span className="detail-label text-meta">投资目标</span>
                <span className="detail-value text-primary">{profile?.investmentGoal}</span>
              </div>
              <div className="detail-item">
                <span className="detail-label text-meta">投资经验</span>
                <span className="detail-value text-primary">{profile?.experienceLevel}</span>
              </div>
            </div>
          </div>
          
          <div className="profile-actions">
            <button className="action-button primary">编辑资料</button>
            <button className="action-button secondary">修改密码</button>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default UserProfile;
</file>

<file path="src/pages/user/UserSettings.jsx">
import React, { useState, useContext } from 'react';
import { ThemeContext } from '../../contexts/ThemeContext';
import Card from '../../components/common/Card';
import './User.css';

const UserSettings = () => {
  const { theme, toggleTheme } = useContext(ThemeContext);
  const [notificationSettings, setNotificationSettings] = useState({
    emailAlerts: true,
    pushNotifications: true,
    marketUpdates: false,
    weeklyReport: true,
    behaviorAlerts: true
  });
  
  const [privacySettings, setPrivacySettings] = useState({
    shareData: false,
    showPortfolio: false,
    anonymousActivity: true
  });
  
  const handleNotificationChange = (setting) => {
    setNotificationSettings({
      ...notificationSettings,
      [setting]: !notificationSettings[setting]
    });
  };
  
  const handlePrivacyChange = (setting) => {
    setPrivacySettings({
      ...privacySettings,
      [setting]: !privacySettings[setting]
    });
  };
  
  const handleSaveSettings = () => {
    // 模拟保存设置
    alert('设置已保存');
  };
  
  return (
    <div className="user-settings-page">
      <div className="page-header">
        <h1 className="page-title text-heading">账户设置</h1>
        <p className="page-description text-description">
          管理您的应用偏好、通知设置和隐私选项
        </p>
      </div>
      
      <div className="settings-content">
        <Card className="settings-card">
          <h2 className="card-title text-heading">外观设置</h2>
          <div className="settings-section">
            <div className="setting-item">
              <div className="setting-info">
                <span className="setting-name text-primary">主题</span>
                <span className="setting-description text-meta">选择应用的显示主题</span>
              </div>
              <div className="setting-control">
                <button 
                  className={`theme-button ${theme === 'light' ? 'active' : ''}`}
                  onClick={() => theme === 'dark' && toggleTheme()}
                >
                  浅色
                </button>
                <button 
                  className={`theme-button ${theme === 'dark' ? 'active' : ''}`}
                  onClick={() => theme === 'light' && toggleTheme()}
                >
                  深色
                </button>
              </div>
            </div>
          </div>
        </Card>
        
        <Card className="settings-card">
          <h2 className="card-title">通知设置</h2>
          <div className="settings-section">
            {Object.keys(notificationSettings).map(setting => (
              <div className="setting-item" key={setting}>
                <div className="setting-info">
                  <span className="setting-name">
                    {setting === 'emailAlerts' && '电子邮件提醒'}
                    {setting === 'pushNotifications' && '应用内推送通知'}
                    {setting === 'marketUpdates' && '市场更新提醒'}
                    {setting === 'weeklyReport' && '每周投资报告'}
                    {setting === 'behaviorAlerts' && '行为偏差提醒'}
                  </span>
                </div>
                <div className="setting-control">
                  <label className="toggle-switch">
                    <input 
                      type="checkbox" 
                      checked={notificationSettings[setting]} 
                      onChange={() => handleNotificationChange(setting)}
                    />
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
            ))}
          </div>
        </Card>
        
        <Card className="settings-card">
          <h2 className="card-title">隐私设置</h2>
          <div className="settings-section">
            {Object.keys(privacySettings).map(setting => (
              <div className="setting-item" key={setting}>
                <div className="setting-info">
                  <span className="setting-name">
                    {setting === 'shareData' && '分享匿名使用数据以改进服务'}
                    {setting === 'showPortfolio' && '在公共排行榜中显示我的投资组合'}
                    {setting === 'anonymousActivity' && '匿名活动统计'}
                  </span>
                </div>
                <div className="setting-control">
                  <label className="toggle-switch">
                    <input 
                      type="checkbox" 
                      checked={privacySettings[setting]} 
                      onChange={() => handlePrivacyChange(setting)}
                    />
                    <span className="toggle-slider"></span>
                  </label>
                </div>
              </div>
            ))}
          </div>
        </Card>
        
        <div className="settings-actions">
          <button className="save-button" onClick={handleSaveSettings}>
            保存设置
          </button>
        </div>
      </div>
    </div>
  );
};

export default UserSettings;
</file>

<file path="src/pages/Dashboard.css">
/* 导入基础页面样式和可组合类 */
@import './css-base.css';

/* 布局与容器 */
.dashboard-page {
  max-width: var(--page-container-width);
  margin: 0 auto;
  padding: var(--page-container-padding-y) var(--page-container-padding-x);
  padding-top: var(--page-top-spacing);
}

/* 欢迎区域 */
.welcome-section {
  margin-bottom: var(--section-margin-bottom);
  text-align: center;
}

.welcome-section h1 {
  font-size: var(--font-size-3xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-heading);
  margin-bottom: var(--spacing-md);
}

.welcome-description {
  max-width: 800px;
  margin: 0 auto;
  color: var(--text-secondary);
  font-size: var(--font-size-lg);
  line-height: var(--line-height-relaxed);
}

/* 仪表盘网格布局 */
.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: var(--spacing-lg);
  margin-bottom: var(--section-margin-bottom);
  /* 确保内容有适当的角色标记 */
  role: "main";
  aria-label: "仪表盘主要内容";
}

.dashboard-main {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
}

.dashboard-sidebar {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
}

/* 卡片标准化样式 */
.dashboard-card {
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--card-padding);
}

.card-title {
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  font-size: var(--font-size-lg);
  color: var(--text-primary);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--card-title-margin-bottom);
}

.card-header h2 {
  margin: 0;
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-heading);
}

.view-all-link {
  color: var(--text-link);
  font-size: var(--font-size-sm);
  text-decoration: none;
}

.view-all-link:hover {
  color: var(--text-link-hover);
  text-decoration: underline;
}

.sub-section-title {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  margin-top: var(--spacing-md);
  margin-bottom: var(--spacing-sm);
  color: var(--text-secondary);
}

/* 投资组合概览 */
.portfolio-stats {
  display: flex;
  gap: var(--spacing-lg);
  margin-bottom: var(--component-margin-bottom);
}

.stat-item h3 {
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
  margin: 0 0 var(--spacing-xs);
}

.stat-value {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  margin: 0;
}

.positive {
  color: var(--success-color);
}

.negative {
  color: var(--error-color);
}

.change-amount {
  font-size: var(--font-size-sm);
  opacity: 0.8;
  margin-left: var(--spacing-sm);
}

.portfolio-placeholder {
  height: 200px;
  background-color: var(--neutral-100);
  border-radius: var(--border-radius-md);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--text-tertiary);
  margin-bottom: var(--spacing-md);
}

.portfolio-chart-container {
  height: 200px;
  margin-bottom: var(--spacing-md);
  position: relative;
}

/* 资产概览卡片 */
.portfolio-overview-card {
  grid-column: 1;
  grid-row: 1 / span 2;
}

.portfolio-stats-summary {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-md);
}

.portfolio-stat {
  flex: 1;
  min-width: 120px;
  display: flex;
  flex-direction: column;
}

.stat-label {
  font-size: var(--font-size-sm);
  color: var (--text-tertiary);
  margin-bottom: var(--spacing-xs);
}

.stat-value {
  font-size: var(--font-size-xl);
  font-weight: 600;
  color: var(--text-primary);
}

.stat-value.positive {
  color: var(--success-color);
}

.stat-value.negative {
  color: var(--error-color);
}

.asset-allocation-chart {
  margin: var(--spacing-md) 0;
}

.empty-chart {
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--neutral-50);
  color: var(--text-tertiary);
  border-radius: var(--border-radius-md);
}

.quick-actions {
  display: flex;
  gap: var(--spacing-md);
  margin-top: var(--spacing-md);
}

.quick-action-button {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  background-color: var(--neutral-100);
  color: var(--text-primary);
  text-align: center;
  border-radius: var(--border-radius-md);
  text-decoration: none;
  transition: var(--transition-default);
}

.quick-action-button:hover {
  background-color: var(--neutral-200);
  text-decoration: none;
}

/* 行为提醒卡片 */
.behavior-alerts-card {
  grid-column: 2;
  grid-row: 1;
}

.alerts-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.alert-item {
  padding: var(--spacing-sm);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
  border-left: 4px solid var(--error-color);
}

.alert-header {
  display: flex;
  align-items: center;
  margin-bottom: var(--spacing-sm);
}

.alert-priority {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  margin-right: var(--spacing-sm);
}

.alert-priority.high {
  background-color: var(--error-color);
}

.alert-priority.medium {
  background-color: var(--warning-color);
}

.alert-priority.low {
  background-color: var(--success-color);
}

.alert-title {
  font-weight: var(--font-weight-medium);
  color: var(--text-primary);
}

.alert-description {
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
  margin-bottom: var(--spacing-sm);
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.alert-action {
  display: inline-block;
  font-size: var(--font-size-sm);
  color: var (--text-link);
  text-decoration: none;
}

.alert-action:hover {
  color: var(--text-link-hover);
  text-decoration: underline;
}

.empty-alerts {
  padding: var(--spacing-md);
  text-align: center;
  color: var(--text-tertiary);
}

.check-profile-link {
  display: inline-block;
  margin-top: var(--spacing-sm);
  color: var(--text-link);
  text-decoration: none;
}

.check-profile-link:hover {
  color: var(--text-link-hover);
  text-decoration: underline;
}

/* 新闻与政策卡片 */
.news-policy-card {
  grid-column: 2;
  grid-row: 2;
}

.tab-links {
  display: flex;
  gap: var(--spacing-sm);
}

.tab-link {
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--border-radius-md);
  color: var(--text-primary);
  text-decoration: none;
  transition: var(--transition-default);
}

.tab-link:hover {
  background-color: var(--neutral-100);
}

.info-content {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.news-list,
.policy-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.news-item,
.policy-item {
  display: flex;
  align-items: center;
  padding: var(--spacing-xs) 0;
  border-bottom: 1px solid var(--neutral-100);
}

.news-date,
.policy-issuer {
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
  min-width: 80px;
  margin-right: var(--spacing-sm);
}

.news-title,
.policy-title {
  font-size: var(--font-size-sm);
  color: var(--text-primary);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.empty-news,
.empty-policies {
  padding: var(--spacing-md);
  text-align: center;
  color: var(--text-tertiary);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
}

/* AI洞察 */
.insights-list {
  list-style: none;
  padding: 0;
  margin: 0 0 var(--spacing-md);
}

.insight-item {
  display: flex;
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  margin-bottom: var(--spacing-sm);
}

.insight-item.suggestion {
  background-color: rgba(16, 185, 129, 0.1);
}

.insight-item.warning {
  background-color: rgba(245, 158, 11, 0.1);
}

.insight-item.info {
  background-color: rgba(59, 130, 246, 0.1);
}

.insight-icon {
  margin-right: var(--spacing-md);
  font-size: var(--font-size-xl);
}

.insight-content {
  flex: 1;
}

.insight-content p {
  margin: 0 0 var(--spacing-xs);
}

.insight-action {
  font-size: var(--font-size-sm);
  color: var (--primary-color);
}

/* AI助手卡片 */
.ai-assistant-card {
  grid-column: 1 / span 2;
  grid-row: 3;
  text-align: center;
  padding: var(--spacing-xl);
}

.ai-assistant-card h2 {
  font-size: var(--font-size-xl);
  color: var(--text-heading);
  margin-bottom: var(--spacing-md);
}

.ai-description {
  max-width: 600px;
  margin: var(--spacing-md) auto;
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  line-height: var(--line-height-relaxed);
}

.suggested-questions {
  margin: var(--spacing-md) 0;
}

.question-bubbles {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: var(--spacing-sm);
  margin: var(--spacing-md) 0;
}

.question-bubble {
  background-color: var(--neutral-100);
  padding: var(--spacing-xs) var(--spacing-md);
  border-radius: var(--border-radius-full);
  color: var(--text-primary);
  text-decoration: none;
  transition: var(--transition-default);
}

.question-bubble:hover {
  background-color: var(--neutral-200);
  text-decoration: none;
}

.start-chat-button {
  display: inline-block;
  padding: var(--spacing-sm) var(--spacing-lg);
  background-color: var(--primary-color);
  color: white;
  border-radius: var(--border-radius-md);
  text-decoration: none;
  transition: var(--transition-default);
  font-weight: var(--font-weight-medium);
}

.start-chat-button:hover {
  background-color: var(--primary-dark);
  text-decoration: none;
}

/* 学习进度 */
.progress-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.progress-circle {
  width: 120px;
  height: 120px;
  margin-bottom: var(--spacing-md);
}

.progress-circle svg {
  width: 100%;
  height: 100%;
}

.progress-bg {
  fill: none;
  stroke: var(--neutral-200);
  stroke-width: 3;
}

.progress-fill {
  fill: none;
  stroke: var(--primary-color);
  stroke-width: 3;
  stroke-linecap: round;
  transform: rotate(90deg);
  transform-origin: center;
  transition: stroke-dasharray 0.5s;
}

.progress-text {
  font-size: 8px;
  text-anchor: middle;
  fill: var(--text-primary);
  font-weight: bold;
}

.progress-container p {
  text-align: center;
  color: var(--text-secondary);
}

/* 快速入口 */
.actions-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--spacing-md);
}

.action-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-md);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
  text-decoration: none;
  color: var(--text-primary);
  transition: var(--transition-default);
}

.action-button:hover {
  background-color: var(--neutral-100);
  text-decoration: none;
}

.action-icon {
  font-size: var(--font-size-2xl);
  margin-bottom: var(--spacing-sm);
}

/* 快速访问部分 */
.quick-access-section {
  margin-bottom: var(--section-margin-bottom);
}

.section-title {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  margin-bottom: var(--spacing-lg);
  color: var(--text-heading);
}

.quick-access-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: var(--spacing-md);
}

.quick-access-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: var(--card-padding);
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  text-decoration: none;
  color: var(--text-primary);
  transition: transform 0.2s, box-shadow 0.2s;
  text-align: center;
}

.quick-access-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-md);
  text-decoration: none;
}

.quick-access-icon {
  font-size: var(--font-size-2xl);
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  margin-bottom: var(--spacing-md);
}

.simulation-icon {
  background-color: rgba(245, 158, 11, 0.1);
}

.profile-icon {
  background-color: rgba(59, 130, 246, 0.1);
}

.rebalance-icon {
  background-color: rgba(16, 185, 129, 0.1);
}

.policy-icon {
  background-color: rgba(139, 92, 246, 0.1);
}

.quick-access-card h3 {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  margin-bottom: var(--spacing-sm);
  color: var(--text-primary);
}

.quick-access-card p {
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
  margin: 0;
}

/* 模块卡片 */
.module-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: var(--spacing-lg);
}

.module-card {
  background-color: white;
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--spacing-lg);
  text-decoration: none;
  color: var(--text-primary);
  transition: var(--transition-default);
  border-top: 4px solid var(--primary-color);
}

.module-card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-md);
  text-decoration: none;
}

.module-icon {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  background-color: var(--primary-color);
  color: white;
  border-radius: var(--border-radius-full);
  margin-bottom: var(--spacing-md);
  font-size: var(--font-size-xl);
}

.module-title {
  margin: 0 0 var(--spacing-sm);
}

.module-description {
  margin: 0;
  color: var(--text-secondary);
  font-size: var(--font-size-sm);
}

/* 加载指示器 */
.loading-indicator {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100px;
  color: var(--text-tertiary);
  padding: var(--spacing-md);
}

.loading-indicator::before {
  content: "";
  width: 24px;
  height: 24px;
  border: 2px solid var(--neutral-300);
  border-top: 2px solid var(--primary-color);
  border-radius: 50%;
  margin-right: var(--spacing-sm);
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* 按钮 */
.card-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: var(--spacing-md);
}

.btn {
  display: inline-block;
  padding: var(--spacing-sm) var(--spacing-lg);
  border: none;
  border-radius: var(--border-radius-md);
  font-weight: 500;
  cursor: pointer;
  text-decoration: none;
  transition: var(--transition-default);
}

.btn.primary {
  background-color: var(--primary-color);
  color: white;
}

.btn.primary:hover {
  background-color: var(--primary-dark);
  text-decoration: none;
}

.btn.secondary {
  background-color: var(--neutral-100);
  color: var(--text-primary);
}

.btn.secondary:hover {
  background-color: var(--neutral-200);
  text-decoration: none;
}

.button {
  display: inline-block;
  padding: var(--spacing-sm) var(--spacing-lg);
  border-radius: var(--border-radius-md);
  text-decoration: none;
  font-weight: 500;
  transition: var(--transition-default);
}

.button.primary {
  background-color: var(--primary-color);
  color: white;
}

.button.primary:hover {
  background-color: var(--primary-dark);
  text-decoration: none;
}

.button.secondary {
  background-color: var(--neutral-100);
  color: var (--text-primary);
  border: 1px solid var(--neutral-300);
}

.button.secondary:hover {
  background-color: var(--neutral-200);
  text-decoration: none;
}

/* 空状态 */
.empty-state {
  padding: var(--spacing-md);
  text-align: center;
  color: var(--text-tertiary);
  background-color: var(--neutral-50);
  border-radius: var(--border-radius-md);
}

/* 确保交互元素有明确的焦点状态 */
.quick-access-card:focus,
.question-bubble:focus,
.start-chat-button:focus,
.quick-action-button:focus,
.tab-link:focus,
.alert-action:focus,
.check-profile-link:focus,
.view-all-link:focus {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

/* 响应式 */
@media (max-width: 992px) {
  .dashboard-grid {
    grid-template-columns: 1fr;
  }
  
  .module-grid {
    grid-template-columns: repeat(2, 1fr);
  }

  .portfolio-overview-card,
  .behavior-alerts-card,
  .news-policy-card,
  .ai-assistant-card {
    grid-column: 1;
    grid-row: auto;
  }
}

@media (max-width: 768px) {
  .welcome-section h1 {
    font-size: var(--font-size-2xl);
  }
  
  .welcome-description {
    font-size: var(--font-size-md);
  }
  
  .quick-access-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 576px) {
  .portfolio-stats {
    flex-direction: column;
    gap: var(--spacing-md);
  }
  
  .module-grid {
    grid-template-columns: 1fr;
  }

  .portfolio-stats-summary,
  .quick-actions {
    flex-direction: column;
  }
  
  .quick-access-grid {
    grid-template-columns: 1fr;
  }

  /* 优化移动视图下的卡片内部间距 */
  .dashboard-card {
    padding: var(--card-padding-mobile);
  }
  
  /* 优化问题气泡在移动设备上的显示 */
  .question-bubbles {
    flex-direction: column;
    align-items: stretch;
    width: 100%;
  }
  
  .question-bubble {
    text-align: center;
    padding: var(--spacing-sm) var(--spacing-md);
  }
  
  /* 使快速访问卡片在小屏幕上更易于点击 */
  .quick-access-icon {
    width: 48px;
    height: 48px;
    font-size: var(--font-size-xl);
  }
  
  /* 优化AI助手卡片内边距 */
  .ai-assistant-card {
    padding: var(--spacing-md);
  }
}

/* 深色模式调整 */
.dark-theme .dashboard-card,
.dark-theme .quick-access-card {
  background-color: var(--card-background);
  border-color: var(--border-color);
}

.dark-theme .stat-value {
  color: var(--text-bold);
}

.dark-theme .stat-label {
  color: var(--text-meta);
}

.dark-theme .alert-item,
.dark-theme .news-item,
.dark-theme .policy-item {
  border-bottom-color: var(--neutral-300);
}

.dark-theme .question-bubble {
  background-color: var(--neutral-200);
  color: var(--text-secondary);
}

.dark-theme .question-bubble:hover {
  background-color: var(--neutral-300);
  color: var(--text-primary);
}

.dark-theme .view-all-link,
.dark-theme .alert-action,
.dark-theme .check-profile-link {
  color: var(--text-link);
}

.dark-theme .view-all-link:hover,
.dark-theme .alert-action:hover,
.dark-theme .check-profile-link:hover {
  color: var(--text-link-hover);
}

.dark-theme .empty-state,
.dark-theme .empty-chart,
.dark-theme .empty-alerts {
  background-color: var(--neutral-100);
  color: var(--text-tertiary);
}

.dark-theme .news-item,
.dark-theme .policy-item {
  border-bottom-color: var(--neutral-700);
}

.dark-theme .question-bubble {
  background-color: var(--neutral-700);
  color: var(--text-secondary);
}

.dark-theme .question-bubble:hover {
  background-color: var(--neutral-600);
  color: var(--text-primary);
}

.dark-theme .view-all-link,
.dark-theme .alert-action,
.dark-theme .check-profile-link {
  color: var(--primary-light);
}

.dark-theme .view-all-link:hover,
.dark-theme .alert-action:hover,
.dark-theme .check-profile-link:hover {
  color: var(--primary-light);
}

/* 深色模式下的空状态容器 */
.dark-theme .empty-state,
.dark-theme .empty-chart,
.dark-theme .empty-alerts {
  background-color: var(--neutral-800);
  color: var(--text-tertiary);
}

/* 修复深色模式下的tab链接悬停效果 */
.dark-theme .tab-link:hover {
  background-color: var(--neutral-700);
}

/* 深色模式下的卡片和按钮 */
.dark-theme .module-card {
  background-color: var(--card-background);
  border-top-color: var(--primary-color);
}

.dark-theme .start-chat-button:hover {
  background-color: var(--primary-dark);
}

/* 修复资产配置图表在深色模式下的文本颜色 */
.dark-theme .progress-text {
  fill: var(--text-primary);
}

/* 添加响应式深色模式样式 */
@media (max-width: 992px) {
  .dark-theme .dashboard-grid {
    row-gap: var(--spacing-lg);
  }
}
</file>

<file path="src/pages/Register.jsx">
import React, { useState, useContext, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { AuthContext } from '../contexts/AuthContext';
import './Auth.css';

const Register = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [submitAttempted, setSubmitAttempted] = useState(false);
  
  const { register, authError, clearAuthError, user } = useContext(AuthContext);
  const navigate = useNavigate();
  
  // 如果用户已登录，直接重定向到首页
  useEffect(() => {
    if (user) {
      navigate('/');
    }
  }, [user, navigate]);
  
  // 监听认证错误
  useEffect(() => {
    if (authError) {
      setFormErrors({ submit: authError });
      setLoading(false);
    }
    
    return () => {
      // 组件卸载时清除错误
      clearAuthError();
    };
  }, [authError, clearAuthError]);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
    
    // 如果表单已经提交过，实时验证
    if (submitAttempted) {
      validateField(name, value);
    }
  };
  
  const validateField = (name, value) => {
    let errors = { ...formErrors };
    
    switch (name) {
      case 'username':
        if (!value.trim()) {
          errors.username = '请输入用户名';
        } else if (value.length < 3) {
          errors.username = '用户名至少需要3个字符';
        } else {
          delete errors.username;
        }
        break;
      case 'email':
        if (!value.trim()) {
          errors.email = '请输入电子邮件';
        } else if (!/\S+@\S+\.\S+/.test(value)) {
          errors.email = '请输入有效的电子邮件地址';
        } else {
          delete errors.email;
        }
        break;
      case 'password':
        if (!value.trim()) {
          errors.password = '请输入密码';
        } else if (value.length < 6) {
          errors.password = '密码至少需要6个字符';
        } else {
          delete errors.password;
        }
        // 验证确认密码
        if (formData.confirmPassword && value !== formData.confirmPassword) {
          errors.confirmPassword = '两次输入的密码不一致';
        } else if (formData.confirmPassword) {
          delete errors.confirmPassword;
        }
        break;
      case 'confirmPassword':
        if (!value.trim()) {
          errors.confirmPassword = '请确认密码';
        } else if (value !== formData.password) {
          errors.confirmPassword = '两次输入的密码不一致';
        } else {
          delete errors.confirmPassword;
        }
        break;
      default:
        break;
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };
  
  const validateForm = () => {
    const fields = ['username', 'email', 'password', 'confirmPassword'];
    let isValid = true;
    
    fields.forEach(field => {
      if (!validateField(field, formData[field])) {
        isValid = false;
      }
    });
    
    return isValid;
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitAttempted(true);
    
    // 验证表单
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    
    try {
      const result = await register(formData);
      
      if (result.success) {
        // 注册成功，导航到首页
        navigate('/');
      } else {
        // 注册失败，显示错误信息
        setFormErrors({ submit: result.message || '注册失败，请稍后再试' });
      }
    } catch (err) {
      setFormErrors({ submit: '注册过程中发生错误，请稍后再试' });
      console.error('注册错误:', err);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1 className="auth-title">FundGene</h1>
            <p className="auth-subtitle">基于AI的基金投资助手</p>
          </div>
          
          <form className="auth-form" onSubmit={handleSubmit}>
            <h2 className="form-title">注册</h2>
            
            {formErrors.submit && <div className="form-error">{formErrors.submit}</div>}
            
            <div className="form-group">
              <label htmlFor="username">用户名</label>
              <input
                type="text"
                id="username"
                name="username"
                value={formData.username}
                onChange={handleChange}
                disabled={loading}
                autoComplete="username"
                className={formErrors.username ? 'input-error' : ''}
              />
              {formErrors.username && <div className="field-error">{formErrors.username}</div>}
            </div>
            
            <div className="form-group">
              <label htmlFor="email">电子邮件</label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                disabled={loading}
                autoComplete="email"
                className={formErrors.email ? 'input-error' : ''}
              />
              {formErrors.email && <div className="field-error">{formErrors.email}</div>}
            </div>
            
            <div className="form-group">
              <label htmlFor="password">密码</label>
              <input
                type="password"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                disabled={loading}
                autoComplete="new-password"
                className={formErrors.password ? 'input-error' : ''}
              />
              {formErrors.password && <div className="field-error">{formErrors.password}</div>}
            </div>
            
            <div className="form-group">
              <label htmlFor="confirmPassword">确认密码</label>
              <input
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleChange}
                disabled={loading}
                autoComplete="new-password"
                className={formErrors.confirmPassword ? 'input-error' : ''}
              />
              {formErrors.confirmPassword && <div className="field-error">{formErrors.confirmPassword}</div>}
            </div>
            
            <div className="form-terms">
              <p>注册即表示您同意我们的 <Link to="/terms">服务条款</Link> 和 <Link to="/privacy">隐私政策</Link></p>
            </div>
            
            <button 
              type="submit" 
              className="auth-button"
              disabled={loading}
            >
              {loading ? '注册中...' : '注册'}
            </button>
            
            <div className="auth-links">
              <p>
                已有账号? <Link to="/login">立即登录</Link>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Register;
</file>

<file path="src/services/mockApi.js">
import { 
  mockPortfolioData, 
  mockComparisonData, 
  mockBehaviorData,
  mockBehaviorBiases,
  mockNewsData,
  mockPolicyData,
  mockScenarioData,
  mockChatData,
  mockChatResponses,
  mockRebalanceData,
  mockUserBehaviorData,
  mockPortfolioHistoryData
} from './mockData';

// 模拟延迟
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// 聊天记录
export async function fetchChatHistory() {
  await delay(800);
  return {
    success: true,
    data: mockChatData
  };
}

// 发送聊天消息
export async function sendChatMessage(message) {
  await delay(1500);
  
  // 模拟AI回复
  let responseContent = mockChatResponses.default;
  
  // 简易的关键词匹配
  const keywords = [
    { keywords: ['什么是基金', '基金是什么', '基金定义'], response: '什么是基金' },
    { keywords: ['基金类型', '种类', '分类', '有哪些基金'], response: '基金类型' },
    { keywords: ['如何选择', '选择基金', '挑选', '筛选', '怎么选'], response: '如何选择基金' },
    { keywords: ['定投', '定期投资'], response: '什么是定投' },
    { keywords: ['损失厌恶', '亏损', '止损'], response: '什么是损失厌恶' },
    { keywords: ['羊群效应', '跟风', '从众'], response: '什么是羊群效应' },
    { keywords: ['当前市场', '市场分析', '行情', '走势'], response: '当前市场分析' },
    { keywords: ['投资组合', '资产配置', '如何配置', '怎么配置'], response: '如何构建投资组合' }
  ];
  
  const lowerContent = message.content.toLowerCase();
  for (const item of keywords) {
    if (item.keywords.some(keyword => lowerContent.includes(keyword))) {
      responseContent = mockChatResponses[item.response];
      break;
    }
  }
  
  const response = {
    id: Date.now(),
    role: 'assistant',
    content: responseContent
  };
  
  return {
    success: true,
    data: response
  };
}

// 模拟投资组合数据
export async function fetchPortfolioData() {
  await delay(800);
  return {
    success: true,
    data: [
      { name: '股票型基金', value: 25000, percent: 47.5 },
      { name: '债券型基金', value: 15000, percent: 28.5 },
      { name: '混合型基金', value: 8000, percent: 15.2 },
      { name: '货币市场基金', value: 4680.75, percent: 8.8 }
    ]
  };
}

// 获取再平衡建议
export async function fetchRebalanceRecommendations() {
  await delay(1000);
  return {
    success: true,
    data: {
      rationale: '当前股票市场估值较高，建议适当降低股票型基金占比，增加债券型基金配置以降低组合波动性。同时，您的投资组合缺乏海外资产暴露，建议新增部分全球市场配置以提高分散化程度。',
      currentAllocation: [
        { category: '股票型基金', current: 47.5, target: 40, action: 'reduce', amount: 3950 },
        { category: '债券型基金', current: 28.5, target: 35, action: 'increase', amount: 3500 },
        { category: '混合型基金', current: 15.2, target: 15, action: 'maintain', amount: 0 },
        { category: '货币市场基金', current: 8.8, target: 5, action: 'reduce', amount: 2000 },
        { category: '海外基金', current: 0, target: 5, action: 'increase', amount: 2450 }
      ],
      specificRecommendations: [
        {
          fund: '易方达中小盘混合',
          code: '110011',
          currentValue: 10000,
          targetValue: 8000,
          action: 'reduce',
          amount: 2000,
          reason: '当前估值较高，风险收益比降低，建议适度减持锁定部分收益'
        },
        {
          fund: '华夏上证50ETF',
          code: '510050',
          currentValue: 15000,
          targetValue: 13050,
          action: 'reduce',
          amount: 1950,
          reason: '大盘蓝筹估值处于历史较高水平，适当降低配置控制风险'
        },
        {
          fund: '南方宝元债券',
          code: '202101',
          currentValue: 15000,
          targetValue: 18500,
          action: 'increase',
          amount: 3500,
          reason: '提高防御性资产配置，降低组合波动性，债券收益率处于相对合理水平'
        },
        {
          fund: '易方达中证海外互联网ETF',
          code: '513050',
          currentValue: 0,
          targetValue: 2450,
          action: 'increase',
          amount: 2450,
          reason: '增加海外市场配置，提高组合多元化水平，降低地域集中风险'
        },
        {
          fund: '天弘余额宝货币',
          code: '000198',
          currentValue: 4680.75,
          targetValue: 2680.75,
          action: 'reduce',
          amount: 2000,
          reason: '当前货币市场基金收益率较低，维持适度流动性即可，资金可配置到收益潜力更高的资产类别'
        }
      ],
      expectedImpact: {
        risk: '预计组合波动性降低约15%',
        return: '长期收益潜力略有提升（约0.3%），短期可能略有波动',
        sharpeRatio: '风险调整后收益率(夏普比率)预计从0.85提升至1.05左右'
      }
    }
  };
}

// 获取决策对比数据
export async function fetchComparisonData() {
  await delay(800);
  return {
    success: true,
    data: [
      { date: '2023-01', userReturn: 2.1, aiReturn: 1.8, benchmark: 1.5 },
      { date: '2023-02', userReturn: 1.8, aiReturn: 2.5, benchmark: 2.0 },
      { date: '2023-03', userReturn: -1.2, aiReturn: -0.5, benchmark: -0.8 },
      { date: '2023-04', userReturn: 0.5, aiReturn: 1.2, benchmark: 0.9 },
      { date: '2023-05', userReturn: 1.8, aiReturn: 2.2, benchmark: 1.7 },
      { date: '2023-06', userReturn: -2.5, aiReturn: -1.0, benchmark: -1.5 },
      { date: '2023-07', userReturn: 3.2, aiReturn: 3.5, benchmark: 3.0 },
      { date: '2023-08', userReturn: 0.8, aiReturn: 1.5, benchmark: 1.1 },
      { date: '2023-09', userReturn: -1.5, aiReturn: -0.8, benchmark: -1.2 },
      { date: '2023-10', userReturn: 2.0, aiReturn: 2.8, benchmark: 2.2 },
      { date: '2023-11', userReturn: 1.2, aiReturn: 1.6, benchmark: 1.3 },
      { date: '2023-12', userReturn: 0.9, aiReturn: 1.8, benchmark: 1.1 }
    ]
  };
}

// 获取模拟场景数据
export async function fetchScenarios() {
  await delay(600);
  return {
    success: true,
    data: [
      {
        id: 1,
        title: '2015年股灾模拟',
        description: '体验2015年6月股票市场暴跌，测试您在极端市场条件下的决策过程',
        events: [
          { date: '2015-06-01', title: '市场达到阶段性顶点，上证指数5178点' },
          { date: '2015-06-12', title: '股指开始快速下跌' },
          { date: '2015-06-19', title: '千股跌停，恐慌情绪蔓延' },
          { date: '2015-06-26', title: '央行降息，试图稳定市场' },
          { date: '2015-06-29', title: '再次千股跌停，市场崩盘' }
        ],
        lessons: [
          '学习如何控制恐慌情绪',
          '了解杠杆交易的风险',
          '认识市场泡沫形成的过程',
          '掌握风险管理策略'
        ]
      },
      {
        id: 2,
        title: '长牛市场投资策略',
        description: '模拟2020-2021年美股牛市，练习如何在上涨市场中控制风险并获取收益',
        events: [
          { date: '2020-03-23', title: '美股触底，开启牛市行情' },
          { date: '2020-08-01', title: '科技股领涨，估值持续上升' },
          { date: '2020-11-09', title: '疫苗消息公布，市场板块轮动' },
          { date: '2021-02-15', title: '通胀预期上升，资金从成长转向价值' }
        ],
        lessons: [
          '学习如何判断市场趋势',
          '了解板块轮动规律',
          '掌握牛市中的利润锁定策略',
          '认识过度自信的风险'
        ]
      },
      {
        id: 3,
        title: '利率上升环境下的基金选择',
        description: '在央行加息背景下，学习如何调整基金组合以应对利率变化',
        events: [
          { date: '2022-03-01', title: '央行释放加息信号' },
          { date: '2022-04-15', title: '首次加息25基点' },
          { date: '2022-06-10', title: '通胀数据超预期，债券市场下跌' },
          { date: '2022-09-05', title: '连续加息后经济增长放缓' }
        ],
        lessons: [
          '了解不同类型基金对利率变化的敏感度',
          '掌握债券基金久期管理',
          '学习如何调整资产配置应对利率周期',
          '认识货币政策与市场关系'
        ]
      }
    ]
  };
}

// 获取政策解读数据
export async function fetchPolicyInterpretations() {
  await delay(700);
  return {
    success: true,
    data: [
      {
        id: 1,
        title: '央行降准0.5个百分点对基金市场的影响',
        issuer: '中国人民银行',
        date: '2023-10-15',
        summary: '中国人民银行宣布全面降准0.5个百分点，释放长期资金约1万亿元，以支持实体经济发展。',
        analysis: '此次降准是央行为应对经济下行压力采取的重要举措。降准后，银行体系流动性增加，有利于降低市场利率，减轻企业融资成本，刺激信贷扩张。对基金市场而言，短期内可能提振市场信心，特别是对流动性敏感的成长股和科技股可能受益明显。',
        impact: [
          { sector: '科技板块', effect: 'positive', description: '流动性改善有利于估值修复，特别是前期跌幅较大的科技成长股可能迎来反弹。' },
          { sector: '金融板块', effect: 'neutral', description: '降准可能压缩银行息差，但也可能提升信贷规模，整体影响中性。' },
          { sector: '地产板块', effect: 'positive', description: '降准有助于降低按揭贷款利率，对地产销售和融资环境改善有积极作用。' },
          { sector: '消费板块', effect: 'positive', description: '经济预期改善有利于提振消费信心，特别是可选消费品可能受益。' }
        ],
        relevantFunds: ['易方达科技创新混合', '广发双擎升级混合', '南方消费活力混合', '华夏上证科创板50ETF']
      },
      {
        id: 2,
        title: '财政部扩大专项债发行规模政策解读',
        issuer: '财政部',
        date: '2023-09-28',
        summary: '财政部宣布在2023年第四季度增加发行5000亿元地方政府专项债券，重点支持基础设施建设和重大项目。',
        analysis: '此举表明政府正加大逆周期调节力度，通过财政政策发力稳增长。专项债资金主要流向交通、能源、水利等基础设施领域，也包括新能源、数字经济等战略性新兴产业。这对相关产业链上企业业绩形成支撑，有望带动投资和就业增长。',
        impact: [
          { sector: '基建板块', effect: 'positive', description: '直接受益于专项债资金投入，建筑、材料、机械设备等相关产业链公司将获得更多订单。' },
          { sector: '新能源板块', effect: 'positive', description: '专项债资金部分流向新能源基础设施建设，光伏、风电等产业链有望受益。' },
          { sector: '银行板块', effect: 'neutral', description: '专项债发行增加地方政府性融资需求，但对商业银行影响有限。' }
        ],
        relevantFunds: ['中欧基建先锋股票', '华安创业板50ETF', '嘉实基本面50指数']
      }
    ]
  };
}

// 获取新闻分析数据
export async function fetchNewsAnalysis() {
  await delay(600);
  return {
    success: true,
    data: [
      {
        id: 1,
        title: '美联储暗示2024年可能降息，全球市场普涨',
        source: '财经早报',
        date: '2023-12-14',
        summary: '美联储在12月议息会议上维持利率不变，但官员们预测2024年可能有三次降息，这一表态超出市场预期，美股大涨，美元指数下跌，全球股市普遍走强。',
        impact: '美联储转向鸽派立场，全球流动性预期改善，有利于风险资产表现。对中国基金市场而言，外资流入预期增强，有望提振A股市场，特别是受益于美元走弱和全球流动性改善的行业如新兴市场、科技和消费龙头。投资者可适度关注全球配置型基金和科技成长主题基金。',
        relevantFunds: ['易方达中证海外互联ETF', '华安标普全球石油指数', '南方全球精选配置']
      },
      {
        id: 2,
        title: '国家发改委：加快培育新质生产力，推动经济高质量发展',
        source: '经济参考报',
        date: '2023-12-12',
        summary: '国家发改委召开专题会议，强调要以科技创新引领现代化产业体系建设，加快培育新质生产力，推动经济高质量发展。重点发展人工智能、量子信息、生物技术等前沿领域。',
        impact: '政策导向明确支持科技创新和产业升级，有望带动相关领域投资增长。对基金投资而言，科技创新、高端制造、人工智能等主题基金可能迎来政策红利期。投资者可关注具有核心技术和研发优势的科技龙头企业以及产业链上下游的优质公司，适度配置相关主题基金。',
        relevantFunds: ['工银瑞信前沿医疗股票', '招商中证人工智能主题指数', '易方达创新驱动混合']
      },
      {
        id: 3,
        title: '重磅数据：11月社融增量超预期，经济回暖信号显现',
        source: '证券时报',
        date: '2023-12-10',
        summary: '央行公布11月金融数据，新增社会融资规模2.45万亿元，明显高于市场预期；M2同比增长9.3%，新增人民币贷款1.09万亿元，均显示经济活动有所回暖。',
        impact: '金融数据超预期反映经济企稳回升迹象，有利于市场风险偏好提升。对基金市场而言，经济基本面改善将支撑企业盈利预期，有望推动权益类资产估值修复。建议投资者可适度增配低估值的周期性行业基金和受益于经济复苏的消费类基金，同时保持对成长板块的关注。',
        relevantFunds: ['富国沪深300指数增强', '景顺长城消费精选混合', '汇添富价值精选混合']
      }
    ]
  };
}

// 用于行为画像数据的钩子
export function useBehaviorData() {
  return {
    behaviorRadarData: [
      { subject: '损失厌恶', score: 75 },
      { subject: '过度自信', score: 60 },
      { subject: '从众心理', score: 30 },
      { subject: '锚定效应', score: 55 },
      { subject: '处置效应', score: 65 },
      { subject: '心理账户', score: 45 }
    ],
    behaviorBiases: [
      {
        name: '损失厌恶',
        score: 75,
        description: '您对亏损的反应比同等收益更强烈，这可能导致您在面临亏损时不愿意止损，或过早兑现收益。',
        suggestions: [
          '设置自动止损点，避免情绪化决策',
          '制定投资计划并严格执行',
          '将注意力从短期波动转移到长期价值上'
        ]
      },
      {
        name: '过度自信',
        score: 60,
        description: '您可能高估自己的判断和预测能力，这可能导致过度交易或过度集中投资。',
        suggestions: [
          '定期回顾和评估过去的投资决策',
          '考虑相反观点和潜在风险',
          '增加投资组合多样性'
        ]
      }
    ],
    behaviorStats: {
      tradingFrequency: {
        daily: 0.5,
        weekly: 2.8,
        monthly: 12.4
      },
      marketConditionReactions: {
        bullMarket: 'aggressive',
        bearMarket: 'fearful',
        volatileMarket: 'reactive'
      }
    },
    getPrimaryBiases: () => ['损失厌恶', '过度自信'],
    getBehaviorRiskScore: () => 68,
    getKnowledgeScore: () => 72,
    loading: false,
    error: null
  };
}

// 实用格式化工具
export const formatters = {
  // 格式化货币
  formatCurrency: (value) => {
    return new Intl.NumberFormat('zh-CN', {
      style: 'currency',
      currency: 'CNY',
      minimumFractionDigits: 2
    }).format(value);
  },
  // 格式化百分比
  formatPercent: (value) => {
    return new Intl.NumberFormat('zh-CN', {
      style: 'percent',
      minimumFractionDigits: 1,
      maximumFractionDigits: 2
    }).format(value / 100);
  },
  // 格式化日期
  formatDate: (dateString, format = 'short') => {
    const date = new Date(dateString);
    if (format === 'short') {
      return date.toLocaleDateString('zh-CN');
    } else if (format === 'medium') {
      return date.toLocaleDateString('zh-CN', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    } else if (format === 'long') {
      return date.toLocaleDateString('zh-CN', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        weekday: 'long'
      });
    }
    return dateString;
  }
};
</file>

<file path="src/styles/responsive-variables.css">
/* 响应式布局变量 */
:root {
  /* 基础间距 - 在不同设备上调整大小 */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;
  
  /* 内容宽度配置 */
  --content-max-width: 1200px;
  
  /* 响应式网格布局断点 */
  --breakpoint-sm: 576px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 992px;
  --breakpoint-xl: 1200px;
  
  /* 字体大小 */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-md: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;
  
  /* 触摸目标大小（移动端的按钮等至少要有这个高度以方便点击） */
  --touch-target-size: 44px;

  /* 响应式调整 - 间距 */
  --spacing-mobile-xs: 0.25rem;
  --spacing-mobile-sm: 0.375rem;
  --spacing-mobile-md: 0.75rem;
  --spacing-mobile-lg: 1.25rem;
  --spacing-mobile-xl: 1.5rem;
  
  /* 响应式调整 - 页面布局 */
  --page-padding-x-mobile: var(--spacing-mobile-md);
  --page-padding-y-mobile: var(--spacing-mobile-md);
  
  /* 响应式调整 - 卡片布局 */
  --card-padding-mobile: var(--spacing-mobile-md);
  
  /* 响应式调整 - 字体大小 */
  --font-size-mobile-xs: 0.6875rem;
  --font-size-mobile-sm: 0.8125rem;
  --font-size-mobile-md: 0.9375rem;
  --font-size-mobile-lg: 1.0625rem;
  --font-size-mobile-xl: 1.1875rem;
  --font-size-mobile-2xl: 1.375rem;
  --font-size-mobile-3xl: 1.625rem;
}

/* 平板设备 */
@media (max-width: 992px) {
  :root {
    --spacing-xl: 1.75rem;
    --spacing-2xl: 2.5rem;
    
    /* 减小字体大小以适应平板 */
    --font-size-3xl: 1.75rem;
    --font-size-4xl: 2rem;
    
    /* 调整页面内边距 */
    --page-padding-x: var(--spacing-md);
  }
}

/* 移动设备 */
@media (max-width: 576px) {
  :root {
    /* 进一步减小间距 */
    --spacing-lg: 1rem;
    --spacing-xl: 1.5rem;
    --spacing-2xl: 2rem;
    
    /* 减小字体大小以适应手机屏幕 */
    --font-size-xl: 1.125rem;
    --font-size-2xl: 1.25rem;
    --font-size-3xl: 1.5rem;
    --font-size-4xl: 1.75rem;
    
    /* 调整页面内边距 */
    --page-padding-x: var(--spacing-sm);
    --page-padding-y: var(--spacing-sm);
    
    /* 调整顶部间距 */
    --page-top-spacing: var(--spacing-lg);
  }
}

/* 针对小屏幕手机的特别调整 */
@media (max-width: 360px) {
  :root {
    --font-size-md: 0.9375rem;
    --spacing-md: 0.75rem;
  }
}

/* 安全区域变量（特别针对iPhone X及以上的刘海屏） */
:root {
  --safe-area-inset-top: env(safe-area-inset-top, 0px);
  --safe-area-inset-right: env(safe-area-inset-right, 0px);
  --safe-area-inset-bottom: env(safe-area-inset-bottom, 0px);
  --safe-area-inset-left: env(safe-area-inset-left, 0px);
}

/* 注意: 基础的响应式变量已移至variables.css文件 */
</file>

<file path="src/App.css">
.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  width: 100%;
  overflow-x: hidden; /* 防止水平滚动 */
}

.page-container {
  max-width: var(--page-max-width);
  margin: 0 auto;
  padding: var(--page-padding-y) var(--page-padding-x);
  padding-top: var(--page-top-spacing); /* 使用统一的顶部间距变量 */
  width: 100%;
}

/* 深色模式下确保背景颜色正确 */
.dark-theme .app-container {
  background-color: var(--background-default);
}

.card {
  background: var(--card-background, white);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-sm);
  padding: var(--spacing-lg);
  margin-bottom: var(--spacing-lg);
}

/* 使用全局变量确保一致性，并遵循TextStyles.css的样式 */
.section-title {
  font-size: var(--font-size-xl);
  font-weight: 600;
  margin-bottom: var(--spacing-md);
  color: var(--text-primary);
}

/* 这些元素可以直接利用TextStyles.css中定义的类 */
/* 例如: <div class="section-title text-heading"> */

/* 辅助类 */
.text-center {
  text-align: center;
}

.flex {
  display: flex;
}

.flex-column {
  flex-direction: column;
}

.align-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.mt-2 {
  margin-top: var(--spacing-sm);
}

.mb-2 {
  margin-bottom: var(--spacing-sm);
}

.my-2 {
  margin-top: var(--spacing-sm);
  margin-bottom: var(--spacing-sm);
}

.p-2 {
  padding: var(--spacing-sm);
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover, maximum-scale=1.0, user-scalable=no" />
    <meta name="theme-color" content="#2563eb" />
    <meta name="description" content="FundGene - 基于AI的基金投资助手，帮助您做出更理性的投资决策" />
    <!-- PWA支持 -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="FundGene">
    <link rel="apple-touch-icon" href="/logo192.png">
    <link rel="manifest" href="/manifest.json" />
    <title>FundGene - a个基于AI的基金投资助手</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
    <!-- Service Worker注册 -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/serviceWorker.js')
            .then(reg => console.log('Service worker registered'))
            .catch(err => console.log('Service worker not registered', err));
        });
      }
      
      // 处理iOS中底部安全区域的问题
      document.documentElement.style.setProperty('--safe-area-inset-bottom', `${window.innerHeight - document.documentElement.clientHeight}px`);
      window.addEventListener('resize', () => {
        document.documentElement.style.setProperty('--safe-area-inset-bottom', `${window.innerHeight - document.documentElement.clientHeight}px`);
      });
    </script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "fundgene-ui",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "clean": "rm -rf dist",
    "rebuild": "npm run clean && npm run build",
    "deploy:netlify": "npm run build && npx netlify deploy --prod",
    "deploy:vercel": "npm run build && npx vercel --prod",
    "analyze": "vite build --mode analyze",
    "prepare-app": "npm run build && npx cap sync",
    "check-css": "node tools/css-specificity-checker.js"
  },
  "dependencies": {
    "@ant-design/icons": "^5.2.6",
    "antd": "^5.10.0",
    "axios": "^1.4.0",
    "classnames": "^2.3.2",
    "prop-types": "^15.8.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^4.10.1",
    "react-router-dom": "^6.14.2",
    "recharts": "^2.7.2",
    "workbox-window": "^7.0.0"
  },
  "devDependencies": {
    "@capacitor/android": "^5.5.0",
    "@capacitor/cli": "^5.5.0",
    "@capacitor/core": "^5.5.0",
    "@capacitor/ios": "^5.5.0",
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "chalk": "^4.1.2",
    "css-parse": "^2.0.0",
    "eslint": "^8.45.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "netlify-cli": "^17.0.0",
    "rollup-plugin-visualizer": "^5.9.2",
    "typescript": "^5.8.2",
    "vercel": "^32.5.0",
    "vite": "^4.4.5",
    "vite-plugin-pwa": "^0.16.7"
  }
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2018",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { VitePWA } from 'vite-plugin-pwa'
import { visualizer } from 'rollup-plugin-visualizer'

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  return {
    plugins: [
      react(),
      // 添加 PWA 支持
      VitePWA({
        registerType: 'autoUpdate',
        includeAssets: ['favicon.svg', 'logo192.png', 'robots.txt'],
        manifest: {
          name: 'FundGene - 基于AI的基金投资助手',
          short_name: 'FundGene',
          description: '基于AI的基金投资助手，帮助您做出更理性的投资决策',
          theme_color: '#2563eb',
          icons: [
            {
              src: 'logo192.png',
              sizes: '192x192',
              type: 'image/png'
            },
            {
              src: 'logo512.png',
              sizes: '512x512',
              type: 'image/png'
            }
          ]
        }
      }),
      // 在分析模式下添加打包分析插件
      mode === 'analyze' ? visualizer({
        open: true,
        filename: 'dist/stats.html',
        gzipSize: true,
        brotliSize: true
      }) : null
    ],
    server: {
      port: 3000,
      open: true,
      host: true // 允许局域网内其他设备访问，便于移动设备测试
    },
    resolve: {
      alias: {
        '@': '/src'
      }
    },
    // 使用相对路径而不是相对根目录
    base: './',
    build: {
      // 在生产模式下禁用源码映射
      sourcemap: process.env.NODE_ENV !== 'production',
      // 确保生成正确的资源引用路径
      assetsDir: 'assets',
      // 改善大型项目性能
      chunkSizeWarningLimit: 1500,
      // 确保生成HTML文件
      emptyOutDir: true,
      // 将CSS提取到单独文件
      cssCodeSplit: true,
      // 添加manifest
      manifest: true,
      // 优化打包大小
      rollupOptions: {
        output: {
          manualChunks: {
            vendor: ['react', 'react-dom', 'react-router-dom'],
            charts: ['recharts'],
            ui: ['antd', '@ant-design/icons']
          }
        }
      },
      // 优化移动设备加载性能
      target: ['es2020', 'edge88', 'firefox78', 'chrome87', 'safari14']
    }
  }
})
</file>

<file path="src/components/layout/Header.css">
.header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000; /* 确保头部在侧边栏之上 */
  height: 64px;
  background-color: var(--primary-color);
  color: white;
  display: flex;
  align-items: center;
  padding: 0 var(--spacing-md);
  box-shadow: var(--shadow-md);
}

.header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 100%;
  width: 100%;
  padding: 0 var(--spacing-lg);
}

.header-left, .header-right {
  display: flex;
  align-items: center;
}

.sidebar-toggle {
  background: none;
  border: none;
  font-size: var(--font-size-xl);
  color: white;
  cursor: pointer;
  padding: var(--spacing-sm);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: var(--spacing-sm);
  transition: color 0.2s;
  border-radius: 50%;
  width: 36px;
  height: 36px;
}

.sidebar-toggle:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

@media (max-width: 768px) {
  .sidebar-toggle {
    font-size: var(--font-size-xl);
    margin-right: var(--spacing-xs);
    padding: var(--spacing-xs);
  }
  
  .logo {
    font-size: var(--font-size-xl);
  }
  
  .logo-icon {
    height: 24px;
    width: 24px;
  }
}

.logo-link {
  text-decoration: none;
  display: flex;
  align-items: center;
}

.logo-icon {
  height: 28px;
  width: 28px;
  margin-right: var(--spacing-xs);
}

.logo {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  /* 彩色渐变效果 */
  background: linear-gradient(45deg, #ff9a9e 0%, #fad0c4 99%, #fad0c4 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  
  /* 增加一些立体感和大小 */
  font-size: var(--font-size-2xl);
  letter-spacing: 1px;
  padding: 0 var(--spacing-xs);
  
  /* 增强显示效果 */
  text-decoration: none;
  display: inline-block;
  text-shadow: none; /* 移除之前的文本阴影，因为使用了渐变色 */
}

/* 添加一个悬停效果，鼠标移上去时变化 */
.logo:hover {
  background: linear-gradient(45deg, #a18cd1 0%, #fbc2eb 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  transform: scale(1.05);
  transition: var(--transition-default);
}

.theme-toggle {
  background: none;
  border: none;
  cursor: pointer;
  font-size: var(--font-size-lg);
  margin-right: var(--spacing-md);
  padding: var(--spacing-xs);
  display: flex;
  align-items: center;
  color: white;
  border-radius: var(--border-radius-md);
  transition: background-color 0.2s;
}

.theme-toggle:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.theme-toggle-text {
  margin-left: var(--spacing-xs);
  font-size: var(--font-size-sm);
  display: none;
}

@media (min-width: 768px) {
  .theme-toggle-text {
    display: inline;
  }
}

.user-menu {
  display: flex;
  align-items: center;
}

.user-name {
  margin-right: var(--spacing-md);
}

.logout-button {
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  padding: var(--spacing-xs) var(--spacing-md);
  border-radius: var(--border-radius-md);
  cursor: pointer;
}

.logout-button:hover {
  background: rgba(255, 255, 255, 0.3);
}

/* 深色模式的特定调整 */
.dark-theme .header {
  background-color: var(--header-background);
  box-shadow: var(--shadow-lg);
}

/* 用户下拉菜单深色模式 */
.dark-theme .user-dropdown {
  background-color: var(--dropdown-background);
  border-color: var(--neutral-300);
}

.dark-theme .dropdown-divider {
  background-color: var(--neutral-300);
}

.dark-theme .dropdown-item {
  color: var(--text-primary);
}

.dark-theme .dropdown-item:hover {
  background-color: var(--neutral-300);
}
</file>

<file path="src/contexts/AuthContext.jsx">
import React, { createContext, useState, useEffect, useCallback } from 'react';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [authError, setAuthError] = useState(null);
  const [initializing, setInitializing] = useState(true);

  // 检查本地存储中的用户信息和token
  useEffect(() => {
    try {
      // 检查本地存储中是否有用户信息和token
      const storedUser = localStorage.getItem('user');
      const token = localStorage.getItem('token');
      const expiry = localStorage.getItem('token_expiry');
      
      if (storedUser && token) {
        // 检查token是否过期
        const isValid = expiry && new Date().getTime() < parseInt(expiry);
        
        if (isValid) {
          setUser(JSON.parse(storedUser));
        } else {
          // token已过期，清除存储
          localStorage.removeItem('user');
          localStorage.removeItem('token');
          localStorage.removeItem('token_expiry');
        }
      }
    } catch (error) {
      console.error('读取本地存储失败', error);
    } finally {
      setLoading(false);
      setInitializing(false);
    }
  }, []);

  const clearAuthError = useCallback(() => {
    setAuthError(null);
  }, []);

  const login = useCallback(async (credentials, remember = false) => {
    try {
      setLoading(true);
      setAuthError(null);
      
      // 在实际应用中，这里应该调用API进行身份验证
      // 模拟API调用
      if (!credentials.username || !credentials.password) {
        throw new Error('用户名和密码不能为空');
      }
      
      // 模拟验证过程
      const simulateApiCall = () => {
        return new Promise((resolve) => {
          setTimeout(() => {
            if (credentials.username === 'test' && credentials.password === 'test') {
              resolve({
                success: true,
                data: {
                  id: '1',
                  username: credentials.username,
                  token: 'mock-jwt-token',
                  expiresIn: 24 * 60 * 60 * 1000, // 24小时
                }
              });
            } else {
              resolve({
                success: false,
                message: '用户名或密码错误'
              });
            }
          }, 800);
        });
      };
      
      const response = await simulateApiCall();
      
      if (response.success) {
        const userData = {
          id: response.data.id,
          username: response.data.username,
        };
        
        // 保存用户信息和token
        setUser(userData);
        
        // 如果选择了记住登录，将信息保存到本地存储
        if (remember) {
          const expiry = new Date().getTime() + response.data.expiresIn;
          localStorage.setItem('user', JSON.stringify(userData));
          localStorage.setItem('token', response.data.token);
          localStorage.setItem('token_expiry', expiry.toString());
        }
        
        return { success: true };
      } else {
        throw new Error(response.message || '登录失败');
      }
    } catch (error) {
      setAuthError(error.message);
      return { success: false, message: error.message };
    } finally {
      setLoading(false);
    }
  }, []);

  const register = useCallback(async (userData) => {
    try {
      setLoading(true);
      setAuthError(null);
      
      // 在实际应用中，这里应该调用API进行注册
      // 模拟API调用
      if (!userData.username || !userData.email || !userData.password) {
        throw new Error('所有字段都是必填的');
      }
      
      // 模拟注册过程
      const simulateApiCall = () => {
        return new Promise((resolve) => {
          setTimeout(() => {
            // 模拟用户名已存在的情况
            if (userData.username === 'admin') {
              resolve({
                success: false,
                message: '用户名已被使用'
              });
            } else {
              resolve({
                success: true,
                data: {
                  id: Date.now().toString(),
                  username: userData.username,
                  email: userData.email,
                  token: 'mock-jwt-token',
                  expiresIn: 24 * 60 * 60 * 1000, // 24小时
                }
              });
            }
          }, 800);
        });
      };
      
      const response = await simulateApiCall();
      
      if (response.success) {
        const newUser = {
          id: response.data.id,
          username: response.data.username,
          email: response.data.email
        };
        
        // 保存用户信息和token
        setUser(newUser);
        localStorage.setItem('user', JSON.stringify(newUser));
        localStorage.setItem('token', response.data.token);
        
        const expiry = new Date().getTime() + response.data.expiresIn;
        localStorage.setItem('token_expiry', expiry.toString());
        
        return { success: true };
      } else {
        throw new Error(response.message || '注册失败');
      }
    } catch (error) {
      setAuthError(error.message);
      return { success: false, message: error.message };
    } finally {
      setLoading(false);
    }
  }, []);

  const logout = useCallback(() => {
    // 清除用户状态和本地存储
    setUser(null);
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    localStorage.removeItem('token_expiry');
  }, []);

  // 管理员直接登录功能
  const adminDirectLogin = useCallback(() => {
    // 创建管理员用户数据
    const adminUser = {
      id: 'admin-debug',
      username: 'admin',
      email: 'admin@example.com',
      isAdmin: true
    };
    
    // 设置用户状态
    setUser(adminUser);
    
    // 保存到本地存储，带有短期过期时间
    const expiry = new Date().getTime() + (8 * 60 * 60 * 1000); // 8小时
    localStorage.setItem('user', JSON.stringify(adminUser));
    localStorage.setItem('token', 'admin-debug-token');
    localStorage.setItem('token_expiry', expiry.toString());
    
    return { success: true };
  }, []);

  const authContextValue = {
    user,
    loading,
    authError,
    initializing,
    login,
    logout,
    register,
    clearAuthError,
    adminDirectLogin, // 导出新方法
  };

  return (
    <AuthContext.Provider value={authContextValue}>
      {children}
    </AuthContext.Provider>
  );
};
</file>

<file path="src/pages/Auth.css">
/* 导入基础页面样式和可组合类 */
@import './css-base.css';
@import '../styles/composable-classes.css';

/* 认证页面基础布局 */
.auth-page {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--background-light);
  padding: var(--spacing-md);
  background-image: linear-gradient(135deg, var(--background-light), var(--neutral-100));
}

.auth-container {
  width: 100%;
  max-width: 450px;
  background-color: var(--card-background);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-lg);
  padding: var(--spacing-xl);
  animation: fadeIn 0.5s ease forwards;
  border: 1px solid var(--neutral-200);
  transition: all 0.3s ease;
}

.auth-container:hover {
  box-shadow: var(--shadow-xl);
}

.auth-card {
  width: 100%;
}

.auth-header {
  text-align: center;
  margin-bottom: var(--spacing-xl);
}

.auth-logo {
  width: 80px;
  height: 80px;
  margin-bottom: var(--spacing-md);
}

.auth-title {
  font-size: var(--font-size-2xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: var(--spacing-sm);
  background: linear-gradient(90deg, var(--primary-color), var(--primary-dark));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  letter-spacing: -0.5px;
}

.auth-subtitle {
  color: var(--text-secondary);
  font-size: var(--font-size-md);
  margin-bottom: var(--spacing-md);
}

.form-title {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
  margin-bottom: var(--spacing-lg);
  text-align: center;
}

.auth-form {
  margin-bottom: var(--spacing-lg);
}

.form-group {
  margin-bottom: var(--spacing-md);
  position: relative;
}

.form-group label {
  display: block;
  margin-bottom: var(--spacing-xs);
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
  font-weight: var(--font-weight-medium);
}

.form-group input {
  width: 100%;
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--neutral-300);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-md);
  transition: all 0.3s ease;
  background-color: var(--background-light);
}

.form-group input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.15);
}

.form-group input.input-error {
  border-color: var(--error-color);
}

.form-error {
  color: var(--error-color);
  font-size: var(--font-size-sm);
  margin: var(--spacing-sm) 0;
  padding: var(--spacing-sm);
  background-color: rgba(var(--error-rgb), 0.1);
  border-radius: var(--border-radius-md);
  text-align: center;
  font-weight: var(--font-weight-medium);
}

.field-error {
  color: var(--error-color);
  font-size: var(--font-size-xs);
  margin-top: var(--spacing-xs);
  animation: shake 0.4s ease;
}

.form-options {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-md);
  font-size: var(--font-size-sm);
}

.remember-me {
  display: flex;
  align-items: center;
}

.remember-me input {
  margin-right: var(--spacing-xs);
  accent-color: var(--primary-color);
}

.forgot-password-link {
  color: var(--primary-color);
  text-decoration: none;
  transition: color 0.2s;
}

.forgot-password-link:hover {
  color: var(--primary-dark);
  text-decoration: underline;
}

.form-terms {
  font-size: var(--font-size-xs);
  color: var(--text-secondary);
  margin-bottom: var(--spacing-md);
  text-align: center;
}

.form-terms a {
  color: var(--primary-color);
  text-decoration: none;
}

.form-terms a:hover {
  text-decoration: underline;
}

.auth-button {
  width: 100%;
  padding: var(--spacing-md);
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: all 0.3s;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  overflow: hidden;
}

.auth-button:hover {
  background-color: var(--primary-dark);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(var(--primary-rgb), 0.2);
}

.auth-button:active {
  transform: translateY(0);
  box-shadow: none;
}

.auth-button:disabled {
  background-color: var(--neutral-400);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.auth-links {
  text-align: center;
  margin-top: var(--spacing-lg);
  font-size: var(--font-size-sm);
  color: var(--text-secondary);
}

.auth-links p {
  margin-bottom: var(--spacing-sm);
}

.auth-links a {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: var(--font-weight-medium);
  transition: color 0.2s;
}

.auth-links a:hover {
  color: var(--primary-dark);
  text-decoration: underline;
}

.admin-access {
  margin-top: var(--spacing-md);
  font-size: var(--font-size-xs);
  opacity: 0.7;
}

.admin-link {
  color: var(--neutral-600);
  text-decoration: none;
  font-style: italic;
}

.admin-link:hover {
  color: var(--primary-color);
  text-decoration: underline;
}

/* 分隔线 */
.auth-form:after {
  content: '';
  display: block;
  height: 1px;
  background: linear-gradient(to right, transparent, var(--neutral-300), transparent);
  margin: var(--spacing-lg) 0;
}

/* 动画效果 */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(var(--spacing-md)); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  20%, 60% { transform: translateX(-5px); }
  40%, 80% { transform: translateX(5px); }
}

/* 响应式调整 */
@media (max-width: 480px) {
  .auth-container {
    padding: var(--spacing-lg);
    max-width: 90%;
  }
  
  .auth-title {
    font-size: var(--font-size-xl);
  }
  
  .form-title {
    font-size: var(--font-size-lg);
  }
  
  .form-options {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-sm);
  }
}

@media (max-width: 375px) {
  .auth-container {
    padding: var(--spacing-md);
  }
  
  .auth-button {
    padding: var(--spacing-sm);
  }
}

/* 深色模式调整 */
.dark-theme .auth-page {
  background-color: var(--background-dark);
  background-image: linear-gradient(135deg, var(--background-dark), var(--neutral-50));
}

.dark-theme .auth-container {
  background-color: var(--card-background);
  border-color: var(--neutral-200);
}

.dark-theme .auth-title {
  background: linear-gradient(90deg, var(--primary-light), var(--primary-color));
  -webkit-background-clip: text;
}

.dark-theme .form-group input {
  background-color: var(--input-bg);
  border-color: var(--input-border);
  color: var(--input-text);
}

.dark-theme .form-group input:focus {
  border-color: var(--input-focus-border);
  box-shadow: 0 0 0 3px rgba(66, 135, 245, 0.3);
}

.dark-theme .form-error {
  background-color: rgba(244, 115, 115, 0.2);
}

.dark-theme .auth-button:hover {
  background-color: var(--primary-light);
  box-shadow: 0 4px 12px rgba(66, 135, 245, 0.4);
}

.dark-theme .auth-links a {
  color: var(--text-link);
}

.dark-theme .admin-link {
  color: var(--neutral-500);
}

.dark-theme .admin-link:hover {
  color: var(--text-link);
}
</file>

<file path="src/pages/Dashboard.jsx">
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Card from '../components/common/Card';
import './Dashboard.css';
import { getPortfolioSummary } from '../services/tradingService';
import { getLatestNews } from '../services/newsService';
import { getLatestPolicies } from '../services/policyService';
import { getUserBehaviorAlerts } from '../services/behaviorService';
import { PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';

const COLORS = ['#2563eb', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444'];

const Dashboard = () => {
  const [portfolio, setPortfolio] = useState(null);
  const [news, setNews] = useState([]);
  const [policies, setPolicies] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        
        // 并行获取所有数据
        const [portfolioRes, newsRes, policiesRes, alertsRes] = await Promise.all([
          getPortfolioSummary('current-user'),
          getLatestNews(3),
          getLatestPolicies(2),
          getUserBehaviorAlerts('current-user')
        ]);
        
        if (portfolioRes.success) setPortfolio(portfolioRes.data);
        if (newsRes.success) setNews(newsRes.data);
        if (policiesRes.success) setPolicies(policiesRes.data);
        if (alertsRes.success) {
          // 筛选未读的高优先级提醒
          const unreadHighPriority = alertsRes.data
            .filter(alert => !alert.read && alert.priority === 'high')
            .slice(0, 2);
          setAlerts(unreadHighPriority);
        }
      } catch (error) {
        console.error('加载仪表盘数据失败:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchDashboardData();
  }, []);

  // 资产分配图表
  const renderAssetAllocation = () => {
    if (!portfolio || !portfolio.holdings || portfolio.holdings.length === 0) {
      return <div className="empty-chart dark-bg-secondary dark-text-tertiary">暂无资产数据</div>;
    }

    // 按类别合并数据
    const categoryMap = {};
    portfolio.holdings.forEach(holding => {
      const category = holding.category || '其他';
      if (!categoryMap[category]) {
        categoryMap[category] = 0;
      }
      categoryMap[category] += holding.marketValue;
    });

    // 转换为图表数据
    const chartData = Object.entries(categoryMap).map(([name, value]) => ({
      name,
      value
    }));

    return (
      <div className="asset-allocation-chart">
        <ResponsiveContainer width="100%" height={200}>
          <PieChart>
            <Pie
              data={chartData}
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={80}
              fill="#8884d8"
              paddingAngle={5}
              dataKey="value"
              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
              labelLine={false}
            >
              {chartData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
          </PieChart>
        </ResponsiveContainer>
      </div>
    );
  };

  return (
    <div className="dashboard-page">
      <section className="welcome-section">
        <h1 className="dark-text-heading">欢迎使用智能基金顾问</h1>
        <p className="welcome-description dark-text-description">
          这是您的投资助手，帮助您做出更理性的投资决策。探索认知诊断、行为矫正、决策支持和信息解读功能，提升您的投资能力。
        </p>
      </section>

      <div className="dashboard-grid">
        {/* 资产概览 */}
        <Card className="dashboard-card portfolio-overview-card dark-bg-card dark-shadow-sm">
          <div className="card-header">
            <h2 className="dark-text-heading">资产概览</h2>
            <Link to="/dashboard/decision/portfolio" className="view-all-link dark-text-link">查看详情</Link>
          </div>
          
          {loading ? (
            <div className="loading-indicator dark-text-tertiary">加载中...</div>
          ) : portfolio ? (
            <>
              <div className="portfolio-stats-summary">
                <div className="portfolio-stat">
                  <span className="stat-label dark-text-tertiary">总资产</span>
                  <span className="stat-value dark-text-bold">¥{portfolio.totalValue.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}</span>
                </div>
                <div className="portfolio-stat">
                  <span className="stat-label dark-text-tertiary">今日收益</span>
                  <span className={`stat-value ${portfolio.todayProfit >= 0 ? 'positive' : 'negative'}`}>
                    {portfolio.todayProfit >= 0 ? '+' : ''}
                    ¥{portfolio.todayProfit.toLocaleString('zh-CN', { minimumFractionDigits: 2 })}
                  </span>
                </div>
                <div className="portfolio-stat">
                  <span className="stat-label dark-text-tertiary">持仓数量</span>
                  <span className="stat-value dark-text-bold">{portfolio.holdingsCount}</span>
                </div>
              </div>
              
              <h3 className="sub-section-title dark-text-secondary">资产配置</h3>
              {renderAssetAllocation()}
              
              <div className="quick-actions">
                <Link to="/dashboard/decision/rebalance" className="quick-action-button dark-bg-tertiary dark-text-primary dark-hover">再平衡建议</Link>
                <Link to="/dashboard/behavior/trading" className="quick-action-button dark-bg-tertiary dark-text-primary dark-hover">模拟交易</Link>
              </div>
            </>
          ) : (
            <div className="empty-state dark-bg-secondary dark-text-tertiary">暂无资产数据</div>
          )}
        </Card>
        
        {/* 行为提醒 */}
        <Card className="dashboard-card behavior-alerts-card dark-bg-card dark-shadow-sm">
          <div className="card-header">
            <h2 className="dark-text-heading">行为提醒</h2>
            <Link to="/dashboard/behavior/alerts" className="view-all-link dark-text-link">查看全部</Link>
          </div>
          
          {loading ? (
            <div className="loading-indicator dark-text-tertiary">加载中...</div>
          ) : alerts.length > 0 ? (
            <div className="alerts-list">
              {alerts.map(alert => (
                <div key={alert.id} className="alert-item dark-border">
                  <div className="alert-header">
                    <span className={`alert-priority ${alert.priority}`}></span>
                    <span className="alert-title dark-text-primary">{alert.title}</span>
                  </div>
                  <p className="alert-description dark-text-description">{alert.behavior}</p>
                  <Link to="/dashboard/behavior/alerts" className="alert-action dark-text-link">查看详情</Link>
                </div>
              ))}
            </div>
          ) : (
            <div className="empty-alerts dark-bg-secondary dark-text-tertiary">
              <p>暂无高优先级提醒</p>
              <Link to="/dashboard/behavior/profile" className="check-profile-link dark-text-link">查看我的行为画像</Link>
            </div>
          )}
        </Card>
        
        {/* 新闻与政策 */}
        <Card className="dashboard-card news-policy-card dark-bg-card dark-shadow-sm">
          <div className="card-header">
            <h2 className="dark-text-heading">新闻与政策解读</h2>
            <div className="tab-links">
              <Link to="/dashboard/information/news" className="tab-link dark-hover dark-text-primary">新闻</Link>
              <Link to="/dashboard/information/policy" className="tab-link dark-hover dark-text-primary">政策</Link>
            </div>
          </div>
          
          {loading ? (
            <div className="loading-indicator dark-text-tertiary">加载中...</div>
          ) : (
            <div className="info-content">
              <div>
                <h3 className="sub-section-title dark-text-secondary">热点新闻</h3>
                {news.length > 0 ? (
                  <ul className="news-list">
                    {news.map(item => (
                      <li key={item.id} className="news-item dark-border">
                        <span className="news-date dark-text-tertiary">{item.date}</span>
                        <span className="news-title dark-text-primary">{item.title}</span>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div className="empty-news dark-bg-secondary dark-text-tertiary">暂无新闻数据</div>
                )}
              </div>
              
              <div>
                <h3 className="sub-section-title dark-text-secondary">最新政策</h3>
                {policies.length > 0 ? (
                  <ul className="policy-list">
                    {policies.map(item => (
                      <li key={item.id} className="policy-item dark-border">
                        <span className="policy-issuer dark-text-tertiary">{item.issuer}</span>
                        <span className="policy-title dark-text-primary">{item.title}</span>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div className="empty-policies dark-bg-secondary dark-text-tertiary">暂无政策数据</div>
                )}
              </div>
            </div>
          )}
        </Card>

        {/* AI助手 */}
        <Card className="dashboard-card ai-assistant-card dark-bg-card dark-shadow-sm">
          <h2 className="dark-text-heading">AI投资助手</h2>
          <p className="ai-description dark-text-description">智能AI助手可以回答您的投资问题，提供知识解读，分析市场行情</p>
          <div className="suggested-questions">
            <h3 className="sub-section-title dark-text-secondary">您可能想问</h3>
            <div className="question-bubbles">
              <Link to="/dashboard/cognitive/chat?q=当前市场行情分析" className="question-bubble dark-bg-tertiary dark-text-secondary dark-hover">当前市场行情分析</Link>
              <Link to="/dashboard/cognitive/chat?q=如何降低投资组合风险" className="question-bubble dark-bg-tertiary dark-text-secondary dark-hover">如何降低投资组合风险</Link>
              <Link to="/dashboard/cognitive/chat?q=常见的投资者行为偏差" className="question-bubble dark-bg-tertiary dark-text-secondary dark-hover">常见的投资者行为偏差</Link>
            </div>
          </div>
          <Link to="/dashboard/cognitive/chat" className="start-chat-button">开始对话</Link>
        </Card>
      </div>

      <section className="quick-access-section">
        <h2 className="section-title dark-text-heading">快速访问</h2>
        <div className="quick-access-grid">
          <Link to="/dashboard/cognitive/simulation" className="quick-access-card dark-bg-card dark-shadow-sm">
            <div className="quick-access-icon simulation-icon">🔄</div>
            <h3 className="dark-text-heading">场景模拟</h3>
            <p className="dark-text-description">体验历史市场环境，练习决策能力</p>
          </Link>
          
          <Link to="/dashboard/behavior/profile" className="quick-access-card dark-bg-card dark-shadow-sm">
            <div className="quick-access-icon profile-icon">👤</div>
            <h3 className="dark-text-heading">行为画像</h3>
            <p className="dark-text-description">了解您的投资行为特征和认知偏差</p>
          </Link>
          
          <Link to="/dashboard/decision/rebalance" className="quick-access-card dark-bg-card dark-shadow-sm">
            <div className="quick-access-icon rebalance-icon">⚖️</div>
            <h3 className="dark-text-heading">投资组合再平衡</h3>
            <p className="dark-text-description">获取基于AI的再平衡建议</p>
          </Link>
          
          <Link to="/dashboard/information/policy" className="quick-access-card dark-bg-card dark-shadow-sm">
            <div className="quick-access-icon policy-icon">📋</div>
            <h3 className="dark-text-heading">政策解读</h3>
            <p className="dark-text-description">了解最新政策对投资的影响</p>
          </Link>
        </div>
      </section>
    </div>
  );
};

export default Dashboard;
</file>

<file path="src/pages/Login.jsx">
import React, { useState, useContext, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { AuthContext } from '../contexts/AuthContext';
import './Auth.css';

const Login = () => {
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  
  const { login, authError, clearAuthError, user, adminDirectLogin } = useContext(AuthContext);
  const navigate = useNavigate();
  
  // 如果用户已登录，直接重定向到仪表盘页面
  useEffect(() => {
    if (user) {
      navigate('/dashboard');
    }
  }, [user, navigate]);
  
  // 监听认证错误
  useEffect(() => {
    if (authError) {
      setError(authError);
      setLoading(false);
    }
    
    return () => {
      // 组件卸载时清除错误
      clearAuthError();
    };
  }, [authError, clearAuthError]);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
    
    // 输入时清除错误提示
    if (error) setError('');
  };
  
  const handleRememberChange = (e) => {
    setRememberMe(e.target.checked);
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    // 表单验证
    if (!formData.username.trim()) {
      setError('请输入用户名');
      setLoading(false);
      return;
    }
    
    if (!formData.password.trim()) {
      setError('请输入密码');
      setLoading(false);
      return;
    }
    
    try {
      const result = await login(formData, rememberMe);
      
      if (result.success) {
        // 登录成功，导航到仪表盘页面
        navigate('/dashboard');
      } else {
        // 登录失败，显示错误信息
        setError(result.message || '登录失败，请稍后再试');
      }
    } catch (err) {
      setError('登录过程中发生错误，请稍后再试');
      console.error('登录错误:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleAdminDirectAccess = (e) => {
    e.preventDefault();
    adminDirectLogin();
    navigate('/dashboard');
  };
  
  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1 className="auth-title">FundGene</h1>
            <p className="auth-subtitle">基于AI的基金投资助手</p>
          </div>
          
          <form className="auth-form" onSubmit={handleSubmit}>
            <h2 className="form-title">登录</h2>
            
            {error && <div className="form-error">{error}</div>}
            
            <div className="form-group">
              <label htmlFor="username">用户名</label>
              <input
                type="text"
                id="username"
                name="username"
                value={formData.username}
                onChange={handleChange}
                disabled={loading}
                autoComplete="username"
                autoFocus
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="password">密码</label>
              <input
                type="password"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                disabled={loading}
                autoComplete="current-password"
              />
            </div>
            
            <div className="form-options">
              <div className="remember-me">
                <input
                  type="checkbox"
                  id="rememberMe"
                  checked={rememberMe}
                  onChange={handleRememberChange}
                  disabled={loading}
                />
                <label htmlFor="rememberMe">记住登录</label>
              </div>
              <Link to="/forgot-password" className="forgot-password-link">
                忘记密码?
              </Link>
            </div>
            
            <button 
              type="submit" 
              className="auth-button"
              disabled={loading}
            >
              {loading ? '登录中...' : '登录'}
            </button>
            
            <div className="auth-links">
              <p>
                还没有账号? <Link to="/register">立即注册</Link>
              </p>
              <p className="admin-access">
                <a href="#" onClick={handleAdminDirectAccess} className="admin-link">
                  管理员直接访问 (调试模式)
                </a>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/styles/globals.css">
/* 全局样式 */

/* 引入相关样式文件 */
@import './variables.css';
@import './layout-variables.css';
@import './TextStyles.css';
@import './composable-classes.css';
@import './typography.css';
@import './dark-theme.css';

/* 全局基础样式 */
*, *::before, *::after {
  box-sizing: border-box;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
}

body {
  font-family: var(--font-family);
  font-size: var(--font-size-base);
  line-height: var(--line-height-normal);
  color: var(--text-primary);
  background-color: var(--background-light);
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* 基础排版重置 */
h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: var(--spacing-md);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-heading);
  color: var(--text-heading);
}

p {
  margin-top: 0;
  margin-bottom: var(--spacing-md);
}

a {
  color: var(--text-link);
  text-decoration: none;
  transition: color 0.3s ease;
}

a:hover {
  color: var(--text-link-hover);
  text-decoration: underline;
}

ul, ol {
  padding-left: var(--spacing-lg);
  margin-top: 0;
  margin-bottom: var(--spacing-md);
}

li {
  margin-bottom: var(--spacing-xs);
}

img, svg {
  max-width: 100%;
  height: auto;
  vertical-align: middle;
}

button, input, select, textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

/* 容器布局 */
.container {
  width: 100%;
  max-width: var(--page-max-width);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--page-padding-x);
  padding-right: var(--page-padding-x);
}

/* 基础表单样式 */
input, select, textarea, button {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid var(--neutral-300);
  border-radius: var(--border-radius-md);
  background-color: white;
}

input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
}

button {
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: var(--font-weight-medium);
  color: white;
  background-color: var(--primary-color);
  border: none;
  transition: background-color 0.3s ease, transform 0.15s ease;
}

button:hover {
  background-color: var(--primary-dark);
}

button:active {
  transform: translateY(1px);
}

/* 深色模式样式 */
.dark-theme body {
  color: var(--text-primary);
  background-color: var(--background-dark);
}

.dark-theme input, 
.dark-theme select, 
.dark-theme textarea {
  background-color: var(--input-bg);
  border-color: var(--input-border);
  color: var(--input-text);
}

.dark-theme input:focus, 
.dark-theme select:focus, 
.dark-theme textarea:focus {
  border-color: var(--input-focus-border);
}

/* 滚动条样式 */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--neutral-100);
}

::-webkit-scrollbar-thumb {
  background: var(--neutral-400);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--neutral-500);
}

.dark-theme ::-webkit-scrollbar-track {
  background: var(--neutral-800);
}

.dark-theme ::-webkit-scrollbar-thumb {
  background: var(--neutral-600);
}

.dark-theme ::-webkit-scrollbar-thumb:hover {
  background: var(--neutral-500);
}

/* 基础表格样式 */
table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: var(--spacing-lg);
}

th, td {
  padding: var(--spacing-sm) var(--spacing-md);
  border-bottom: 1px solid var(--neutral-200);
  text-align: left;
}

th {
  font-weight: var(--font-weight-medium);
  background-color: var(--neutral-100);
}

tbody tr:hover {
  background-color: var(--neutral-50);
}

.dark-theme th {
  background-color: var(--neutral-800);
}

.dark-theme th, 
.dark-theme td {
  border-color: var(--neutral-700);
}

.dark-theme tbody tr:hover {
  background-color: var(--neutral-800);
}

/* 无障碍焦点样式 */
:focus {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

/* 移动端响应式调整 */
@media (max-width: 768px) {
  html {
    font-size: 15px;
  }
  
  .container {
    padding-left: var(--page-padding-x-mobile);
    padding-right: var(--page-padding-x-mobile);
  }
  
  h1 {
    font-size: 1.75rem;
  }
  
  h2 {
    font-size: 1.5rem;
  }
  
  h3 {
    font-size: 1.25rem;
  }
}

@media (max-width: var(--breakpoint-md)) {
  html {
    font-size: 15px;
  }
  
  .container {
    padding-left: var(--page-padding-x-mobile);
    padding-right: var(--page-padding-x-mobile);
  }
  
  /* 使用一致的字体大小缩放比例 */
  h1 {
    font-size: 1.75rem;
  }
  
  h2 {
    font-size: 1.5rem;
  }
  
  h3 {
    font-size: 1.25rem;
  }
}

/* 打印样式 */
@media print {
  body {
    background-color: white;
    color: black;
  }
  
  a {
    text-decoration: underline;
    color: black;
  }
  
  .no-print {
    display: none !important;
  }
  
  .page-break {
    page-break-before: always;
  }
}

/* 路由页面加载样式 */
.page-loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 300px;
  padding: var(--spacing-xl);
  text-align: center;
}

.loading-spinner {
  width: 40px;
  height: 40px;
  margin-bottom: var(--spacing-md);
  border: 3px solid var(--neutral-200);
  border-top: 3px solid var(--primary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.route-loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  width: 100%;
  background-color: var(--background-light);
  color: var(--text-primary);
}

.unauthorized {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  text-align: center;
  padding: var(--spacing-xl);
  background-color: var(--background-light);
  color: var(--text-primary);
}

.unauthorized:before {
  content: "⚠️";
  font-size: 48px;
  margin-bottom: var(--spacing-lg);
}

/* 深色模式 */
.dark-theme .page-loading,
.dark-theme .route-loading,
.dark-theme .unauthorized {
  background-color: var(--background-dark);
  color: var(--text-primary-dark);
}

.dark-theme .loading-spinner {
  border-color: var(--neutral-700);
  border-top-color: var(--primary-color);
}
</file>

<file path="src/styles/variables.css">
:root {
  /* 颜色系统 - 主色调 */
  --primary-color: #2563eb;
  --primary-light: #3b82f6;
  --primary-dark: #1d4ed8;
  --primary-bg: rgba(59, 130, 246, 0.1);

  /* 辅助色 */
  --accent-color: #8b5cf6;
  --accent-light: #a78bfa;
  --accent-dark: #7c3aed;
  
  /* 功能色 */
  --success-color: #10b981;
  --success-light: #34d399;
  --success-dark: #059669;
  
  --error-color: #ef4444;
  --error-light: #f87171;
  --error-dark: #dc2626;
  
  --warning-color: #f59e0b;
  --warning-light: #fbbf24;
  --warning-dark: #d97706;
  
  --info-color: #06b6d4;
  --info-light: #22d3ee;
  --info-dark: #0891b2;
  
  /* 中性色 */
  --neutral-50: #f9fafb;
  --neutral-100: #f3f4f6;
  --neutral-200: #e5e7eb;
  --neutral-300: #d1d5db;
  --neutral-400: #9ca3af;
  --neutral-500: #6b7280;
  --neutral-600: #4b5563;
  --neutral-700: #374151;
  --neutral-800: #1f2937;
  --neutral-900: #111827;
  
  /* 背景色 - 确保全局一致使用 */
  --background-light: var(--neutral-50);
  --background-dark: var(--neutral-900);
  --card-background: white;
  
  /* 文本颜色 */
  --text-primary: var(--neutral-900);
  --text-secondary: var(--neutral-700);
  --text-tertiary: var(--neutral-500);
  --text-light: var(--neutral-50);
  
  --text-heading: var(--neutral-900);
  --text-bold: var(--neutral-900);
  --text-title: var(--neutral-900);
  --text-description: var(--neutral-700);
  --text-meta: var(--neutral-500);
  --text-hint: var(--neutral-600);
  --text-link: var(--primary-color);
  --text-link-hover: var(--primary-dark);
  
  /* 字体系列 */
  --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  --font-family-heading: var(--font-family);
  --font-family-mono: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
  
  /* 字体大小 */
  --font-size-base: 1rem;      /* 16px 基准大小 */
  --font-size-xs: 0.75rem;     /* 12px */
  --font-size-sm: 0.875rem;    /* 14px */
  --font-size-md: var(--font-size-base); /* 16px */
  --font-size-lg: 1.125rem;    /* 18px */
  --font-size-xl: 1.25rem;     /* 20px */
  --font-size-2xl: 1.5rem;     /* 24px */
  --font-size-3xl: 1.875rem;   /* 30px */
  --font-size-4xl: 2.25rem;    /* 36px */
  
  /* 字体粗细 */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-bold: 600;
  --font-weight-extrabold: 700;
  
  /* 行高和字间距 */
  --line-height-tight: 1.2;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.6;
  --line-height-heading: 1.3;
  
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
  --letter-spacing-heading: -0.02em;
  
  /* 间距  */
  --spacing-xs: 0.25rem;   /* 4px */
  --spacing-sm: 0.5rem;    /* 8px */
  --spacing-md: 1rem;      /* 16px */
  --spacing-lg: 1.5rem;    /* 24px */
  --spacing-xl: 2rem;      /* 32px */
  --spacing-2xl: 2.5rem;   /* 40px */
  --spacing-3xl: 3rem;     /* 48px */
  
  /* 边框 */
  --border-radius-sm: 0.125rem;    /* 2px */
  --border-radius-md: 0.25rem;     /* 4px */
  --border-radius-lg: 0.5rem;      /* 8px */
  --border-radius-xl: 0.75rem;     /* 12px */
  --border-radius-full: 9999px;
  
  /* 阴影 */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  
  /* 特定布局变量 */
  --header-height: 64px;
  --sidebar-width: 220px;
  --sidebar-collapsed-width: 60px;
  --page-top-spacing: calc(var(--header-height) + var(--spacing-md));
  
  /* 特定组件变量 */
  --card-padding: var(--spacing-lg);
  --card-margin-bottom: var(--spacing-lg);
  --card-title-margin-bottom: var(--spacing-md);
  
  /* 断点 */
  --breakpoint-sm: 576px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 992px;
  --breakpoint-xl: 1200px;
  
  /* 动效 */
  --transition-default: all 0.3s ease;
  --transition-fast: all 0.2s ease;
  --transition-slow: all 0.5s ease;
}
</file>

<file path="src/components/layout/Sidebar.jsx">
import React, { useState, useEffect, useRef, useContext } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import {
  HomeOutlined,
  ExperimentOutlined,
  RobotOutlined,
  AreaChartOutlined,
  ReadOutlined,
  UserOutlined,
  SettingOutlined,
  RightOutlined,
  LeftOutlined,
  BellOutlined,
  FileTextOutlined,
  MenuOutlined
} from '@ant-design/icons';
import { AuthContext } from '../../contexts/AuthContext';
import './Sidebar.css';

const Sidebar = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [collapsed, setCollapsed] = useState(false);
  const [activeGroup, setActiveGroup] = useState(null);
  const [hoverGroup, setHoverGroup] = useState(null);
  const [mouseInSidebar, setMouseInSidebar] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const sidebarActionRef = useRef(false);
  const sidebarRef = useRef(null);
  const { logout } = useContext(AuthContext);

  // 响应窗口大小变化
  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth <= 768;
      setIsMobile(mobile);
      
      // 在移动端自动折叠
      if (mobile && !collapsed) {
        setCollapsed(true);
      }
    };

    window.addEventListener('resize', handleResize);
    handleResize(); // 初始检查
    
    return () => window.removeEventListener('resize', handleResize);
  }, [collapsed]);

  // 监听路径变化
  useEffect(() => {
    // 在移动设备上，路径变化时折叠侧边栏
    if (isMobile) {
      setCollapsed(true);
    }
    
    // 根据当前路径设置激活的导航组
    const pathSegments = location.pathname.split('/').filter(Boolean);
    if (pathSegments.length > 1 && pathSegments[1]) {
      const currentSection = pathSegments[1];
      if (['cognitive', 'behavior', 'decision', 'information'].includes(currentSection)) {
        setActiveGroup(currentSection);
      } else {
        setActiveGroup(null);
      }
    } else {
      setActiveGroup(null);
    }
  }, [location.pathname, isMobile]);

  // 检查路径是否激活
  const isActive = (path) => {
    return location.pathname === path || location.pathname.startsWith(`${path}/`);
  };

  // 鼠标进入侧边栏
  const handleMouseEnter = () => {
    setMouseInSidebar(true);
  };

  // 鼠标离开侧边栏
  const handleMouseLeave = () => {
    setMouseInSidebar(false);
    
    if (!sidebarActionRef.current) {
      setHoverGroup(null);
      if (isMobile) {
        setActiveGroup(null);
      }
    }
    sidebarActionRef.current = false;
  };

  // 鼠标进入导航组
  const handleGroupMouseEnter = (group) => {
    if (collapsed) {
      setHoverGroup(group);
    }
  };

  // 鼠标离开导航组
  const handleGroupMouseLeave = () => {
    if (!mouseInSidebar) {
      setTimeout(() => {
        setHoverGroup(null);
      }, 300);
    }
  };

  // 切换分组展开状态
  const toggleGroup = (group) => {
    sidebarActionRef.current = true;
    setActiveGroup(activeGroup === group ? null : group);
  };

  // 切换侧边栏折叠状态
  const toggleCollapsed = () => {
    setCollapsed(!collapsed);
    
    if (collapsed) {
      setActiveGroup(null);
      setHoverGroup(null);
    }
  };

  // 处理导航
  const handleNavigation = (path) => {
    sidebarActionRef.current = true;
    navigate(path);
    
    if (isMobile) {
      setCollapsed(true);
      setTimeout(() => {
        setActiveGroup(null);
        setHoverGroup(null);
      }, 300);
    }
  };

  // 处理退出登录
  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  // 渲染导航组
  const renderNavGroup = (groupKey, icon, title, items, defaultPath) => {
    const isExpanded = activeGroup === groupKey || hoverGroup === groupKey;
    
    return (
      <div 
        className={`nav-group ${isExpanded ? 'expanded' : ''}`}
        onMouseEnter={() => handleGroupMouseEnter(groupKey)}
        onMouseLeave={handleGroupMouseLeave}
      >
        <div 
          className={`nav-group-header ${isActive(`/${groupKey}`) ? 'active' : ''}`}
          onClick={() => {
            toggleGroup(groupKey);
            if (collapsed && !isMobile) {
              handleNavigation(defaultPath);
            }
          }}
        >
          {icon}
          {!collapsed && (
            <>
              <span className="nav-text">{title}</span>
              <RightOutlined className="arrow-icon" />
            </>
          )}
        </div>
        
        <div className="nav-group-items">
          {items.map((item) => (
            <div 
              key={item.path}
              className={`nav-subitem ${isActive(item.path) ? 'active' : ''}`}
              onClick={() => handleNavigation(item.path)}
            >
              {item.icon}
              <span className="nav-text">{item.label}</span>
              {item.badge && <span className="badge">{item.badge}</span>}
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div 
      ref={sidebarRef}
      className={`sidebar ${collapsed ? 'collapsed' : ''}`}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div className="sidebar-header">
        <div className="logo-container">
          {!collapsed && <h1 className="sidebar-title">智能基金顾问</h1>}
        </div>
        <button className="collapse-button" onClick={toggleCollapsed}>
          {collapsed ? <MenuOutlined /> : <LeftOutlined />}
        </button>
      </div>
      
      <div className="sidebar-content">
        <nav className="sidebar-nav">
          {/* 仪表盘 */}
          <div 
            className={`nav-item ${isActive('/dashboard') && !isActive('/dashboard/behavior') && !isActive('/dashboard/cognitive') && !isActive('/dashboard/decision') && !isActive('/dashboard/information') ? 'active' : ''}`}
            onClick={() => handleNavigation('/dashboard')}
          >
            <HomeOutlined className="nav-icon" />
            {!collapsed && <span className="nav-text">仪表盘</span>}
          </div>
          
          {/* 认知诊断与教学模块 */}
          {renderNavGroup('cognitive', <ExperimentOutlined className="nav-icon" />, '认知诊断与教学', [
            { path: '/dashboard/cognitive/chat', icon: <RobotOutlined className="nav-subicon" />, label: 'AI对话诊断' },
            { path: '/dashboard/cognitive/learning', icon: <ReadOutlined className="nav-subicon" />, label: '学习中心' },
            { path: '/dashboard/cognitive/simulation', icon: <AreaChartOutlined className="nav-subicon" />, label: '场景模拟' }
          ], '/dashboard/cognitive/chat')}
          
          {/* 行为矫正模块 */}
          {renderNavGroup('behavior', <UserOutlined className="nav-icon" />, '行为矫正', [
            { path: '/dashboard/behavior/profile', icon: <UserOutlined className="nav-subicon" />, label: '行为画像' },
            { path: '/dashboard/behavior/trading', icon: <AreaChartOutlined className="nav-subicon" />, label: '模拟交易' },
            { path: '/dashboard/behavior/alerts', icon: <BellOutlined className="nav-subicon" />, label: '行为提醒', badge: 3 }
          ], '/dashboard/behavior/profile')}
          
          {/* 决策支持模块 */}
          {renderNavGroup('decision', <AreaChartOutlined className="nav-icon" />, '决策支持', [
            { path: '/dashboard/decision/portfolio', icon: <AreaChartOutlined className="nav-subicon" />, label: '投资组合分析' },
            { path: '/dashboard/decision/rebalance', icon: <SettingOutlined className="nav-subicon" />, label: '再平衡建议' },
            { path: '/dashboard/decision/comparison', icon: <FileTextOutlined className="nav-subicon" />, label: '决策对比' }
          ], '/dashboard/decision/portfolio')}
          
          {/* 信息解读模块 */}
          {renderNavGroup('information', <ReadOutlined className="nav-icon" />, '信息解读', [
            { path: '/dashboard/information/news', icon: <FileTextOutlined className="nav-subicon" />, label: '新闻解读' },
            { path: '/dashboard/information/policy', icon: <FileTextOutlined className="nav-subicon" />, label: '政策分析' }
          ], '/dashboard/information/news')}
        </nav>
      </div>
      
      <div className="sidebar-footer">
        {!collapsed && (
          <div className="quick-actions">
            <div 
              className="quick-action-link"
              onClick={() => handleNavigation('/dashboard/user/profile')}
            >
              个人设置
            </div>
            <span className="divider">|</span>
            <div 
              className="quick-action-link"
              onClick={handleLogout}
            >
              退出登录
            </div>
          </div>
        )}
        <div className="version-info">
          {!collapsed && <span>版本 1.0.0</span>}
        </div>
      </div>
    </div>
  );
};

export default Sidebar;
</file>

<file path="src/components/layout/Header.jsx">
import React, { useContext, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { AuthContext } from '../../contexts/AuthContext';
import { ThemeContext } from '../../contexts/ThemeContext';
import { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';
import './Header.css';

const Header = ({ toggleSidebar, sidebarCollapsed }) => {
  const { user, logout } = useContext(AuthContext);
  const { theme, toggleTheme } = useContext(ThemeContext);
  const [userMenuOpen, setUserMenuOpen] = useState(false);
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const toggleUserMenu = () => {
    setUserMenuOpen(!userMenuOpen);
  };

  return (
    <header className="header">
      <div className="header-container">
        <div className="header-left">
          <button 
            className="sidebar-toggle" 
            onClick={toggleSidebar}
            aria-label="切换侧边栏"
          >
            {sidebarCollapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
          </button>
          <Link to="/dashboard" className="logo-link">
            <img src="/logo-icon.svg" alt="FundGene Logo" className="logo-icon" />
            <span className="logo">FundGene</span>
          </Link>
        </div>
        
        <div className="header-right">
          <button 
            className="theme-toggle"
            onClick={toggleTheme}
            aria-label={`切换到${theme === 'light' ? '深色' : '浅色'}模式`}
            title={`切换到${theme === 'light' ? '深色' : '浅色'}模式`}
          >
            {theme === 'light' ? '🌙' : '☀️'}
            <span className="theme-toggle-text">
              {theme === 'light' ? '深色模式' : '浅色模式'}
            </span>
          </button>
          
          {user && (
            <div className="user-menu-container">
              <div className="user-avatar" onClick={toggleUserMenu}>
                {user.username?.charAt(0).toUpperCase() || 'U'}
              </div>
              
              {userMenuOpen && (
                <div className="user-dropdown">
                  <div className="user-info">
                    <span className="user-display-name">
                      {user.username || user.name || '用户'}
                    </span>
                    <span className="user-email">{user.email || ''}</span>
                  </div>
                  
                  <div className="dropdown-divider"></div>
                  
                  <Link to="/dashboard/user/profile" className="dropdown-item">
                    个人资料
                  </Link>
                  <Link to="/dashboard/user/settings" className="dropdown-item">
                    账户设置
                  </Link>
                  
                  <div className="dropdown-divider"></div>
                  
                  <button className="dropdown-item logout-item" onClick={handleLogout}>
                    退出登录
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;
</file>

<file path="src/components/layout/Sidebar.css">
.sidebar {
  width: var(--sidebar-width);
  height: calc(100vh - var(--header-height));
  background-color: var(--card-background);
  transition: var(--transition-default);
  display: flex;
  flex-direction: column;
  position: fixed;
  top: var(--header-height);
  left: 0;
  z-index: var(--sidebar-z-index);
  box-shadow: var(--shadow-sm);
  overflow-y: auto;
}

.sidebar.collapsed {
  width: var(--sidebar-collapsed-width);
}

.sidebar-header {
  height: 64px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 var(--spacing-md);
  border-bottom: 1px solid var(--border-color);
}

.logo-container {
  display: flex;
  align-items: center;
  overflow: hidden;
}

.sidebar-title {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-bold);
  color: var(--primary-color);
  margin: 0;
  white-space: nowrap;
}

.collapse-button {
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  padding: var(--spacing-xs);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--border-radius-full);
  transition: var(--transition-fast);
  width: 28px;
  height: 28px;
}

.collapse-button:hover {
  background-color: var(--neutral-100);
  color: var(--primary-color);
}

.sidebar-content {
  flex: 1;
  overflow-y: auto;
  padding: var(--spacing-sm) 0;
}

.sidebar-nav {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-xs);
}

.nav-item,
.nav-group-header {
  display: flex;
  align-items: center;
  padding: var(--spacing-sm) var(--spacing-md);
  color: var(--text-secondary);
  text-decoration: none;
  position: relative;
  cursor: pointer;
  transition: var(--transition-fast);
  border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;
  margin-right: var(--spacing-xs);
}

.nav-item:hover,
.nav-group-header:hover {
  background-color: var(--neutral-100);
  color: var(--primary-color);
}

.nav-item.active,
.nav-group-header.active {
  color: var(--primary-color);
  background-color: rgba(37, 99, 235, 0.08);
  font-weight: var(--font-weight-medium);
}

.nav-item.active::before,
.nav-group-header.active::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 3px;
  background-color: var(--primary-color);
  border-radius: 0 var(--border-radius-sm) var(--border-radius-sm) 0;
}

.nav-icon,
.nav-subicon {
  font-size: var(--font-size-md);
  margin-right: var(--spacing-sm);
  display: flex;
  align-items: center;
  justify-content: center;
  width: 1.5em;
}

.sidebar.collapsed .nav-icon {
  margin-right: 0;
  font-size: var(--font-size-lg);
}

.nav-text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  flex: 1;
  font-size: var(--font-size-sm);
}

.arrow-icon {
  font-size: var(--font-size-xs);
  transition: transform 0.3s;
  opacity: 0.7;
}

.nav-group.expanded .arrow-icon {
  transform: rotate(90deg);
}

/* 导航组样式 */
.nav-group {
  position: relative;
  margin: var(--spacing-xs) 0;
}

/* 子菜单样式 */
.nav-group-items {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  margin-left: var(--spacing-md);
  margin-right: var(--spacing-xs);
}

/* 非折叠状态下的展开子菜单 */
.nav-group.expanded .nav-group-items {
  max-height: 500px;
}

/* 折叠状态下的子菜单定位样式 */
.sidebar.collapsed .nav-group-items {
  position: absolute;
  left: var(--sidebar-collapsed-width);
  top: 0;
  min-width: 180px;
  background-color: var(--card-background);
  box-shadow: var(--shadow-md);
  border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;
  border: 1px solid var(--border-color);
  padding: var(--spacing-xs) 0;
  max-height: none;
  overflow: visible;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition: opacity 0.2s, visibility 0.2s;
  margin-left: 0;
}

/* 折叠状态下的展开子菜单 */
.sidebar.collapsed .nav-group.expanded .nav-group-items {
  opacity: 1;
  visibility: visible;
  pointer-events: auto;
}

/* 折叠状态下鼠标悬停时的展开子菜单 */
.sidebar.collapsed .nav-group:hover .nav-group-items {
  opacity: 1;
  visibility: visible;
  pointer-events: auto;
}

/* 子菜单项样式 */
.nav-subitem {
  display: flex;
  align-items: center;
  padding: var(--spacing-xs) var(--spacing-md) var(--spacing-xs) var(--spacing-lg);
  color: var(--text-secondary);
  text-decoration: none;
  transition: var(--transition-fast);
  position: relative;
  cursor: pointer;
  font-size: var(--font-size-sm);
  border-radius: var(--border-radius-sm);
}

/* 折叠状态下子菜单项样式调整 */
.sidebar.collapsed .nav-subitem {
  padding: var(--spacing-sm) var(--spacing-md);
  white-space: nowrap;
}

.nav-subitem:hover {
  background-color: var(--neutral-100);
  color: var(--primary-color);
}

.nav-subitem.active {
  color: var(--primary-color);
  background-color: rgba(37, 99, 235, 0.05);
  font-weight: var(--font-weight-medium);
}

.nav-subitem.active::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 3px;
  background-color: var(--primary-color);
  border-radius: 0 var(--border-radius-sm) var(--border-radius-sm) 0;
}

.badge {
  background-color: var(--error-color);
  color: white;
  font-size: var(--font-size-xs);
  border-radius: var(--border-radius-full);
  padding: 1px var(--spacing-xs);
  margin-left: var(--spacing-xs);
  line-height: 1.2;
  min-width: 1.5em;
  text-align: center;
}

.sidebar-footer {
  padding: var(--spacing-md);
  border-top: 1px solid var(--border-color);
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

.quick-actions {
  display: flex;
  justify-content: center;
  font-size: var(--font-size-xs);
}

.quick-action-link {
  color: var(--text-secondary);
  text-decoration: none;
  transition: color 0.2s;
  cursor: pointer;
}

.quick-action-link:hover {
  color: var(--primary-color);
  text-decoration: underline;
}

.divider {
  margin: 0 var(--spacing-xs);
  color: var(--border-color);
}

.version-info {
  text-align: center;
  font-size: var(--font-size-xs);
  color: var(--text-tertiary);
}

/* 深色模式调整 */
.dark-theme .sidebar {
  background-color: var(--sidebar-background);
  box-shadow: var(--shadow-sm);
}

.dark-theme .sidebar-header,
.dark-theme .sidebar-footer {
  border-color: var(--border-color);
}

.dark-theme .collapse-button:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.dark-theme .nav-item:hover,
.dark-theme .nav-group-header:hover,
.dark-theme .nav-subitem:hover {
  background-color: rgba(255, 255, 255, 0.05);
}

.dark-theme .nav-item.active,
.dark-theme .nav-group-header.active {
  background-color: rgba(59, 130, 246, 0.15);
}

.dark-theme .sidebar.collapsed .nav-group-items {
  background-color: var(--dropdown-background);
  border-color: var(--border-color);
}

/* 移动端适配 */
@media (max-width: var(--breakpoint-md)) {
  .sidebar {
    width: var(--sidebar-collapsed-width);
    box-shadow: var(--shadow-sm);
  }
  
  .sidebar.collapsed {
    transform: translateX(-100%);
    box-shadow: none;
  }
  
  .sidebar-header {
    padding: var(--spacing-xs) var(--spacing-sm);
    height: 56px;
    justify-content: center;
  }
  
  .nav-text,
  .arrow-icon {
    display: none;
  }
  
  .nav-icon {
    margin-right: 0;
    font-size: var(--font-size-lg);
  }
  
  .nav-item,
  .nav-group-header {
    justify-content: center;
    padding: var(--spacing-md) var(--spacing-sm);
    margin-right: 0;
    border-radius: 0;
  }
  
  .sidebar-content {
    padding: var(--spacing-xs) 0;
  }
  
  /* 子菜单弹出式 */
  .nav-group-items {
    position: fixed;
    left: var(--sidebar-collapsed-width);
    top: auto;
    width: 200px;
    z-index: 1010;
    background-color: var(--card-background);
    box-shadow: var(--shadow-md);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    margin: 0;
    padding: var(--spacing-xs) 0;
  }
  
  .nav-group.expanded .nav-group-items {
    display: block;
    max-height: 80vh;
    overflow-y: auto;
  }
  
  .nav-subitem {
    padding: var(--spacing-sm) var(--spacing-md);
  }
}

/* 超小屏幕适配 */
@media (max-width: var(--breakpoint-sm)) {
  .sidebar {
    width: var(--sidebar-collapsed-width);
  }
  
  .nav-group-items {
    left: var(--sidebar-collapsed-width);
    width: 180px;
  }
}
</file>

<file path="src/components/Layout.css">
.app-layout {
  display: flex;
  min-height: 100vh;
}

.logo {
  height: 64px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  color: var(--primary-color);
  border-bottom: 1px solid rgba(0, 0, 0, 0.06);
}

.app-header {
  background: #fff;
  padding: 0 var(--spacing-md);
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: var(--shadow-sm);
  z-index: 1;
}

.trigger {
  font-size: var(--font-size-lg);
}

.header-right {
  display: flex;
  align-items: center;
}

.user-info {
  display: flex;
  align-items: center;
  cursor: pointer;
}

.username {
  margin-left: 8px;
}

.app-content {
  margin: var(--spacing-lg);
  padding: var(--spacing-lg);
  background: #fff;
  border-radius: var(--border-radius-md);
  min-height: 280px;
  overflow: auto;
}

.layout {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.layout-container {
  display: flex;
  flex: 1;
  margin-top: 64px; /* 与Header高度匹配 */
}

/* 组件特定样式会覆盖全局样式 */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  margin-left: var(--sidebar-width); /* 使用变量，而非硬编码值 */
  transition: margin-left 0.3s;
  padding: var(--main-content-padding);
  background-color: var(--background-light);
  min-height: calc(100vh - var(--header-height));
}

/* 当侧边栏折叠时的样式 */
.sidebar.collapsed ~ .main-content {
  margin-left: var(--sidebar-width-collapsed);
}

/* 响应式调整 */
@media (max-width: 768px) {
  .main-content {
    margin-left: var(--sidebar-width-collapsed);
    padding: var(--spacing-md);
  }
  
  .sidebar.collapsed ~ .main-content {
    margin-left: 0;
  }
}

.content-area {
  flex: 1;
  padding: var(--page-padding-y) var(--page-padding-x);
  padding-top: var(--page-top-spacing); /* 添加统一的顶部间距 */
  background-color: var(--background-light);
  min-height: calc(100vh - 64px); /* 确保内容区域至少占满整个视口高度减去头部 */
}

@media (max-width: 768px) {
  .content-area {
    padding: var(--spacing-md);
    padding-bottom: calc(var(--spacing-md) + 40px); /* 底部添加额外的内边距，确保内容不被导航栏遮挡 */
  }
  
  /* 防止iOS中底部安全区域问题 */
  body {
    padding-bottom: env(safe-area-inset-bottom);
  }
}

@media (max-width: 480px) {
  .main-content {
    margin-left: 50px; /* 与超小屏幕设备侧边栏宽度匹配 */
    padding: var(--spacing-sm);
  }
  
  .content-area {
    padding: var(--spacing-sm);
  }
}
</file>

<file path="src/index.css">
/* 导入变量定义 */
@import './styles/variables.css';
@import './styles/responsive-variables.css';
@import './styles/layout-variables.css';
@import './styles/dark-theme.css';
@import './styles/TextStyles.css';
@import './styles/composable-classes.css';

/* 全局重置和基础样式 */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html,
body {
  font-family: var(--font-family);
  font-size: var(--font-size-base);
  color: var(--text-primary);
  line-height: var(--line-height-normal);
  background-color: var(--background-light);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  transition: background-color 0.3s ease, color 0.3s ease;
}

body {
  min-height: 100vh;
}

#root {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

main {
  flex: 1;
  padding: var(--spacing-md);
}

h1, h2, h3, h4, h5, h6 {
  font-weight: var(--font-weight-bold);
  margin-bottom: var(--spacing-md);
  color: var(--text-heading);
}

a {
  text-decoration: none;
  color: var(--text-link);
}

a:hover {
  text-decoration: underline;
  color: var(--text-link-hover);
}

button {
  cursor: pointer;
}

/* 统一的页面容器类 */
.page-container {
  max-width: var(--page-max-width);
  margin: 0 auto;
  padding: var(--page-padding-y) var(--page-padding-x);
  padding-top: var(--page-top-spacing);
  width: 100%;
}

/* 表单元素基础样式 */
input, select, textarea, button {
  font-family: inherit;
  font-size: inherit;
}

/* 响应式调整 */
@media (max-width: var(--breakpoint-md)) {
  .page-container {
    padding: var(--page-padding-y-mobile) var(--page-padding-x-mobile);
    padding-top: var(--page-top-spacing);
  }
}
</file>

<file path="src/App.jsx">
import React, { useContext, useState } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import { AuthContext } from './contexts/AuthContext';

// 布局组件
import Header from './components/layout/Header';
import Sidebar from './components/layout/Sidebar';
import Footer from './components/layout/Footer';

const App = () => {
  const { user, loading, initializing } = useContext(AuthContext);
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const location = useLocation();

  const toggleSidebar = () => {
    setSidebarCollapsed(!sidebarCollapsed);
  };

  // 如果正在初始化，显示应用加载状态
  if (initializing) {
    return <div className="loading-screen">应用加载中...</div>;
  }

  return (
    <div className="app">
      <Header toggleSidebar={toggleSidebar} />
      {user?.isAdmin && (
        <div className="admin-debug-banner">
          调试模式 - 管理员直接访问
        </div>
      )}
      <div className="main-layout">
        <Sidebar collapsed={sidebarCollapsed} toggleSidebar={toggleSidebar} />
        <main className={`main-content ${sidebarCollapsed ? 'sidebar-collapsed' : ''}`}>
          {loading ? (
            <div className="content-loading">页面加载中...</div>
          ) : (
            <Outlet />
          )}
        </main>
      </div>
      <Footer />
    </div>
  );
};

export default App;

// CSS
const styles = `
  .app {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .loading-screen {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    font-size: var(--font-size-xl);
    color: var(--primary-color);
    background-color: var(--background-light);
  }

  .content-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 200px;
    font-size: var(--font-size-lg);
    color: var(--text-secondary);
  }

  .main-layout {
    margin-top: 64px;
    flex: 1;
    display: flex;
    background-color: var(--background-light);
    min-height: calc(100vh - 64px);
  }

  .main-content {
    flex: 1;
    padding: 0;
    margin-left: 220px; /* 确保与侧边栏宽度精确匹配 */
    transition: margin-left 0.3s ease;
    background-color: var(--background-light);
    border-left: none; /* 确保没有左边框 */
    /* 移除任何可能的额外内边距 */
    padding-left: 0;
    /* 确保与侧边栏无缝衔接 */
    box-sizing: border-box;
    position: relative;
  }

  .main-content.sidebar-collapsed {
    margin-left: 60px; /* 确保与折叠状态的侧边栏宽度精确匹配 */
  }

  @media (max-width: 768px) {
    .main-content {
      margin-left: 60px; /* 与侧边栏宽度匹配 */
      padding: 0 var(--spacing-md) var(--spacing-md);
    }
    
    .main-content.sidebar-collapsed {
      margin-left: 0; /* 侧边栏完全折叠时不预留空间 */
    }
  }

  @media (max-width: 480px) {
    .main-content {
      margin-left: 50px; /* 与超小屏幕设备侧边栏宽度匹配 */
      padding: 0 var(--spacing-sm) var(--spacing-sm);
    }
  }

  .admin-debug-banner {
    background-color: #fef3c7;
    color: #92400e;
    text-align: center;
    padding: 4px 0;
    font-size: 12px;
    position: fixed;
    top: 64px;
    left: 0;
    right: 0;
    z-index: 999;
  }
`;

// 将样式插入到文档中
if (typeof document !== 'undefined') {
  const styleElement = document.createElement('style');
  styleElement.textContent = styles;
  document.head.appendChild(styleElement);
}
</file>

</files>
